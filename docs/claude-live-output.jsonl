{"type":"system","subtype":"init","cwd":"/Users/kyle/Code/cc-tui.nvim","session_id":"16368255-989b-4b2d-af5c-a7dc612b3b36","tools":["Task","Bash","Glob","Grep","LS","ExitPlanMode","Read","Edit","MultiEdit","Write","NotebookEdit","WebFetch","TodoWrite","WebSearch","BashOutput","KillBash","mcp__mcphub__context7__resolve-library-id","mcp__mcphub__context7__get-library-docs","mcp__mcphub__playwright__browser_close","mcp__mcphub__playwright__browser_resize","mcp__mcphub__playwright__browser_console_messages","mcp__mcphub__playwright__browser_handle_dialog","mcp__mcphub__playwright__browser_evaluate","mcp__mcphub__playwright__browser_file_upload","mcp__mcphub__playwright__browser_install","mcp__mcphub__playwright__browser_press_key","mcp__mcphub__playwright__browser_type","mcp__mcphub__playwright__browser_navigate","mcp__mcphub__playwright__browser_navigate_back","mcp__mcphub__playwright__browser_navigate_forward","mcp__mcphub__playwright__browser_network_requests","mcp__mcphub__playwright__browser_take_screenshot","mcp__mcphub__playwright__browser_snapshot","mcp__mcphub__playwright__browser_click","mcp__mcphub__playwright__browser_drag","mcp__mcphub__playwright__browser_hover","mcp__mcphub__playwright__browser_select_option","mcp__mcphub__playwright__browser_tab_list","mcp__mcphub__playwright__browser_tab_new","mcp__mcphub__playwright__browser_tab_select","mcp__mcphub__playwright__browser_tab_close","mcp__mcphub__playwright__browser_wait_for","ListMcpResourcesTool","ReadMcpResourceTool","mcp__zen__chat","mcp__zen__thinkdeep","mcp__zen__planner","mcp__zen__consensus","mcp__zen__codereview","mcp__zen__precommit","mcp__zen__debug","mcp__zen__secaudit","mcp__zen__docgen","mcp__zen__analyze","mcp__zen__refactor","mcp__zen__tracer","mcp__zen__testgen","mcp__zen__challenge","mcp__zen__listmodels","mcp__zen__version"],"mcp_servers":[{"name":"mcphub","status":"connected"},{"name":"zen","status":"connected"}],"model":"claude-opus-4-1-20250805","permissionMode":"default","slash_commands":["extras:sc-create-command","extras:sc-eastereggs","extras:sc-worktrees","extras:sc-pre-commit-setup","extras:sc-pr-comments","market:brag","market:triage-dependabot","market:commit","market:daily-report","market:create-pr","market:init-domain","market:jira-ticket-prioritizer","market:triage-dependabot-detailed","market:warp","market:jira","simpleclaude:sc-fix","simpleclaude:sc-create","simpleclaude:sc-review","simpleclaude:README","simpleclaude:sc-understand","simpleclaude:sc-modify","simpleclaude:TEMPLATE","user:query-conversations","user:code-review","user:update-claude-prompts","user:improve-prompt","user:extract-user-messages","user:claude-md-squisher","user:figma","user:mcp-setup","user:jira","add-dir","agents","clear","compact","config","cost","doctor","exit","help","ide","init","install-github-app","mcp","memory","migrate-installer","model","pr-comments","release-notes","resume","status","statusline","bug","review","security-review","terminal-setup","upgrade","vim","permissions","hooks","export","logout","login","bashes","mcp__zen__chat","mcp__zen__thinkdeeper","mcp__zen__planner","mcp__zen__consensus","mcp__zen__review","mcp__zen__precommit","mcp__zen__debug","mcp__zen__secaudit","mcp__zen__docgen","mcp__zen__analyze","mcp__zen__refactor","mcp__zen__tracer","mcp__zen__testgen","mcp__zen__challenge","mcp__zen__listmodels","mcp__zen__version","mcp__zen__continue"],"apiKeySource":"/login managed key"}
{"type":"assistant","message":{"id":"msg_01DDe63miatQNE3td7b6Qi76","type":"message","role":"assistant","model":"claude-opus-4-1-20250805","content":[{"type":"text","text":"I'll look up the official schema for Claude Code hooks using Context7."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":0,"cache_read_input_tokens":52408,"output_tokens":3,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"16368255-989b-4b2d-af5c-a7dc612b3b36"}
{"type":"assistant","message":{"id":"msg_01DDe63miatQNE3td7b6Qi76","type":"message","role":"assistant","model":"claude-opus-4-1-20250805","content":[{"type":"tool_use","id":"toolu_01XeDuQ4KUQrvaMGVR6cXsyf","name":"mcp__mcphub__context7__resolve-library-id","input":{"libraryName":"Claude Code"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":0,"cache_read_input_tokens":52408,"output_tokens":84,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"16368255-989b-4b2d-af5c-a7dc612b3b36"}
{"type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01XeDuQ4KUQrvaMGVR6cXsyf","type":"tool_result","content":[{"type":"text","text":"Available Libraries (top matches):\n\nEach result includes:\n- Library ID: Context7-compatible identifier (format: /org/project)\n- Name: Library or package name\n- Description: Short summary\n- Code Snippets: Number of available code examples\n- Trust Score: Authority indicator\n- Versions: List of versions if available. Use one of those versions if and only if the user explicitly provides a version in their query.\n\nFor best results, select libraries based on name match, trust score, snippet coverage, and relevance to your use case.\n\n----------\n\n- Title: Claude Code\n- Context7-compatible library ID: /candyluc/claude-code\n- Description: Claude在发布3.7的时候，不是顺便发了一个叫Claude Code的命令行工具么，这个工具是用nodejs实现的npm包，但源码已经过了压缩和基础混淆。不过有人发现它在 0.2.8 版本之前，居然使用的开发环境配置来打生产包，导致打来出的mjs文件有22M之大，文件巨大是因为它使用了 inline-source-map，这个玩意可以直接被反解成源码，混淆了个寂寞。随后 Claude 光速删除了 0.2.8 之前的包，在 0.2.9 修正了问题，不过 github上还是有人发了 0.2.8 开源版 https://github.com/dnakov/claude-code/， 非常值得研究\n- Code Snippets: 23\n- Trust Score: 5.2\n----------\n- Title: Claude Code\n- Context7-compatible library ID: /anthropics/claude-code\n- Description: Claude Code is an agentic terminal tool that understands your codebase to help you code faster by executing tasks, explaining code, and handling git workflows through natural language commands.\n- Code Snippets: 1\n- Trust Score: 8.8\n----------\n- Title: Claude Code Hooks\n- Context7-compatible library ID: /gowaylee/cchooks\n- Description: A lightweight Python toolkit for building Claude Code hooks, simplifying JSON parsing and boilerplate code for various hook types.\n- Code Snippets: 80\n- Trust Score: 7.4\n----------\n- Title: Claude Code UI\n- Context7-compatible library ID: /siteboon/claudecodeui\n- Description: A desktop and mobile UI for Anthropic's Claude Code CLI, enabling local or remote viewing and modification of active projects and sessions with features like a chat interface, integrated terminal, file explorer, and Git integration.\n- Code Snippets: 16\n- Trust Score: 4.8\n----------\n- Title: Claude Code.nvim\n- Context7-compatible library ID: /greggh/claude-code.nvim\n- Description: A Neovim plugin that provides seamless integration with the Claude Code AI assistant, allowing users to toggle Claude Code in a terminal window with customizable options and real-time buffer updates.\n- Code Snippets: 41\n- Trust Score: 8.3\n----------\n- Title: Claude Code Flow\n- Context7-compatible library ID: /ruvnet/claude-code-flow\n- Description: This mode serves as a code-first orchestration layer, enabling Claude to write, edit, test, and optimize code autonomously across recursive agent cycles.\n- Code Snippets: 4303\n- Trust Score: 9.1\n----------\n- Title: Claude Code\n- Context7-compatible library ID: /thevibeworks/claude-code-docs\n- Description: \n- Code Snippets: 302\n- Trust Score: 4.7\n----------\n- Title: Claude Code Go\n- Context7-compatible library ID: /lancekrogers/claude-code-go\n- Description: Golang SDK for Anthropic's Claude Code - A Go wrapper for the command line claude code agent\n- Code Snippets: 55\n- Trust Score: 7.6\n----------\n- Title: Claude Code Ntfy\n- Context7-compatible library ID: /veraticus/claude-code-ntfy\n- Description: A transparent wrapper for Claude Code that sends a notification when Claude needs your attention, featuring intelligent inactivity detection and cross-platform support.\n- Code Snippets: 30\n- Trust Score: 8.8\n----------\n- Title: Claude Code OTel\n- Context7-compatible library ID: /colemurray/claude-code-otel\n- Description: A comprehensive observability solution for monitoring Claude Code usage, performance, and costs, providing insights into AI-assisted development workflows.\n- Code Snippets: 24\n- Trust Score: 9.8\n----------\n- Title: Claude Code SDK\n- Context7-compatible library ID: /geetchoudhary/claude-code-sdk\n- Description: \n- Code Snippets: 42\n- Trust Score: 4.8\n----------\n- Title: Claude Code Go SDK\n- Context7-compatible library ID: /yukifoo/claude-code-sdk-go\n- Description: A Go SDK for Claude Code that provides programmatic access to Claude's agentic coding capabilities, wrapping the Claude Code CLI with a Go-native interface.\n- Code Snippets: 32\n- Trust Score: 5.1\n----------\n- Title: Claude Code Action\n- Context7-compatible library ID: /anthropics/claude-code-action\n- Description: A GitHub action that enables Claude to answer questions and implement code changes in PRs and issues by listening for trigger phrases in comments.\n- Code Snippets: 104\n- Trust Score: 8.8\n----------\n- Title: Claude Code Router\n- Context7-compatible library ID: /musistudio/claude-code-router\n- Description: A powerful tool to route Claude Code requests to different models and customize requests, supporting multiple providers and dynamic model switching.\n- Code Snippets: 36\n- Trust Score: 9.4\n----------\n- Title: Claude Code Telegram\n- Context7-compatible library ID: /richardatct/claude-code-telegram\n- Description: A Telegram bot providing remote access to Claude Code, transforming your phone into a development terminal with AI assistance, project navigation, and session persistence.\n- Code Snippets: 244\n- Trust Score: 6.9\n----------\n- Title: Claude Code Neovim IDE Extension\n- Context7-compatible library ID: /coder/claudecode.nvim\n- Description: claudecode.nvim is a Neovim IDE integration for Claude Code, bringing Anthropic's AI coding assistant to Neovim with a pure Lua implementation and full protocol compatibility.\n- Code Snippets: 81\n- Trust Score: 9.4\n----------\n- Title: Claude Code SDK Python\n- Context7-compatible library ID: /anthropics/claude-code-sdk-python\n- Description: A Python SDK for interacting with Claude Code, enabling developers to send prompts, manage options, and utilize tools for code generation and execution.\n- Code Snippets: 11\n- Trust Score: 8.8\n----------\n- Title: Claude Code Sub Agent Manager\n- Context7-compatible library ID: /webdevtodayjason/sub-agents\n- Description: Claude Sub-Agents Manager is a CLI tool that enhances Claude Code with specialized AI assistants for code review, testing, debugging, and documentation.\n- Code Snippets: 61\n- Trust Score: 7.4\n----------\n- Title: Claude Code Hooks Mastery\n- Context7-compatible library ID: /disler/claude-code-hooks-mastery\n- Description: Master Claude Code hooks to control Claude Code's behavior, with features like prompt validation, security enhancements, and TTS alerts.\n- Code Snippets: 69\n- Trust Score: 8.3\n----------\n- Title: Claude Code Multi AI MCP\n- Context7-compatible library ID: /raiansar/claude_code-multi-ai-mcp\n- Description: Connect Claude Code to multiple AIs like Gemini, Grok, ChatGPT, and DeepSeek to get diverse opinions and assistance without switching platforms.\n- Code Snippets: 22\n- Trust Score: 8.5\n----------\n- Title: Claude Code\n- Context7-compatible library ID: /context7/docs_anthropic_com-en-docs-claude-code\n- Description: Claude Code is an agentic coding tool that integrates with your terminal to help you code faster. It understands your codebase and performs actions like editing files, fixing bugs, and answering questions using natural language commands.\n- Code Snippets: 431\n- Trust Score: 7.5\n----------\n- Title: Claude Code TypeScript SDK\n- Context7-compatible library ID: /instantlyeasy/claude-code-sdk-ts\n- Description: An unofficial TypeScript SDK for the Claude Code CLI, enabling programmatic interaction with Claude for code generation, refactoring, and analysis with features like fluent API, response parsing, and session management.\n- Code Snippets: 194\n- Trust Score: 3.5\n----------\n- Title: Claude Code Usage Monitor\n- Context7-compatible library ID: /maciek-roboblog/claude-code-usage-monitor\n- Description: A real-time terminal monitoring tool for Claude AI token usage, featuring advanced analytics, ML-based predictions, and a Rich UI to track token consumption, burn rate, and cost.\n- Code Snippets: 108\n- Trust Score: 8.5\n----------\n- Title: Claude Code\n- Context7-compatible library ID: /context7/docs_anthropic_com-en-docs-claude-code-overview\n- Description: An agentic coding tool that lives in your terminal, understands your codebase, and helps you code faster through natural language commands by integrating directly with your development environment.\n- Code Snippets: 1225\n- Trust Score: 7.5\n----------\n- Title: AI SDK Provider Claude Code\n- Context7-compatible library ID: /ben-vargas/ai-sdk-provider-claude-code\n- Description: This project provides compatibility for using Claude via the Vercel AI SDK through the official @anthropic-ai/claude-code SDK/CLI, supporting both v4 and v5-beta versions.\n- Code Snippets: 80\n- Trust Score: 6.6\n----------\n- Title: Awesome Claude Code Subagents\n- Context7-compatible library ID: /voltagent/awesome-claude-code-subagents\n- Description: A comprehensive repository of production-ready Claude Code subagents for various development tasks, maintained by VoltAgent.\n- Code Snippets: 875\n- Trust Score: 6.9"}]}]},"parent_tool_use_id":null,"session_id":"16368255-989b-4b2d-af5c-a7dc612b3b36"}
{"type":"assistant","message":{"id":"msg_01Ub8hrBX4R86qQ3K1rqiNM2","type":"message","role":"assistant","model":"claude-opus-4-1-20250805","content":[{"type":"text","text":"Let me get the documentation for Claude Code hooks from the official Anthropic documentation:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":7,"cache_creation_input_tokens":2579,"cache_read_input_tokens":52408,"output_tokens":3,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"16368255-989b-4b2d-af5c-a7dc612b3b36"}
{"type":"assistant","message":{"id":"msg_01Ub8hrBX4R86qQ3K1rqiNM2","type":"message","role":"assistant","model":"claude-opus-4-1-20250805","content":[{"type":"tool_use","id":"toolu_01UYg7p9fEMzw7uGQfmzBMqq","name":"mcp__mcphub__context7__get-library-docs","input":{"context7CompatibleLibraryID":"/anthropics/claude-code","topic":"hooks","tokens":15000}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":7,"cache_creation_input_tokens":2579,"cache_read_input_tokens":52408,"output_tokens":132,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"16368255-989b-4b2d-af5c-a7dc612b3b36"}
{"type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01UYg7p9fEMzw7uGQfmzBMqq","type":"tool_result","content":[{"type":"text","text":"========================\nCODE SNIPPETS\n========================\nTITLE: Manage Approved Tools with Slash Command\nDESCRIPTION: A new `/approved-tools` command has been added for managing tool permissions, providing a convenient way to control which tools Claude can use.\n\nSOURCE: https://github.com/anthropics/claude-code/blob/main/CHANGELOG.md#_snippet_15\n\nLANGUAGE: CLI\nCODE:\n```\n/approved-tools\n```\n\n----------------------------------------\n\nTITLE: Configure Claude with Multiple Values\nDESCRIPTION: The `claude config add` and `claude config remove` commands now accept multiple values separated by commas or spaces, simplifying the process of adding or removing configuration settings.\n\nSOURCE: https://github.com/anthropics/claude-code/blob/main/CHANGELOG.md#_snippet_9\n\nLANGUAGE: CLI\nCODE:\n```\nclaude config add <value1>,<value2>\nclaude config remove <value1> <value2>\n```\n\n----------------------------------------\n\nTITLE: APIDOC: Bedrock ARN Format for Anthropic Models\nDESCRIPTION: Documentation for the updated format of Bedrock ARNs when used with `ANTHROPIC_MODEL` or `ANTHROPIC_SMALL_FAST_MODEL` environment variables, specifying that unescaped slashes (`/`) should be used instead of escaped ones (`%2F`).\n\nSOURCE: https://github.com/anthropics/claude-code/blob/main/CHANGELOG.md#_snippet_3\n\nLANGUAGE: APIDOC\nCODE:\n```\nParameter: ANTHROPIC_MODEL | ANTHROPIC_SMALL_FAST_MODEL\n  Type: string (Bedrock ARN)\n  Description: The Amazon Resource Name (ARN) for the Bedrock model.\n  Format Update: Should use unescaped slashes (e.g., /) instead of escaped slashes (e.g., %2F).\n```\n\n----------------------------------------\n\nTITLE: APIDOC: CLI --print JSON Output Structure\nDESCRIPTION: Documentation for the breaking change in the `--print` CLI command's JSON output, which now returns nested message objects for improved forwards-compatibility and metadata inclusion.\n\nSOURCE: https://github.com/anthropics/claude-code/blob/main/CHANGELOG.md#_snippet_4\n\nLANGUAGE: APIDOC\nCODE:\n```\nCLI Command: --print\nOutput Format: JSON\nStructure Change: Output now returns nested message objects.\n  Example (Conceptual):\n  {\n    \"messages\": [\n      {\n        \"id\": \"msg_abc\",\n        \"content\": \"...\",\n        \"metadata\": {}\n      }\n    ]\n  }\n  (Previously: Flat message objects)\n```\n\n----------------------------------------\n\nTITLE: Toggle Automatic Conversation Compaction\nDESCRIPTION: Automatic conversation compaction, which allows for infinite conversation length, can now be toggled on or off using the `/config` command.\n\nSOURCE: https://github.com/anthropics/claude-code/blob/main/CHANGELOG.md#_snippet_12\n\nLANGUAGE: CLI\nCODE:\n```\n/config\n```\n\n----------------------------------------\n\nTITLE: Resume Conversations with Claude CLI\nDESCRIPTION: Users can now resume previous conversations using the `claude --continue` or `claude --resume` commands, allowing them to pick up where they left off.\n\nSOURCE: https://github.com/anthropics/claude-code/blob/main/CHANGELOG.md#_snippet_5\n\nLANGUAGE: CLI\nCODE:\n```\nclaude --continue\nclaude --resume\n```\n\n----------------------------------------\n\nTITLE: Stream JSON Output in Print Mode\nDESCRIPTION: The print mode (`-p`) now supports streaming output in JSON format via the `--output-format=stream-json` argument, useful for programmatic consumption of Claude's output.\n\nSOURCE: https://github.com/anthropics/claude-code/blob/main/CHANGELOG.md#_snippet_7\n\nLANGUAGE: CLI\nCODE:\n```\nclaude -p --output-format=stream-json\n```\n\n----------------------------------------\n\nTITLE: Enable Vim Bindings for Text Input\nDESCRIPTION: Vim-style key bindings for text input can now be enabled using the `/vim` command, offering a familiar editing experience for Vim users.\n\nSOURCE: https://github.com/anthropics/claude-code/blob/main/CHANGELOG.md#_snippet_11\n\nLANGUAGE: CLI\nCODE:\n```\n/vim\n```\n\n----------------------------------------\n\nTITLE: Import TypeScript SDK for Claude Code\nDESCRIPTION: Instructions to import the newly released TypeScript SDK for Claude Code, enabling programmatic interaction with the service.\n\nSOURCE: https://github.com/anthropics/claude-code/blob/main/CHANGELOG.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport @anthropic-ai/claude-code\n```\n\n----------------------------------------\n\nTITLE: Import MCP Servers from Desktop or JSON\nDESCRIPTION: MCP servers can now be imported from Claude Desktop using `claude mcp add-from-claude-desktop` or added directly as JSON strings with `claude mcp add-json <n> <json>`, providing flexible server setup options.\n\nSOURCE: https://github.com/anthropics/claude-code/blob/main/CHANGELOG.md#_snippet_10\n\nLANGUAGE: CLI\nCODE:\n```\nclaude mcp add-from-claude-desktop\nclaude mcp add-json <n> <json>\n```\n\n----------------------------------------\n\nTITLE: Install Python SDK for Claude Code\nDESCRIPTION: Instructions to install the newly released Python SDK for Claude Code using pip, enabling programmatic interaction with the service.\n\nSOURCE: https://github.com/anthropics/claude-code/blob/main/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\npip install claude-code-sdk\n```\n\n----------------------------------------\n\nTITLE: Interactive MCP Server Setup Wizard\nDESCRIPTION: An interactive setup wizard for adding MCP servers is now available by running `claude mcp add`, guiding users through the configuration process step-by-step.\n\nSOURCE: https://github.com/anthropics/claude-code/blob/main/CHANGELOG.md#_snippet_13\n\nLANGUAGE: CLI\nCODE:\n```\nclaude mcp add\n```\n\n----------------------------------------\n\nTITLE: View Release Notes with Slash Command\nDESCRIPTION: Users can now view release notes at any time directly within the application using the `/release-notes` command.\n\nSOURCE: https://github.com/anthropics/claude-code/blob/main/CHANGELOG.md#_snippet_8\n\nLANGUAGE: CLI\nCODE:\n```\n/release-notes\n```\n\n----------------------------------------\n\nTITLE: Import Files in CLAUDE.md\nDESCRIPTION: Syntax for importing other Markdown files into a CLAUDE.md file, allowing modular organization of documentation or project context.\n\nSOURCE: https://github.com/anthropics/claude-code/blob/main/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n@path/to/file.md\n```\n\n----------------------------------------\n\nTITLE: Run One-Off MCP Servers via CLI\nDESCRIPTION: The `claude --mcp-config` command allows users to run one-off MCP (Multi-Cloud Platform) servers by specifying a configuration file path, enabling flexible server management.\n\nSOURCE: https://github.com/anthropics/claude-code/blob/main/CHANGELOG.md#_snippet_6\n\nLANGUAGE: CLI\nCODE:\n```\nclaude --mcp-config <path-to-file>\n```\n\n----------------------------------------\n\nTITLE: Install Claude Code CLI\nDESCRIPTION: Installs the Claude Code command-line interface globally using npm. This command is essential for setting up the tool on your local machine to manage your codebase.\n\nSOURCE: https://github.com/anthropics/claude-code/blob/main/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g @anthropic-ai/claude-code\n```\n\n----------------------------------------\n\nTITLE: Enable MCP Debug Mode\nDESCRIPTION: Users can run Claude with the `--mcp-debug` flag to get more detailed information about MCP server errors, aiding in troubleshooting and development.\n\nSOURCE: https://github.com/anthropics/claude-code/blob/main/CHANGELOG.md#_snippet_14\n\nLANGUAGE: CLI\nCODE:\n```\nclaude --mcp-debug\n```\n\n========================\nQUESTIONS AND ANSWERS\n========================\nTOPIC: \nQ: What is the primary platform for reporting validated vulnerabilities in Claude Code?\nA: The primary platform for reporting validated vulnerabilities in Claude Code is HackerOne. Anthropic manages its security program on this platform.\n\n\nSOURCE: https://github.com/anthropics/claude-code/blob/main/SECURITY.md#_qa_1\n\n----------------------------------------\n\nTOPIC: Claude Code\nQ: What is Claude Code?\nA: Claude Code is an agentic coding tool that operates within your terminal. It understands your codebase and assists in coding by performing routine tasks, explaining code, and managing git workflows using natural language commands.\n\n\nSOURCE: https://github.com/anthropics/claude-code/blob/main/README.md#_qa_0\n\n----------------------------------------\n\nTOPIC: Claude Code\nQ: What information does Anthropic collect when Claude Code is used?\nA: When Claude Code is used, Anthropic collects feedback, including usage data like code acceptance or rejections, associated conversation data, and user feedback submitted via the `/bug` command.\n\n\nSOURCE: https://github.com/anthropics/claude-code/blob/main/README.md#_qa_3\n\n----------------------------------------\n\nTOPIC: Claude Code\nQ: How can users report bugs or issues with Claude Code?\nA: Users can report issues directly within Claude Code using the `/bug` command or by filing a GitHub issue on the project's repository.\n\n\nSOURCE: https://github.com/anthropics/claude-code/blob/main/README.md#_qa_7\n\n----------------------------------------\n\nTOPIC: Claude Code\nQ: How can Claude Code be integrated into a developer's workflow?\nA: Claude Code can be used directly in the terminal or an IDE. It can also be tagged on GitHub using '@claude' to interact with code repositories.\n\n\nSOURCE: https://github.com/anthropics/claude-code/blob/main/README.md#_qa_2\n\n----------------------------------------\n\nTOPIC: Claude Code\nQ: What privacy safeguards are in place for Claude Code user data?\nA: Privacy safeguards include limited retention periods for sensitive information, restricted access to user session data, and policies against using feedback for model training.\n\n\nSOURCE: https://github.com/anthropics/claude-code/blob/main/README.md#_qa_6\n\n----------------------------------------\n\nTOPIC: Claude Code\nQ: How is user feedback from Claude Code used by Anthropic?\nA: User feedback may be used to improve Anthropic's products and services. However, feedback from Claude Code will not be used to train generative models.\n\n\nSOURCE: https://github.com/anthropics/claude-code/blob/main/README.md#_qa_4\n\n----------------------------------------\n\nTOPIC: Claude Code\nQ: What are the primary functions of Claude Code?\nA: Claude Code helps users code faster by executing routine tasks, explaining complex code, and handling git workflows. These actions are all initiated through natural language commands.\n\n\nSOURCE: https://github.com/anthropics/claude-code/blob/main/README.md#_qa_1\n\n----------------------------------------\n\nTOPIC: \nQ: What is Anthropic's stance on the security of its systems and user data?\nA: Anthropic considers the security of its systems and user data to be its top priority. They value the contributions of security researchers who identify and report potential vulnerabilities in good faith.\n\n\nSOURCE: https://github.com/anthropics/claude-code/blob/main/SECURITY.md#_qa_3\n\n----------------------------------------\n\nTOPIC: Claude Code\nQ: What is the data retention policy for user feedback transcripts in Claude Code?\nA: Due to their potentially sensitive nature, user feedback transcripts collected from Claude Code are stored for a limited period of 30 days.\n\n\nSOURCE: https://github.com/anthropics/claude-code/blob/main/README.md#_qa_5"}]}]},"parent_tool_use_id":null,"session_id":"16368255-989b-4b2d-af5c-a7dc612b3b36"}
{"type":"assistant","message":{"id":"msg_01RuodUXbGx1E4VsVn2nJFP7","type":"message","role":"assistant","model":"claude-opus-4-1-20250805","content":[{"type":"text","text":"The documentation doesn't show the specific hooks schema yet. Let me search for more information about hooks in the official Claude Code documentation:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":7,"cache_creation_input_tokens":2915,"cache_read_input_tokens":54987,"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"16368255-989b-4b2d-af5c-a7dc612b3b36"}
{"type":"assistant","message":{"id":"msg_01RuodUXbGx1E4VsVn2nJFP7","type":"message","role":"assistant","model":"claude-opus-4-1-20250805","content":[{"type":"tool_use","id":"toolu_0186A83HxPTzNNuoGEUr5Qxj","name":"mcp__mcphub__context7__get-library-docs","input":{"context7CompatibleLibraryID":"/context7/docs_anthropic_com-en-docs-claude-code","topic":"hooks","tokens":20000}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":7,"cache_creation_input_tokens":2915,"cache_read_input_tokens":54987,"output_tokens":152,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"16368255-989b-4b2d-af5c-a7dc612b3b36"}
{"type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_0186A83HxPTzNNuoGEUr5Qxj","type":"tool_result","content":[{"type":"text","text":"========================\nCODE SNIPPETS\n========================\nTITLE: Handle Invalid Coordinates Error for Claude Tool\nDESCRIPTION: Example JSON structure for informing Claude about invalid coordinates provided for an action, specifying the out-of-bounds coordinates and display limits.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"role\": \"user\",\n  \"content\": [\n    {\n      \"type\": \"tool_result\",\n      \"tool_use_id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"content\": \"Error: Coordinates (1200, 900) are outside display bounds (1024x768).\",\n      \"is_error\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Define a poor tool description for Claude\nDESCRIPTION: This example illustrates an ineffective tool definition due to its overly brief and vague description. Such a definition provides insufficient context for Claude, leading to potential misinterpretations or incorrect tool usage.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"get_stock_price\",\n  \"description\": \"Gets the stock price for a ticker.\",\n  \"input_schema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"ticker\": {\n        \"type\": \"string\"\n      }\n    },\n    \"required\": [\"ticker\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Payloads for Claude Computer Use Actions\nDESCRIPTION: Provides concrete JSON examples for invoking various actions supported by the Anthropic Claude computer use tool, demonstrating the required structure and parameters for screenshot, left_click, type, and scroll.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"action\": \"screenshot\"\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"action\": \"left_click\",\n  \"coordinate\": [500, 300]\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"action\": \"type\",\n  \"text\": \"Hello, world!\"\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"action\": \"scroll\",\n  \"coordinate\": [500, 400],\n  \"scroll_direction\": \"down\",\n  \"scroll_amount\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Claude Multi-Tool Chaining Dialogue Example\nDESCRIPTION: Illustrates a multi-turn conversation where Claude chains `get_location` and `get_weather` tool calls to answer a user's query, demonstrating the flow of information and tool result integration into a natural language response.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: Dialogue\nCODE:\n```\n| --- | --- |\n| User | What’s the weather like where I am? |\n| Assistant | <thinking>To answer this, I first need to determine the user’s location using the get_location tool. Then I can pass that location to the get_weather tool to find the current weather there.</thinking>[Tool use for get_location] |\n| User | [Tool result for get_location with matching id and result of San Francisco, CA] |\n| Assistant | [Tool use for get_weather with the following input]{ “location”: “San Francisco, CA”, “unit”: “fahrenheit” } |\n| User | [Tool result for get_weather with matching id and result of “59°F (15°C), mostly cloudy”] |\n| Assistant | Based on your current location in San Francisco, CA, the weather right now is 59°F (15°C) and mostly cloudy. It’s a fairly cool and overcast day in the city. You may want to bring a light jacket if you’re heading outside. |\n```\n\n----------------------------------------\n\nTITLE: Integrate Web Search Tool with Claude API using cURL\nDESCRIPTION: Demonstrates how to make an API request to Claude with the web search tool enabled. This example shows a user message asking about TypeScript updates and includes the `web_search_20250305` tool in the request payload, limiting its uses to 5.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/web-search-tool\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n    --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n    --header \"anthropic-version: 2023-06-01\" \\\n    --header \"content-type: application/json\" \\\n    --data '{\n        \"model\": \"claude-opus-4-20250514\",\n        \"max_tokens\": 1024,\n        \"messages\": [\n            {\n                \"role\": \"user\",\n                \"content\": \"How do I update a web app to TypeScript 5.5?\"\n            }\n        ],\n        \"tools\": [{\n            \"type\": \"web_search_20250305\",\n            \"name\": \"web_search\",\n            \"max_uses\": 5\n        }]\n    }'\n```\n\n----------------------------------------\n\nTITLE: Claude Tool Use Output with Inferred Parameters (JSON)\nDESCRIPTION: This JSON snippet demonstrates a `tool_use` block returned by Claude when it attempts to infer missing required parameters for a tool call. In this example, Claude infers 'New York, NY' and 'fahrenheit' for the `get_weather` tool, even if the user prompt didn't explicitly provide them.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"type\": \"tool_use\",\n  \"id\": \"toolu_01A09q90qw90lq917835lq9\",\n  \"name\": \"get_weather\",\n  \"input\": {\"location\": \"New York, NY\", \"unit\": \"fahrenheit\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Web Search Server Tool Error Codes\nDESCRIPTION: This section lists possible error codes for server-side web search tools. Unlike client tools, these errors are handled transparently by Claude, which attempts to provide an alternative response or explanation to the user without requiring explicit `is_error` handling.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: APIDOC\nCODE:\n```\nPossible error codes for web search:\n- too_many_requests: Rate limit exceeded\n- invalid_input: Invalid search query parameter\n- max_uses_exceeded: Maximum web search tool uses exceeded\n- query_too_long: Query exceeds maximum length\n- unavailable: An internal error occurred\n```\n\n----------------------------------------\n\nTITLE: Handle Action Execution Failure for Claude Tool\nDESCRIPTION: Example JSON structure for reporting a general action execution failure to Claude, providing a descriptive error message when an operation like a click fails.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"role\": \"user\",\n  \"content\": [\n    {\n      \"type\": \"tool_result\",\n      \"tool_use_id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"content\": \"Error: Failed to perform click action. The application may be unresponsive.\",\n      \"is_error\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Claude Tool Use API Request with Image and Schema\nDESCRIPTION: Example JSON payload for making an API request to Claude that includes tool definitions, a tool choice, and a user message with an embedded image. It defines a 'record_summary' tool with a schema for extracting key colors, a general description, and an estimated year from an image.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"tools\": [{\n        \"name\": \"record_summary\",\n        \"description\": \"Record a summary of an image.\",\n        \"input_schema\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"key_colors\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"r\": { \"type\": \"number\", \"description\": \"red value [0.0, 1.0]\" },\n                            \"g\": { \"type\": \"number\", \"description\": \"green value [0.0, 1.0]\" },\n                            \"b\": { \"type\": \"number\", \"description\": \"blue value [0.0, 1.0]\" },\n                            \"name\": { \"type\": \"string\", \"description\": \"Human-readable color name in snake_case, e.g. \\\"olive_green\\\" or \\\"turquoise\\\"\" }\n                        },\n                        \"required\": [ \"r\", \"g\", \"b\", \"name\" ]\n                    },\n                    \"description\": \"Key colors in the image. Limit to less than four.\"\n                },\n                \"description\": {\n                    \"type\": \"string\",\n                    \"description\": \"Image description. One to two sentences max.\"\n                },\n                \"estimated_year\": {\n                    \"type\": \"integer\",\n                    \"description\": \"Estimated year that the image was taken, if it is a photo. Only set this if the image appears to be non-fictional. Rough estimates are okay!\"\n                }\n            },\n            \"required\": [ \"key_colors\", \"description\" ]\n        }\n    }],\n    \"tool_choice\": {\"type\": \"tool\", \"name\": \"record_summary\"},\n    \"messages\": [\n        {\"role\": \"user\", \"content\": [\n            {\"type\": \"image\", \"source\": {\n                \"type\": \"base64\",\n                \"media_type\": \"'$IMAGE_MEDIA_TYPE'\",\n                \"data\": \"'$IMAGE_BASE64'\"\n            }},\n            {\"type\": \"text\", \"text\": \"Describe this image.\"}\n        ]}\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Provide tools to Claude using Messages API (Shell)\nDESCRIPTION: Demonstrates how to define and provide a custom tool (get_weather) to Claude using the Anthropic Messages API via a curl command. The example shows the tool's schema and a user prompt.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n  -H \"content-type: application/json\" \\\n  -H \"x-api-key: $ANTHROPIC_API_KEY\" \\\n  -H \"anthropic-version: 2023-06-01\" \\\n  -d '{\n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"tools\": [\n      {\n        \"name\": \"get_weather\",\n        \"description\": \"Get the current weather in a given location\",\n        \"input_schema\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"location\": {\n              \"type\": \"string\",\n              \"description\": \"The city and state, e.g. San Francisco, CA\"\n            }\n          },\n          \"required\": [\"location\"]\n        }\n      }\n    ],\n    \"messages\": [\n      {\n        \"role\": \"user\",\n        \"content\": \"What is the weather like in San Francisco?\"\n      }\n    ]\n  }'\n```\n\n----------------------------------------\n\nTITLE: Handling `max_tokens` Stop Reason for Incomplete Tool Use\nDESCRIPTION: This code snippet demonstrates how to detect if Claude's response was truncated due to the `max_tokens` limit, specifically when an incomplete `tool_use` block is present. It shows how to retry the API request with an increased `max_tokens` value to get the full tool use instruction.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: Python\nCODE:\n```\n# Check if response was truncated during tool use\nif response.stop_reason == \"max_tokens\":\n    # Check if the last content block is an incomplete tool_use\n    last_block = response.content[-1]\n    if last_block.type == \"tool_use\":\n        # Send the request with higher max_tokens\n        response = client.messages.create(\n            model=\"claude-opus-4-20250514\",\n            max_tokens=4096,  # Increased limit\n            messages=messages,\n            tools=tools\n        )\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Initiate Tool Use with Claude (Multiple Tools)\nDESCRIPTION: Demonstrates how to define multiple tools (get_weather and get_time) in a single request to Claude, allowing the model to select and use the appropriate tool(s) based on the user's query.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --header \"content-type: application/json\" \\\n```\n\nLANGUAGE: Python\nCODE:\n```\n\n```\n\nLANGUAGE: Java\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Define Sequential Tools for Claude API Call (Shell/JSON)\nDESCRIPTION: This snippet provides an example of defining sequential tools for the Anthropic Claude API. It shows how `get_location` can be called first to obtain a user's location, and then that location can be used as input for the `get_weather` tool in a subsequent call, illustrating a multi-step tool execution flow.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --header \"content-type: application/json\" \\\n     --data \\\n'{\n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"tools\": [\n        {\n            \"name\": \"get_location\",\n            \"description\": \"Get the current user location based on their IP address. This tool has no parameters or arguments.\",\n            \"input_schema\": {\n                \"type\": \"object\",\n                \"properties\": {}\n            }\n        },\n        {\n            \"name\": \"get_weather\",\n            \"description\": \"Get the current weather in a given location\",\n            \"input_schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"location\": {\n                        \"type\": \"string\",\n                        \"description\": \"The city and state, e.g. San Francisco, CA\"\n                    },\n                    \"unit\": {\n                        \"type\": \"string\",\n                        \"enum\": [\"celsius\", \"fahrenheit\"],\n                        \"description\": \"The unit of temperature, either 'celsius' or 'fahrenheit'\"\n                    }\n                },\n                \"required\": [\"location\"]\n            }\n        }\n    ],\n    \"messages\": [{\n        \"role\": \"user\",\n        \"content\": \"What is the weather like where I am?\"\n    }]\n}'\n```\n\n----------------------------------------\n\nTITLE: Implement Claude Agent Loop in Python\nDESCRIPTION: Shows a Python agent loop that continuously interacts with Claude, sending messages and processing tool calls until Claude indicates the task is complete or no more tools are used.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: Python\nCODE:\n```\nwhile True:\n    response = client.beta.messages.create(...)\n\n    # Check if Claude used any tools\n    tool_results = process_tool_calls(response)\n\n    if not tool_results:\n        # No more tool use, task complete\n        break\n\n    # Continue conversation with tool results\n    messages.append({\"role\": \"user\", \"content\": tool_results})\n```\n\n----------------------------------------\n\nTITLE: Claude Chain of Thought Prompt for Tool Use\nDESCRIPTION: A recommended prompt for Claude Sonnet and Haiku models to encourage pre-tool call analysis, ensuring tools are used appropriately and preventing calls with missing required parameters. It guides the model to think within `<thinking>` tags before making a tool call.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: Text\nCODE:\n```\nAnswer the user's request using relevant tools (if they are available). Before calling a tool, do some analysis within <thinking></thinking> tags. First, think about which of the provided tools is the relevant tool to answer the user's request. Second, go through each of the required parameters of the relevant tool and determine if the user has directly provided or given enough information to infer a value. When deciding if the parameter can be inferred, carefully consider all the context to see if it supports a specific value. If all of the required parameters are present or can be reasonably inferred, close the thinking tag and proceed with the tool call. BUT, if one of the values for a required parameter is missing, DO NOT invoke the function (not even with fillers for the missing params) and instead, ask the user to provide the missing parameters. DO NOT ask for more information on optional parameters if it is not provided.\n```\n\n----------------------------------------\n\nTITLE: Example Python Code with Syntax Error (primes.py)\nDESCRIPTION: This Python code snippet represents the content of the `primes.py` file, which contains functions for checking prime numbers and generating a list of primes. It includes a deliberate syntax error in the `get_primes` function's for loop, which Claude is designed to fix.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool\n\nLANGUAGE: Python\nCODE:\n```\ndef is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef get_primes(limit):\n    \"\"\"Generate a list of prime numbers up to the given limit.\"\"\"\n    primes = []\n    for num in range(2, limit + 1)\n        if is_prime(num):\n            primes.append(num)\n    return primes\n\ndef main():\n    \"\"\"Main function to demonstrate prime number generation.\"\"\"\n    limit = 100\n    prime_list = get_primes(limit)\n    print(f\"Prime numbers up to {limit}:\")\n    print(prime_list)\n    print(f\"Found {len(prime_list)} prime numbers.\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Understand Claude's tool_choice parameter options\nDESCRIPTION: This API documentation outlines the various options available for Claude's `tool_choice` parameter, which controls how Claude decides to use provided tools. Each option dictates a different behavior, from automatic selection to mandatory tool use or complete prevention of tool calls.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: APIDOC\nCODE:\n```\ntool_choice parameter options:\n  - auto: Allows Claude to decide whether to call any provided tools or not. (Default when tools are provided)\n  - any: Tells Claude that it must use one of the provided tools, but doesn’t force a particular tool.\n  - tool: Forces Claude to always use a particular tool.\n  - none: Prevents Claude from using any tools. (Default when no tools are provided)\n```\n\n----------------------------------------\n\nTITLE: API Parameter: Tool Choice Type\nDESCRIPTION: Specifies the type of tool choice strategy. Currently, only `auto` is an available option.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages\n\nLANGUAGE: APIDOC\nCODE:\n```\ntool_choice.type\n\nenum<string>\n\nrequired\n\nAvailable options:\n\n`auto`\n```\n\n----------------------------------------\n\nTITLE: API Parameter: Tool Choice Strategy\nDESCRIPTION: Defines how the model should use provided tools. Options include using a specific tool, any tool, deciding itself, or not using tools at all.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages\n\nLANGUAGE: APIDOC\nCODE:\n```\ntool_choice\n\nobject\n\nHow the model should use the provided tools. The model can use a specific tool, any available tool, decide by itself, or not use tools at all.\n\n* Auto\n* Any\n* Tool\n* None\n\nShow child attributes\n```\n\n----------------------------------------\n\nTITLE: Validate Claude Actions in Python\nDESCRIPTION: Python function to validate parameters of requested actions, such as checking if coordinates are within display bounds, before execution to prevent errors.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: Python\nCODE:\n```\ndef validate_action(action_type, params):\n    if action_type == \"left_click\":\n        x, y = params.get(\"coordinate\", (0, 0))\n        if not (0 <= x < display_width and 0 <= y < display_height):\n            return False, \"Coordinates out of bounds\"\n    return True, None\n```\n\n----------------------------------------\n\nTITLE: Make Streaming API Request to Claude with Tool Use\nDESCRIPTION: This `curl` command demonstrates how to send a streaming API request to the Anthropic Claude model. It defines a `get_weather` tool with a `location` parameter and instructs Claude to use this tool to find the weather in San Francisco, showcasing the beta feature of fine-grained streaming for tool parameter values.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/streaming\n\nLANGUAGE: Shell\nCODE:\n```\n  curl https://api.anthropic.com/v1/messages \\\n    -H \"content-type: application/json\" \\\n    -H \"x-api-key: $ANTHROPIC_API_KEY\" \\\n    -H \"anthropic-version: 2023-06-01\" \\\n    -d '{\n      \"model\": \"claude-opus-4-20250514\",\n      \"max_tokens\": 1024,\n      \"tools\": [\n        {\n          \"name\": \"get_weather\",\n          \"description\": \"Get the current weather in a given location\",\n          \"input_schema\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"location\": {\n                \"type\": \"string\",\n                \"description\": \"The city and state, e.g. San Francisco, CA\"\n              }\n            },\n            \"required\": [\"location\"]\n          }\n        }\n      ],\n      \"tool_choice\": {\"type\": \"any\"},\n      \"messages\": [\n        {\n          \"role\": \"user\",\n          \"content\": \"What is the weather like in San Francisco?\"\n        }\n      ],\n      \"stream\": true\n    }'\n```\n\n----------------------------------------\n\nTITLE: Claude Tool Use for Structured JSON Output (Shell)\nDESCRIPTION: Demonstrates how to configure Claude to produce structured JSON output using a single tool (`record_summary`) and the `tool_choice` parameter. This example shows a `curl` command to interact with the Anthropic API, passing an image and the tool definition.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: Shell\nCODE:\n```\n#!/bin/bash\nIMAGE_URL=\"https://upload.wikimedia.org/wikipedia/commons/a/a7/Camponotus_flavomarginatus_ant.jpg\"\nIMAGE_MEDIA_TYPE=\"image/jpeg\"\nIMAGE_BASE64=$(curl \"$IMAGE_URL\" | base64)\n\ncurl https://api.anthropic.com/v1/messages \\\n     --header \"content-type: application/json\" \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --data \\\n'{\n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"tools\": [{\n        \"name\": \"record_summary\",\n        \"description\": \"Record summary of an image using well-structured JSON.\",\n        \"input_schema\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"key_colors\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"r\": { \"type\": \"number\", \"description\": \"red value [0.0, 1.0]\" },\n                            \"g\": { \"type\": \"number\", \"description\": \"green value [0.0, 1.0]\" },\n```\n\n----------------------------------------\n\nTITLE: API Reference: tools.name\nDESCRIPTION: Defines the `name` property for a tool, which is used by the model to call the tool and appears in `tool_use` blocks. It is a required string with a length constraint.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages\n\nLANGUAGE: APIDOC\nCODE:\n```\ntools.name:\n  Type: string\n  Required: true\n  Description: Name of the tool. This is how the tool will be called by the model and in `tool_use` blocks.\n  Required string length: 1 - 64\n```\n\n----------------------------------------\n\nTITLE: Define a good tool description for Claude\nDESCRIPTION: This example demonstrates a well-structured and detailed tool definition for Claude. It includes a comprehensive description of the tool's purpose, usage conditions, parameter meanings, and limitations, which is crucial for Claude's effective tool selection and execution.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"get_stock_price\",\n  \"description\": \"Retrieves the current stock price for a given ticker symbol. The ticker symbol must be a valid symbol for a publicly traded company on a major US stock exchange like NYSE or NASDAQ. The tool will return the latest trade price in USD. It should be used when the user asks about the current or most recent price of a specific stock. It will not provide any other information about the stock or company.\",\n  \"input_schema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"ticker\": {\n        \"type\": \"string\",\n        \"description\": \"The stock ticker symbol, e.g. AAPL for Apple Inc.\"\n      }\n    },\n    \"required\": [\"ticker\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Application Applies Code Fix and Returns Tool Result\nDESCRIPTION: This snippet shows how an application integrates with Claude's tool use. After receiving Claude's `tool_use` message, the application executes the `str_replace` command and then sends a `tool_result` message back to Claude, confirming the successful text replacement.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool\n\nLANGUAGE: Python\nCODE:\n```\nresponse = client.messages.create(\n    model=\"claude-opus-4-20250514\",\n    max_tokens=1024,\n    tools=[\n        {\n            \"type\": \"text_editor_20250429\",\n            \"name\": \"str_replace_based_edit_tool\"\n        }\n    ],\n    messages=[\n        # Previous messages...\n        {\n            \"role\": \"assistant\",\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": \"I found the syntax error in your primes.py file. In the `get_primes` function, there is a missing colon (:) at the end of the for loop line. Let me fix that for you.\"\n                },\n                {\n                    \"type\": \"tool_use\",\n                    \"id\": \"toolu_01PqRsTuVwXyZAbCdEfGh\",\n                    \"name\": \"str_replace_based_edit_tool\",\n                    \"input\": {\n                        \"command\": \"str_replace\",\n                        \"path\": \"primes.py\",\n                        \"old_str\": \"    for num in range(2, limit + 1)\",\n                        \"new_str\": \"    for num in range(2, limit + 1):\"\n                    }\n                }\n            ]\n        },\n        {\n            \"role\": \"user\",\n            \"content\": [\n                {\n                    \"type\": \"tool_result\",\n                    \"tool_use_id\": \"toolu_01PqRsTuVwXyZAbCdEfGh\",\n                    \"content\": \"Successfully replaced text at exactly one location.\"\n                }\n            ]\n        }\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Claude Model Tool Result Response Example\nDESCRIPTION: Illustrates the JSON structure for returning the result of a tool execution back to the Claude model in a subsequent user message, linking the result to the original `tool_use_id`.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"type\": \"tool_result\",\n    \"tool_use_id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n    \"content\": \"259.75 USD\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Anthropic Claude API Response with Tool Use Block\nDESCRIPTION: This JSON example illustrates an API response from Claude where the `stop_reason` is `tool_use`. It includes a `tool_use` content block detailing the tool's `id`, `name`, and `input` parameters, indicating that Claude intends to use a client-side tool.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"id\": \"msg_01Aq9w938a90dw8q\",\n  \"model\": \"claude-opus-4-20250514\",\n  \"stop_reason\": \"tool_use\",\n  \"role\": \"assistant\",\n  \"content\": [\n    {\n      \"type\": \"text\",\n      \"text\": \"<thinking>I need to use the get_weather, and the user wants SF, which is likely San Francisco, CA.</thinking>\"\n    },\n    {\n      \"type\": \"tool_use\",\n      \"id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"name\": \"get_weather\",\n      \"input\": {\"location\": \"San Francisco, CA\", \"unit\": \"celsius\"}\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Making a Claude API Request with Web Search and Cache Control\nDESCRIPTION: This Python snippet demonstrates how to append messages to a conversation, make a Claude API request using the 'web_search_20250305' tool, and apply 'cache_control' to manage caching behavior. It includes specifying user location for relevant search results and shows how to access cache read tokens from the response.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/web-search-tool\n\nLANGUAGE: Python\nCODE:\n```\nmessages.append({\n    \"role\": \"assistant\",\n    \"content\": response1.content\n})\n\n# Second request with cache breakpoint after the search results\nmessages.append({\n    \"role\": \"user\",\n    \"content\": \"Should I expect rain later this week?\",\n    \"cache_control\": {\"type\": \"ephemeral\"}  # Cache up to this point\n})\n\nresponse2 = client.messages.create(\n    model=\"claude-opus-4-20250514\",\n    max_tokens=1024,\n    messages=messages,\n    tools=[{\n        \"type\": \"web_search_20250305\",\n        \"name\": \"web_search\",\n        \"user_location\": {\n            \"type\": \"approximate\",\n            \"city\": \"San Francisco\",\n            \"region\": \"California\",\n            \"country\": \"US\",\n            \"timezone\": \"America/Los_Angeles\"\n        }\n    }]\n)\n# The second response will benefit from cached search results\n# while still being able to perform new searches if needed\nprint(f\"Cache read tokens: {response2.usage.get('cache_read_input_tokens', 0)}\")\n```\n\n----------------------------------------\n\nTITLE: Handle Invalid Tool Use or Missing Parameters with Claude\nDESCRIPTION: If Claude attempts to use a tool with invalid or missing required parameters, provide a `tool_result` indicating the specific error. Claude will then attempt to retry the tool use, incorporating the missing information, before apologizing to the user after 2-3 retries.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"role\": \"user\",\n  \"content\": [\n    {\n      \"type\": \"tool_result\",\n      \"tool_use_id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"content\": \"Error: Missing required 'location' parameter\",\n      \"is_error\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Claude's Chain of Thought JSON Response\nDESCRIPTION: This JSON snippet demonstrates how Claude Opus 3 model expresses its internal reasoning process (chain of thought) when `tool_choice` is set to `auto`. It shows a `text` content block containing the thinking process and a `tool_use` content block for calling the `get_weather` tool, illustrating a multi-step plan to answer a user query.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"role\": \"assistant\",\n  \"content\": [\n    {\n      \"type\": \"text\",\n      \"text\": \"<thinking>To answer this question, I will: 1. Use the get_weather tool to get the current weather in San Francisco. 2. Use the get_time tool to get the current time in the America/Los_Angeles timezone, which covers San Francisco, CA.</thinking>\"\n    },\n    {\n      \"type\": \"tool_use\",\n      \"id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"name\": \"get_weather\",\n      \"input\": {\"location\": \"San Francisco, CA\"}\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Log Claude Tool Actions in Python\nDESCRIPTION: Python function demonstrating how to log details of executed actions, including type, parameters, and results, for debugging and monitoring purposes.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: Python\nCODE:\n```\nimport logging\n\ndef log_action(action_type, params, result):\n    logging.info(f\"Action: {action_type}, Params: {params}, Result: {result}\")\n```\n\n----------------------------------------\n\nTITLE: Initiate Tool Use with Claude (Single Tool)\nDESCRIPTION: Send an initial message to Claude, defining a single tool (get_weather) and posing a user query. Claude is expected to respond by indicating its intent to use the tool.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --header \"content-type: application/json\" \\\n     --data \\\n'{\n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"tools\": [{\n        \"name\": \"get_weather\",\n        \"description\": \"Get the current weather in a given location\",\n        \"input_schema\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"location\": {\n                    \"type\": \"string\",\n                    \"description\": \"The city and state, e.g. San Francisco, CA\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"enum\": [\"celsius\", \"fahrenheit\"],\n                    \"description\": \"The unit of temperature, either \\\"celsius\\\" or \\\"fahrenheit\\\"\"\n                }\n            },\n            \"required\": [\"location\"]\n        }\n    }],\n    \"messages\": [{\"role\": \"user\", \"content\": \"What is the weather like in San Francisco?\"}]\n}'\n```\n\nLANGUAGE: Python\nCODE:\n```\n\n```\n\nLANGUAGE: Java\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Provide Tool Result to Claude (Single Tool)\nDESCRIPTION: After executing the tool identified by Claude, send a follow-up message back to Claude containing the tool_result. This allows Claude to continue the conversation with the tool's output.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --header \"content-type: application/json\" \\\n     --data \\\n'{\n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"tools\": [\n        {\n            \"name\": \"get_weather\",\n            \"description\": \"Get the current weather in a given location\",\n            \"input_schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"location\": {\n                        \"type\": \"string\",\n                        \"description\": \"The city and state, e.g. San Francisco, CA\"\n                    },\n                    \"unit\": {\n                        \"type\": \"string\",\n                        \"enum\": [\"celsius\", \"fahrenheit\"],\n                        \"description\": \"The unit of temperature, either \\\"celsius\\\" or \\\"fahrenheit\\\"\"\n                    }\n                },\n                \"required\": [\"location\"]\n            }\n        }\n    ],\n    \"messages\": [\n        {\n            \"role\": \"user\",\n            \"content\": \"What is the weather like in San Francisco?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": \"<thinking>I need to use get_weather, and the user wants SF, which is likely San Francisco, CA.</thinking>\"\n                },\n                {\n                    \"type\": \"tool_use\",\n                    \"id\": \"toolu_01A09q90qw90lq917835lq9\",\n                    \"name\": \"get_weather\",\n                    \"input\": {\n                        \"location\": \"San Francisco, CA\",\n                        \"unit\": \"celsius\"\n                    }\n                }\n            ]\n        },\n        {\n            \"role\": \"user\",\n            \"content\": [\n                {\n                    \"type\": \"tool_result\",\n                    \"tool_use_id\": \"toolu_01A09q90qw90lq917835lq9\",\n                    \"content\": \"15 degrees\"\n                }\n            ]\n        }\n    ]\n}'\n```\n\nLANGUAGE: Python\nCODE:\n```\n\n```\n\nLANGUAGE: Java\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: cURL Request to List Anthropic Models\nDESCRIPTION: Example cURL command to retrieve a list of available models from the Anthropic API. It includes necessary headers for authentication using an API key and specifying the API version.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/models-list\n\nLANGUAGE: cURL\nCODE:\n```\ncurl https://api.anthropic.com/v1/models \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\"\n```\n\n----------------------------------------\n\nTITLE: Claude Proposes Syntax Error Fix using str_replace Tool\nDESCRIPTION: This JSON snippet demonstrates Claude's response after identifying the syntax error. It uses the `str_replace_based_edit_tool` with the `str_replace` command to specify the exact string to be replaced (`old_str`) and its corrected version (`new_str`) in the `primes.py` file.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool\n\nLANGUAGE: APIDOC\nCODE:\n```\n{\n  \"id\": \"msg_01VwXyZAbCdEfGhIjKlMnO\",\n  \"model\": \"claude-opus-4-20250514\",\n  \"stop_reason\": \"tool_use\",\n  \"role\": \"assistant\",\n  \"content\": [\n    {\n      \"type\": \"text\",\n      \"text\": \"I found the syntax error in your primes.py file. In the `get_primes` function, there is a missing colon (:) at the end of the for loop line. Let me fix that for you.\"\n    },\n    {\n      \"type\": \"tool_use\",\n      \"id\": \"toolu_01PqRsTuVwXyZAbCdEfGh\",\n      \"name\": \"str_replace_based_edit_tool\",\n      \"input\": {\n        \"command\": \"str_replace\",\n        \"path\": \"primes.py\",\n        \"old_str\": \"    for num in range(2, limit + 1)\",\n        \"new_str\": \"    for num in range(2, limit + 1):\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Handle Claude Computer Actions with Python\nDESCRIPTION: Defines a Python function to dispatch various computer actions requested by Claude, such as screenshot capture, mouse clicks, and text typing, based on the action type and provided parameters.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: Python\nCODE:\n```\ndef handle_computer_action(action_type, params):\n    if action_type == \"screenshot\":\n        return capture_screenshot()\n    elif action_type == \"left_click\":\n        x, y = params[\"coordinate\"]\n        return click_at(x, y)\n    elif action_type == \"type\":\n        return type_text(params[\"text\"])\n    # ... handle other actions\n```\n\n----------------------------------------\n\nTITLE: API Reference: tools.type\nDESCRIPTION: Defines the type of the tool, with 'custom' as an available option.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages\n\nLANGUAGE: APIDOC\nCODE:\n```\ntools.type:\n  Type: enum<string> | null\n  Available options: custom\n```\n\n----------------------------------------\n\nTITLE: Anthropic Claude Tool Definitions (APIDOC)\nDESCRIPTION: This section documents the structure for defining tools that can be used with Anthropic's Claude API. It includes examples of `get_weather`, `get_time`, and `get_location` tools, detailing their names, descriptions, and input schemas with parameter types, descriptions, and required fields.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: APIDOC\nCODE:\n```\nTool: get_weather\n  Description: Get the current weather in a given location\n  Input Schema:\n    type: object\n    properties:\n      location:\n        type: string\n        description: The city and state, e.g. San Francisco, CA\n      unit:\n        type: string\n        enum: [\"celsius\", \"fahrenheit\"]\n        description: The unit of temperature, either 'celsius' or 'fahrenheit'\n    required: [\"location\"]\n\nTool: get_time\n  Description: Get the current time in a given time zone\n  Input Schema:\n    type: object\n    properties:\n      timezone:\n        type: string\n        description: The IANA time zone name, e.g. America/Los_Angeles\n    required: [\"timezone\"]\n\nTool: get_location\n  Description: Get the current user location based on their IP address. This tool has no parameters or arguments.\n  Input Schema:\n    type: object\n    properties: {}\n```\n\n----------------------------------------\n\nTITLE: Force Claude to use a specific tool with tool_choice\nDESCRIPTION: This snippet shows how to explicitly instruct Claude to use a particular tool by setting the `tool_choice` parameter. This is useful when you want to ensure a specific tool is invoked regardless of Claude's internal reasoning.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: Python\nCODE:\n```\ntool_choice = {\"type\": \"tool\", \"name\": \"get_weather\"}\n```\n\n----------------------------------------\n\nTITLE: Define Multiple Tools for Claude API Call (Shell/JSON)\nDESCRIPTION: This snippet shows an example of defining two independent tools, `get_weather` and `get_time`, within a single Anthropic Claude API request. It illustrates how Claude can use these tools, potentially in parallel or sequentially, to answer a user's query that requires information from both.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --header \"content-type: application/json\" \\\n     --data \\\n'{\n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"tools\": [{\n        \"name\": \"get_weather\",\n        \"description\": \"Get the current weather in a given location\",\n        \"input_schema\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"location\": {\n                    \"type\": \"string\",\n                    \"description\": \"The city and state, e.g. San Francisco, CA\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"enum\": [\"celsius\", \"fahrenheit\"],\n                    \"description\": \"The unit of temperature, either 'celsius' or 'fahrenheit'\"\n                }\n            },\n            \"required\": [\"location\"]\n        }\n    },\n    {\n        \"name\": \"get_time\",\n        \"description\": \"Get the current time in a given time zone\",\n        \"input_schema\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"timezone\": {\n                    \"type\": \"string\",\n                    \"description\": \"The IANA time zone name, e.g. America/Los_Angeles\"\n                }\n            },\n            \"required\": [\"timezone\"]\n        }\n    }],\n    \"messages\": [{\n        \"role\": \"user\",\n        \"content\": \"What is the weather like right now in New York? Also what time is it there?\"\n    }]\n}'\n```\n\n----------------------------------------\n\nTITLE: API Parameter: Tool Definitions\nDESCRIPTION: Defines tools the model may use. Includes `name`, `description`, and `input_schema`. Model may return `tool_use` blocks, which can be run and results returned via `tool_result` blocks. Supports client and server tools.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages\n\nLANGUAGE: APIDOC\nCODE:\n```\ntools\n\nobject[]\n\nDefinitions of tools that the model may use.\n\nIf you include `tools` in your API request, the model may return `tool_use` content blocks that represent the model's use of those tools. You can then run those tools using the tool input generated by the model and then optionally return results back to the model using `tool_result` content blocks.\n\nThere are two types of tools: **client tools** and **server tools**. The behavior described below applies to client tools. For [server tools](https://docs.anthropic.com/en/docs/agents-and-tools/tool-use/overview#server-tools), see their individual documentation as each has its own behavior (e.g., the [web search tool](https://docs.anthropic.com/en/docs/agents-and-tools/tool-use/web-search-tool)).\n\nEach tool definition includes:\n\n* `name`: Name of the tool.\n* `description`: Optional, but strongly-recommended description of the tool.\n* `input_schema`: [JSON schema](https://json-schema.org/draft/2020-12) for the tool `input` shape that the model will produce in `tool_use` output content blocks.\n```\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  {\n    \"name\": \"get_stock_price\",\n    \"description\": \"Get the current stock price for a given ticker symbol.\",\n    \"input_schema\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"ticker\": {\n          \"type\": \"string\",\n          \"description\": \"The stock ticker symbol, e.g. AAPL for Apple Inc.\"\n        }\n      },\n      \"required\": [\"ticker\"]\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: cURL Example to List Anthropic Models\nDESCRIPTION: Demonstrates how to make a cURL request to the Anthropic API to list available models, including required headers for authentication and API version.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/models-list\n\nLANGUAGE: cURL\nCODE:\n```\ncurl https://api.anthropic.com/v1/models \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\"\n```\n\n----------------------------------------\n\nTITLE: Handle Multiple Matches for Text Replacement in Claude Tool Result\nDESCRIPTION: If Claude's `str_replace` command finds multiple occurrences of the target text, return this JSON structure. The error message guides Claude to provide more context for a unique match.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"role\": \"user\",\n  \"content\": [\n    {\n      \"type\": \"tool_result\",\n      \"tool_use_id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"content\": \"Error: Found 3 matches for replacement text. Please provide more context to make a unique match.\",\n      \"is_error\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Anthropic Claude Computer Use Tool: Available Actions\nDESCRIPTION: Lists all supported actions for the Anthropic Claude computer use tool, categorized into basic and enhanced versions, detailing their purpose.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: APIDOC\nCODE:\n```\nActions:\n  Basic actions (all versions):\n    screenshot: Capture the current display\n    left_click: Click at coordinates [x, y]\n    type: Type text string\n    key: Press key or key combination (e.g., “ctrl+s”)\n    mouse_move: Move cursor to coordinates\n  Enhanced actions (computer_20250124):\n    scroll: Scroll in any direction with amount control\n    left_click_drag: Click and drag between coordinates\n    right_click: Additional mouse button\n    middle_click: Additional mouse button\n    double_click: Multiple clicks\n    triple_click: Multiple clicks\n    left_mouse_down: Fine-grained click control\n    left_mouse_up: Fine-grained click control\n    hold_key: Hold a key while performing other actions\n    wait: Pause between actions\n```\n\n----------------------------------------\n\nTITLE: Anthropic Claude API: Tool Role Message Fields\nDESCRIPTION: Details the fields available for messages with the 'tool' role in the Anthropic Claude API. This includes content variations (string, array with text type), tool_call_id, tool_choice, and name fields.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/openai-sdk\n\nLANGUAGE: APIDOC\nCODE:\n```\n| Field         | Variant                  | Support status |\n| ------------- | ------------------------ | -------------- |\n| `content`     | `string`                 | Fully supported|\n| `content`     | `array`, `type == \"text\"` | Fully supported|\n| `tool_call_id`| N/A                      | Fully supported|\n| `tool_choice` | N/A                      | Fully supported|\n| `name`        | N/A                      | Ignored        |\n```\n\n----------------------------------------\n\nTITLE: Send Message with Multiple Cache Breakpoints and Tools (cURL)\nDESCRIPTION: This example illustrates how to combine prompt caching with tool definitions and system messages in a single API call. It shows how to define multiple tools with their input schemas and how to apply `cache_control` to both tools and system messages, enabling more granular control over caching behavior for complex interactions.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/prompt-caching\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --header \"content-type: application/json\" \\\n     --data \\\n'{ \n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"tools\": [\n        {\n            \"name\": \"search_documents\",\n            \"description\": \"Search through the knowledge base\",\n            \"input_schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"query\": {\n                        \"type\": \"string\",\n                        \"description\": \"Search query\"\n                    }\n                },\n                \"required\": [\"query\"]\n            }\n        },\n        {\n            \"name\": \"get_document\",\n            \"description\": \"Retrieve a specific document by ID\",\n            \"input_schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"doc_id\": {\n                        \"type\": \"string\",\n                        \"description\": \"Document ID\"\n                    }\n                },\n                \"required\": [\"doc_id\"]\n            },\n            \"cache_control\": {\"type\": \"ephemeral\"}\n        }\n    ],\n    \"system\": [\n        {\n            \"type\": \"text\",\n            \"text\": \"You are a helpful research assistant with access to a document knowledge base.\\n\\n# Instructions\\n- Always search for relevant documents before answering\\n- Provide citations for your sources\\n- Be objective and accurate in your responses\\n- If multiple documents contain relevant information, synthesize them\\n- Acknowledge when information is not available in the knowledge base\",\n            \"cache_control\": {\"type\": \"ephemeral\"}\n        },\n        {\n            \"type\": \"text\",\n```\n\n----------------------------------------\n\nTITLE: Sending Client Tool Result with Images to Claude\nDESCRIPTION: This JSON example shows how to return a `tool_result` to Claude that includes both text and image content. The `content` field is an array of content blocks, allowing for rich media results from client-side tools, with images encoded in base64.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"role\": \"user\",\n  \"content\": [\n    {\n      \"type\": \"tool_result\",\n      \"tool_use_id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"content\": [\n        {\"type\": \"text\", \"text\": \"15 degrees\"},\n        {\n          \"type\": \"image\",\n          \"source\": {\n            \"type\": \"base64\",\n            \"media_type\": \"image/jpeg\",\n            \"data\": \"/9j/4AAQSkZJRg...\"\n          }\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Successful Client Tool Result to Claude\nDESCRIPTION: This JSON example demonstrates how to send a successful `tool_result` message back to Claude after a client-side tool has been executed. It includes the `tool_use_id` to link to the original request and the tool's output as a simple string `content`.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"role\": \"user\",\n  \"content\": [\n    {\n      \"type\": \"tool_result\",\n      \"tool_use_id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"content\": \"15 degrees\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Python Implementation of Claude Multi-Agent Loop\nDESCRIPTION: This Python function `sampling_loop` demonstrates a simplified agent loop for Claude's computer use interactions. It manages the communication flow: sending user messages to Claude, handling Claude's tool requests, executing those tools, and returning results. It includes safeguards like an iteration limit to prevent infinite loops and manages API calls to Anthropic.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: Python\nCODE:\n```\nasync def sampling_loop(\n    *,\n    model: str,\n    messages: list[dict],\n    api_key: str,\n    max_tokens: int = 4096,\n    tool_version: str,\n    thinking_budget: int | None = None,\n    max_iterations: int = 10,  # Add iteration limit to prevent infinite loops\n):\n    \"\"\"\n    A simple agent loop for Claude computer use interactions.\n\n    This function handles the back-and-forth between:\n    1. Sending user messages to Claude\n    2. Claude requesting to use tools\n    3. Your app executing those tools\n    4. Sending tool results back to Claude\n    \"\"\"\n    # Set up tools and API parameters\n    client = Anthropic(api_key=api_key)\n    beta_flag = \"computer-use-2025-01-24\" if \"20250124\" in tool_version else \"computer-use-2024-10-22\"\n\n    # Configure tools - you should already have these initialized elsewhere\n    tools = [\n        {\"type\": f\"computer_{tool_version}\", \"name\": \"computer\", \"display_width_px\": 1024, \"display_height_px\": 768},\n        {\"type\": f\"text_editor_{tool_version}\", \"name\": \"str_replace_editor\"},\n        {\"type\": f\"bash_{tool_version}\", \"name\": \"bash\"}\n    ]\n\n    # Main agent loop (with iteration limit to prevent runaway API costs)\n    iterations = 0\n    while True and iterations < max_iterations:\n        iterations += 1\n        # Set up optional thinking parameter (for Claude Sonnet 3.7)\n        thinking = None\n        if thinking_budget:\n            thinking = {\"type\": \"enabled\", \"budget_tokens\": thinking_budget}\n\n        # Call the Claude API\n        response = client.beta.messages.create(\n            model=model,\n            max_tokens=max_tokens,\n            messages=messages,\n            tools=tools,\n            betas=[beta_flag],\n            thinking=thinking\n        )\n\n        # Add Claude's response to the conversation history\n        response_content = response.content\n        messages.append({\"role\": \"assistant\", \"content\": response_content})\n\n        # Check if Claude used any tools\n        tool_results = []\n        for block in response_content:\n            if block.type == \"tool_use\":\n                # In a real app, you would execute the tool here\n                # For example: result = run_tool(block.name, block.input)\n                result = {\"result\": \"Tool executed successfully\"}\n\n                # Format the result for Claude\n                tool_results.append({\n                    \"type\": \"tool_result\",\n                    \"tool_use_id\": block.id,\n                    \"content\": result\n                })\n\n        # If no tools were used, Claude is done - return the final messages\n        if not tool_results:\n            return messages\n\n        # Add tool results to messages for the next iteration with Claude\n        messages.append({\"role\": \"user\", \"content\": tool_results})\n\n```\n\n----------------------------------------\n\nTITLE: Define a simple weather tool using JSON Schema for Claude API\nDESCRIPTION: This JSON schema defines a `get_weather` tool for use with Anthropic's Claude API. It specifies the tool's name, a detailed description of its functionality, and an input schema requiring a `location` string and an optional `unit` string, which must be either 'celsius' or 'fahrenheit'.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"get_weather\",\n  \"description\": \"Get the current weather in a given location\",\n  \"input_schema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"location\": {\n        \"type\": \"string\",\n        \"description\": \"The city and state, e.g. San Francisco, CA\"\n      },\n      \"unit\": {\n        \"type\": \"string\",\n        \"enum\": [\"celsius\", \"fahrenheit\"],\n        \"description\": \"The unit of temperature, either 'celsius' or 'fahrenheit'\"\n      }\n    },\n    \"required\": [\"location\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Application returns file content to Claude\nDESCRIPTION: This snippet demonstrates how the application responds to Claude's `view` command by providing the content of `primes.py` as a `tool_result` within the messages array, continuing the conversation flow.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n  -H \"content-type: application/json\" \\\n  -H \"x-api-key: $ANTHROPIC_API_KEY\" \\\n  -H \"anthropic-version: 2023-06-01\" \\\n  -d '{\n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"tools\": [\n      {\n        \"type\": \"text_editor_20250429\",\n        \"name\": \"str_replace_based_edit_tool\"\n      }\n    ],\n    \"messages\": [\n      {\n        \"role\": \"user\",\n        \"content\": \"There'\\''s a syntax error in my primes.py file. Can you help me fix it?\"\n      },\n      {\n            \"role\": \"assistant\",\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": \"I'\\''ll help you fix the syntax error in your primes.py file. First, let me take a look at the file to identify the issue.\"\n                },\n                {\n                    \"type\": \"tool_use\",\n                    \"id\": \"toolu_01AbCdEfGhIjKlMnOpQrStU\",\n                    \"name\": \"str_replace_based_edit_tool\",\n                    \"input\": {\n                        \"command\": \"view\",\n                        \"path\": \"primes.py\"\n                    }\n                }\n            ]\n        },\n        {\n            \"role\": \"user\",\n            \"content\": [\n                {\n                    \"type\": \"tool_result\",\n                    \"tool_use_id\": \"toolu_01AbCdEfGhIjKlMnOpQrStU\",\n                    \"content\": \"1: def is_prime(n):\\n2:     \\\"\\\"\\\"Check if a number is prime.\\\"\\\"\\\"\\n3:     if n <= 1:\\n4:         return False\\n5:     if n <= 3:\\n6:         return True\\n7:     if n % 2 == 0 or n % 3 == 0:\\n8:         return False\\n9:     i = 5\\n10:     while i * i <= n:\\n11:         if n % i == 0 or n % (i + 2) == 0:\\n12:             return False\\n13:         i += 6\\n14:     return True\\n15: \\n16: def get_primes(limit):\\n17:     \\\"\\\"\\\"Generate a list of prime numbers up to the given limit.\\\"\\\"\\\"\\n18:     primes = []\\n19:     for num in range(2, limit + 1)\\n20:         if is_prime(num):\\n21:             primes.append(num)\\n22:     return primes\\n23: \\n24: def main():\\n25:     \\\"\\\"\\\"Main function to demonstrate prime number generation.\\\"\\\"\\\"\\n26:     limit = 100\\n27:     prime_list = get_primes(limit)\\n28:     print(f\\\"Prime numbers up to {limit}:\\\")\\n29:     print(prime_list)\\n30:     print(f\\\"Found {len(prime_list)} prime numbers.\\\")\\n31: \\n32: if __name__ == \\\"__main__\\\":\\n33:     main()\"\n                }\n            ]\n        }\n    ]\n  }'\n```\n\nLANGUAGE: Python\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n  -H \"content-type: application/json\" \\\n  -H \"x-api-key: $ANTHROPIC_API_KEY\" \\\n  -H \"anthropic-version: 2023-06-01\" \\\n  -d '{\n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"tools\": [\n      {\n        \"type\": \"text_editor_20250429\",\n        \"name\": \"str_replace_based_edit_tool\"\n      }\n    ],\n    \"messages\": [\n      {\n        \"role\": \"user\",\n        \"content\": \"There'\\''s a syntax error in my primes.py file. Can you help me fix it?\"\n      },\n      {\n            \"role\": \"assistant\",\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": \"I'\\''ll help you fix the syntax error in your primes.py file. First, let me take a look at the file to identify the issue.\"\n                },\n                {\n                    \"type\": \"tool_use\",\n                    \"id\": \"toolu_01AbCdEfGhIjKlMnOpQrStU\",\n                    \"name\": \"str_replace_based_edit_tool\",\n                    \"input\": {\n                        \"command\": \"view\",\n                        \"path\": \"primes.py\"\n                    }\n                }\n            ]\n        },\n        {\n            \"role\": \"user\",\n            \"content\": [\n                {\n                    \"type\": \"tool_result\",\n                    \"tool_use_id\": \"toolu_01AbCdEfGhIjKlMnOpQrStU\",\n                    \"content\": \"1: def is_prime(n):\\n2:     \\\"\\\"\\\"Check if a number is prime.\\\"\\\"\\\"\\n3:     if n <= 1:\\n4:         return False\\n5:     if n <= 3:\\n6:         return True\\n7:     if n % 2 == 0 or n % 3 == 0:\\n8:         return False\\n9:     i = 5\\n10:     while i * i <= n:\\n11:         if n % i == 0 or n % (i + 2) == 0:\\n12:             return False\\n13:         i += 6\\n14:     return True\\n15: \\n16: def get_primes(limit):\\n17:     \\\"\\\"\\\"Generate a list of prime numbers up to the given limit.\\\"\\\"\\\"\\n18:     primes = []\\n19:     for num in range(2, limit + 1)\\n20:         if is_prime(num):\\n21:             primes.append(num)\\n22:     return primes\\n23: \\n24: def main():\\n25:     \\\"\\\"\\\"Main function to demonstrate prime number generation.\\\"\\\"\\\"\\n26:     limit = 100\\n27:     prime_list = get_primes(limit)\\n28:     print(f\\\"Prime numbers up to {limit}:\\\")\\n29:     print(prime_list)\\n30:     print(f\\\"Found {len(prime_list)} prime numbers.\\\")\\n31: \\n32: if __name__ == \\\"__main__\\\":\\n33:     main()\"\n                }\n            ]\n        }\n    ]\n  }'\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n  -H \"content-type: application/json\" \\\n  -H \"x-api-key: $ANTHROPIC_API_KEY\" \\\n  -H \"anthropic-version: 2023-06-01\" \\\n  -d '{\n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"tools\": [\n      {\n        \"type\": \"text_editor_20250429\",\n        \"name\": \"str_replace_based_edit_tool\"\n      }\n    ],\n    \"messages\": [\n      {\n        \"role\": \"user\",\n        \"content\": \"There'\\''s a syntax error in my primes.py file. Can you help me fix it?\"\n      },\n      {\n            \"role\": \"assistant\",\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": \"I'\\''ll help you fix the syntax error in your primes.py file. First, let me take a look at the file to identify the issue.\"\n                },\n                {\n                    \"type\": \"tool_use\",\n                    \"id\": \"toolu_01AbCdEfGhIjKlMnOpQrStU\",\n                    \"name\": \"str_replace_based_edit_tool\",\n                    \"input\": {\n                        \"command\": \"view\",\n                        \"path\": \"primes.py\"\n                    }\n                }\n            ]\n        },\n        {\n            \"role\": \"user\",\n            \"content\": [\n                {\n                    \"type\": \"tool_result\",\n                    \"tool_use_id\": \"toolu_01AbCdEfGhIjKlMnOpQrStU\",\n                    \"content\": \"1: def is_prime(n):\\n2:     \\\"\\\"\\\"Check if a number is prime.\\\"\\\"\\\"\\n3:     if n <=\n```\n\n----------------------------------------\n\nTITLE: Process Claude's Tool Calls in Python\nDESCRIPTION: Illustrates how to iterate through Claude's response content to identify and execute 'tool_use' actions, then format and return the results back to Claude as 'tool_result' messages.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: Python\nCODE:\n```\nfor content in response.content:\n    if content.type == \"tool_use\":\n        action = content.input[\"action\"]\n        result = handle_computer_action(action, content.input)\n\n        # Return result to Claude\n        tool_result = {\n            \"type\": \"tool_result\",\n            \"tool_use_id\": content.id,\n            \"content\": result\n        }\n```\n\n----------------------------------------\n\nTITLE: Claude API Call to Apply String Replacement Fix\nDESCRIPTION: Shows how to make an API call to Claude to apply a string replacement fix using the `text_editor_20250429` tool. It includes the assistant's initial message, the `tool_use` block with the `str_replace` command, and the subsequent `tool_result` from the user, demonstrating a complete interaction for a code fix.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool\n\nLANGUAGE: Python\nCODE:\n```\nresponse = client.messages.create(\n    model=\"claude-opus-4-20250514\",\n    max_tokens=1024,\n    tools=[\n        {\n            \"type\": \"text_editor_20250429\",\n            \"name\": \"str_replace_based_edit_tool\"\n        }\n    ],\n    messages=[\n        # Previous messages...\n        {\n            \"role\": \"assistant\",\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": \"I found the syntax error in your primes.py file. In the `get_primes` function, there is a missing colon (:) at the end of the for loop line. Let me fix that for you.\"\n                },\n                {\n                    \"type\": \"tool_use\",\n                    \"id\": \"toolu_01PqRsTuVwXyZAbCdEfGh\",\n                    \"name\": \"str_replace_based_edit_tool\",\n                    \"input\": {\n                        \"command\": \"str_replace\",\n                        \"path\": \"primes.py\",\n                        \"old_str\": \"    for num in range(2, limit + 1)\",\n                        \"new_str\": \"    for num in range(2, limit + 1):\"\n                    }\n                }\n            ]\n        },\n        {\n            \"role\": \"user\",\n            \"content\": [\n                {\n                    \"type\": \"tool_result\",\n                    \"tool_use_id\": \"toolu_01PqRsTuVwXyZAbCdEfGh\",\n                    \"content\": \"Successfully replaced text at exactly one location.\"\n                }\n            ]\n        }\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Report Client Tool Execution Errors to Claude\nDESCRIPTION: When a client-side tool encounters an error during execution (e.g., a network error), return a `tool_result` content block. Include the error message in the `content` field and set `\"is_error\": true`. This allows Claude to incorporate the error into its response to the user.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"role\": \"user\",\n  \"content\": [\n    {\n      \"type\": \"tool_result\",\n      \"tool_use_id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"content\": \"ConnectionError: the weather service API is not available (HTTP 500)\",\n      \"is_error\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Force Claude to Use a Specific Tool (Python)\nDESCRIPTION: This Python snippet illustrates how to use the `tool_choice` parameter in an API request to explicitly force Claude to use a particular tool by its name. It sets the `type` to 'tool' and specifies the `name` of the desired tool.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude_api_primer\n\nLANGUAGE: python\nCODE:\n```\ntool_choice = {\"type\": \"tool\", \"name\": \"get_weather\"}\n```\n\n----------------------------------------\n\nTITLE: Sending Empty Client Tool Result to Claude\nDESCRIPTION: This JSON example illustrates how to send a `tool_result` message to Claude when a client-side tool execution yields no explicit content. It still requires the `tool_use_id` to identify the original tool request.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"role\": \"user\",\n  \"content\": [\n    {\n      \"type\": \"tool_result\",\n      \"tool_use_id\": \"toolu_01A09q90qw90lq917835lq9\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Automating Tool Use Workflows with Anthropic Claude API\nDESCRIPTION: This Python function demonstrates a robust pattern for integrating tool use with the Anthropic Claude API. It iteratively calls the API, detects when a tool needs to be used via the `tool_use` stop reason, executes the tool, and then feeds the results back into the conversation to continue the workflow until a final response is generated.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/handling-stop-reasons\n\nLANGUAGE: Python\nCODE:\n```\ndef complete_tool_workflow(client, user_query, tools):\n    messages = [{\"role\": \"user\", \"content\": user_query}]\n\n    while True:\n        response = client.messages.create(\n            model=\"claude-sonnet-4-20250514\",\n            messages=messages,\n            tools=tools\n        )\n\n        if response.stop_reason == \"tool_use\":\n            # Execute tools and continue\n            tool_results = execute_tools(response.content)\n            messages.append({\"role\": \"assistant\", \"content\": response.content})\n            messages.append({\"role\": \"user\", \"content\": tool_results})\n        else:\n            # Final response\n            return response\n```\n\n----------------------------------------\n\nTITLE: API Reference: tools.description\nDESCRIPTION: Provides a detailed description of what the tool does, which helps the model understand and use the tool effectively.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages\n\nLANGUAGE: APIDOC\nCODE:\n```\ntools.description:\n  Type: string\n  Description: Description of what this tool does. Tool descriptions should be as detailed as possible. The more information that the model has about what the tool is and how to use it, the better it will perform. You can use natural language descriptions to reinforce important aspects of the tool input JSON schema.\n  Examples: \"Get the current weather in a given location\"\n```\n\n----------------------------------------\n\nTITLE: Claude Tool Use Mechanism and Integration Steps\nDESCRIPTION: Detailed explanation of how tool use works with Claude, covering client and server tool types, and the four-step process for integrating and executing client tools.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: APIDOC\nCODE:\n```\nHow tool use works:\n  Claude supports two types of tools:\n    1. Client tools: Execute on your systems.\n       - User-defined custom tools.\n       - Anthropic-defined tools (e.g., computer use, text editor) requiring client implementation.\n    2. Server tools: Execute on Anthropic’s servers (e.g., web search tool).\n       - Specified in API request, no client implementation needed.\n  Anthropic-defined tools use versioned types (e.g., web_search_20250305).\n\n  Client tools integration steps:\n    1. Provide Claude with tools and a user prompt:\n       - Define client tools (name, description, input schemas) in API request.\n       - Include user prompt.\n    2. Claude decides to use a tool:\n       - Claude assesses if tools can help.\n       - Constructs a tool use request.\n       - API response has `stop_reason` of `tool_use` for client tools.\n    3. Execute the tool and return results:\n       - Extract tool name and input from Claude’s request.\n       - Execute tool code on your system.\n       - Return results in a new `user` message with a `tool_result` content block.\n    4. Claude uses tool result to formulate a response:\n       - Claude analyzes tool results to craft final response.\n  Note: Steps 3 and 4 are optional; tool use request (step 2) might be sufficient.\n```\n\n----------------------------------------\n\nTITLE: Process Tool Use Requests from Claude\nDESCRIPTION: This example demonstrates how to handle the `tool_use` stop reason, which indicates that Claude is requesting the execution of a defined tool. The application should parse the tool details, execute the specified tool, and then return the result to Claude for continued response generation.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/handling-stop-reasons\n\nLANGUAGE: Python\nCODE:\n```\nresponse = client.messages.create(\n    model=\"claude-sonnet-4-20250514\",\n    max_tokens=1024,\n    tools=[weather_tool],\n    messages=[{\"role\": \"user\", \"content\": \"What's the weather?\"}]\n)\n\nif response.stop_reason == \"tool_use\":\n    # Extract and execute the tool\n    for content in response.content:\n        if content.type == \"tool_use\":\n            result = execute_tool(content.name, content.input)\n            # Return result to Claude for final response\n\n```\n\n----------------------------------------\n\nTITLE: Handle Screenshot Capture Failure for Claude Tool\nDESCRIPTION: Example JSON structure for returning an error message to Claude when a screenshot capture operation fails, indicating the issue and setting the 'is_error' flag.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"role\": \"user\",\n  \"content\": [\n    {\n      \"type\": \"tool_result\",\n      \"tool_use_id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"content\": \"Error: Failed to capture screenshot. Display may be locked or unavailable.\",\n      \"is_error\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing the Claude API tool use system prompt template\nDESCRIPTION: This template illustrates how Anthropic constructs the system prompt when the `tools` parameter is used in an API request. It combines formatting instructions, JSON Schema tool definitions, any user-specified system prompt, and tool configuration to provide the necessary context for the model to operate properly.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: APIDOC\nCODE:\n```\nIn this environment you have access to a set of tools you can use to answer the user's question.\n{{ FORMATTING INSTRUCTIONS }}\nString and scalar parameters should be specified as is, while lists and objects should use JSON format. Note that spaces for string values are not stripped. The output is not expected to be valid XML and is parsed with regular expressions.\nHere are the functions available in JSONSchema format:\n{{ TOOL DEFINITIONS IN JSON SCHEMA }}\n{{ USER SYSTEM PROMPT }}\n{{ TOOL CONFIGURATION }}\n```\n\n----------------------------------------\n\nTITLE: Python Code to Process Claude's Tool Use Responses\nDESCRIPTION: This Python snippet illustrates how to iterate through Claude's response content, identify tool use calls, execute the corresponding tool function, and return the results back to Claude using a `tool_result` message.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool\n\nLANGUAGE: python\nCODE:\n```\n# Process tool use in Claude's response\nfor content in response.content:\n    if content.type == \"tool_use\":\n        # Execute the tool based on command\n        result = handle_editor_tool(content)\n\n        # Return result to Claude\n        tool_result = {\n            \"type\": \"tool_result\",\n            \"tool_use_id\": content.id,\n            \"content\": result\n        }\n```\n\n----------------------------------------\n\nTITLE: Streamed Input JSON Delta for Tool Use\nDESCRIPTION: Illustrates a `content_block_delta` event containing a `partial_json` string for `tool_use` input, which can be accumulated to form the complete tool input object.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/streaming\n\nLANGUAGE: HTTP Stream Event\nCODE:\n```\nevent: content_block_delta\ndata: {\"type\": \"content_block_delta\",\"index\": 1,\"delta\": {\"type\": \"input_json_delta\",\"partial_json\": \"{\\\"location\\\": \\\"San Fra\"}}}\n```\n\n----------------------------------------\n\nTITLE: API Parameter: Disable Parallel Tool Use\nDESCRIPTION: Boolean flag to disable parallel tool use. Defaults to `false`. If `true`, the model will output at most one tool use.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages\n\nLANGUAGE: APIDOC\nCODE:\n```\ntool_choice.disable_parallel_tool_use\n\nboolean\n\nWhether to disable parallel tool use.\n\nDefaults to `false`. If set to `true`, the model will output at most one tool use.\n```\n\n----------------------------------------\n\nTITLE: Effective Prompting Strategies for Claude\nDESCRIPTION: Provides key strategies and example prompt snippets to optimize Claude's performance and output quality for various tasks, including explicit instructions, handling UI elements, and secure credential handling.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: Prompt\nCODE:\n```\nAfter each step, take a screenshot and carefully evaluate if you have achieved the right outcome. Explicitly show your thinking: \"I have evaluated step X...\" If not correct, try again. Only when you confirm a step was executed correctly should you move on to the next one.\n```\n\nLANGUAGE: XML\nCODE:\n```\n<robot_credentials>...</robot_credentials>\n```\n\n----------------------------------------\n\nTITLE: Preserve Thinking Blocks in Multi-Turn Tool Use with Claude API\nDESCRIPTION: This example illustrates how to maintain conversational context when using extended thinking with tools over multiple turns. It shows how to extract `thinking` and `tool_use` blocks from an initial Claude response and then re-include them in the `messages` array of a subsequent API call, ensuring Claude retains its internal reasoning and tool interaction history.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude_api_primer\n\nLANGUAGE: python\nCODE:\n```\n# First request - Claude responds with thinking and tool request\nresponse = client.messages.create(\n    model=\"claude-sonnet-4-20250514\",\n    max_tokens=16000,\n    thinking={\n        \"type\": \"enabled\",\n        \"budget_tokens\": 10000\n    },\n    tools=[weather_tool],\n    messages=[\n        {\"role\": \"user\", \"content\": \"What's the weather in Paris?\"}\n    ]\n)\n\n# Extract thinking block and tool use block\nthinking_block = next((block for block in response.content\n                      if block.type == 'thinking'), None)\ntool_use_block = next((block for block in response.content\n                      if block.type == 'tool_use'), None)\n\n# Second request - Include thinking block and tool result\ncontinuation = client.messages.create(\n    model=\"claude-sonnet-4-20250514\",\n    max_tokens=16000,\n    thinking={\n        \"type\": \"enabled\",\n        \"budget_tokens\": 10000\n    },\n    tools=[weather_tool],\n    messages=[\n        {\"role\": \"user\", \"content\": \"What's the weather in Paris?\"},\n        # Notice that the thinking_block is passed in as well as the tool_use_block\n        {\"role\": \"assistant\", \"content\": [thinking_block, tool_use_block]},\n        {\"role\": \"user\", \"content\": [{\n            \"type\": \"tool_result\",\n            \"tool_use_id\": tool_use_block.id,\n            \"content\": f\"Current temperature: {weather_data['temperature']}°F\"\n        }]}\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Claude Model Tool Use Request Example\nDESCRIPTION: Demonstrates the JSON structure of a `tool_use` content block generated by the Claude model when it decides to use a tool, including the tool's ID, name, and input parameters.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"type\": \"tool_use\",\n    \"id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n    \"name\": \"get_stock_price\",\n    \"input\": { \"ticker\": \"^GSPC\" }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Anthropic Claude API: System Role Message Fields\nDESCRIPTION: Details the fields available for messages with the 'system' role in the Anthropic Claude API. System messages are hoisted to the beginning of the conversation as part of the initial system message.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/openai-sdk\n\nLANGUAGE: APIDOC\nCODE:\n```\n| Field   | Support status           |\n| ------- | ------------------------ |\n| `content` | Fully supported, but hoisted |\n| `name`    | Ignored                  |\n```\n\n----------------------------------------\n\nTITLE: API parameters for specifying client tools in Claude requests\nDESCRIPTION: This API documentation outlines the structure for defining client tools within the `tools` top-level parameter of the Anthropic API request. Each tool definition requires a `name`, a `description` of its purpose, and an `input_schema` conforming to JSON Schema to define expected parameters.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: APIDOC\nCODE:\n```\ntools (top-level parameter):\n  Each tool definition includes:\n    name: string (required)\n      Description: The name of the tool. Must match the regex `^[a-zA-Z0-9_-]{1,64}$`.\n    description: string (required)\n      Description: A detailed plaintext description of what the tool does, when it should be used, and how it behaves.\n    input_schema: object (required)\n      Description: A JSON Schema object defining the expected parameters for the tool.\n```\n\n----------------------------------------\n\nTITLE: Claude's Final JSON Response After Tool Result\nDESCRIPTION: Displays the final JSON response from Claude after it has processed the tool_result, incorporating the information into a natural language answer for the user.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"id\": \"msg_01Aq9w938a90dw8q\",\n  \"model\": \"claude-opus-4-20250514\",\n  \"stop_reason\": \"stop_sequence\",\n  \"role\": \"assistant\",\n  \"content\": [\n    {\n      \"type\": \"text\",\n      \"text\": \"The current weather in San Francisco is 15 degrees Celsius (59 degrees Fahrenheit). It's a cool day in the city by the bay!\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Anthropic API to Fix Syntax Error with Text Editor Tool (Python)\nDESCRIPTION: This Python snippet demonstrates how to initialize the Anthropic client and make a `messages.create` call, providing the `text_editor_20250124` tool to Claude Sonnet 3.7 for fixing a syntax error in a file.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool\n\nLANGUAGE: python\nCODE:\n```\nimport anthropic\n\nclient = anthropic.Anthropic()\n\nresponse = client.messages.create(\n    model=\"claude-3-7-sonnet-20250219\",\n    max_tokens=1024,\n    tools=[\n        {\n            \"type\": \"text_editor_20250124\",\n            \"name\": \"str_replace_editor\"\n        }\n    ],\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": \"There's a syntax error in my primes.py file. Can you help me fix it?\"\n        }\n    ]\n)\n\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: List available Anthropic Claude models via AWS CLI Bedrock\nDESCRIPTION: Use this AWS CLI command to retrieve a list of all Anthropic Claude models currently available through Amazon Bedrock in a specified AWS region. The command filters by provider and extracts only the model IDs for clarity.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/claude-on-amazon-bedrock\n\nLANGUAGE: Shell\nCODE:\n```\naws bedrock list-foundation-models --region=us-west-2 --by-provider anthropic --query \"modelSummaries[*].modelId\"\n```\n\n----------------------------------------\n\nTITLE: Claude's Chain of Thought and Parallel Tool Use Example (JSON)\nDESCRIPTION: This JSON response from Claude demonstrates its 'chain of thought' reasoning process, where it outlines the steps it plans to take to answer a query. It also includes a `tool_use` content block, showing how Claude initiates a tool call with a unique ID, tool name, and input parameters.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude_api_primer\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"role\": \"assistant\",\n  \"content\": [\n    {\n      \"type\": \"text\",\n      \"text\": \"<thinking>To answer this question, I will: 1. Use the get_weather tool to get the current weather in San Francisco. 2. Use the get_time tool to get the current time in the America/Los_Angeles timezone, which covers San Francisco, CA.</thinking>\"\n    },\n    {\n      \"type\": \"tool_use\",\n      \"id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"name\": \"get_weather\",\n      \"input\": {\"location\": \"San Francisco, CA\"}\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Define `get_weather` Tool with JSON Schema\nDESCRIPTION: This JSON snippet defines a `get_weather` tool, specifying its name, a brief description, and an `input_schema` using JSON Schema. The schema details the expected parameters (`location` and `unit`) for the tool, including their types, descriptions, and required fields.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude_api_primer\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"get_weather\",\n  \"description\": \"Get the current weather in a given location\",\n  \"input_schema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"location\": {\n        \"type\": \"string\",\n        \"description\": \"The city and state, e.g. San Francisco, CA\"\n      },\n      \"unit\": {\n        \"type\": \"string\",\n        \"enum\": [\"celsius\", \"fahrenheit\"],\n        \"description\": \"The unit of temperature, either 'celsius' or 'fahrenheit'\"\n      }\n    },\n    \"required\": [\"location\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrate Multiple Tools with Claude API for Advanced Automation\nDESCRIPTION: This example illustrates how to combine the `computer_use` tool with other specialized tools like `text_editor`, `bash`, and a custom `get_weather` API within a single Claude API request. It showcases how to define various tool types, their names, and their input schemas, enabling Claude to perform complex, multi-tool operations such as executing system commands, editing files, or interacting with custom services. The `thinking` parameter is also included to provide insight into Claude's reasoning during tool execution.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n  -H \"content-type: application/json\" \\\n  -H \"x-api-key: $ANTHROPIC_API_KEY\" \\\n  -H \"anthropic-version: 2023-06-01\" \\\n  -H \"anthropic-beta: computer-use-2025-01-24\" \\\n  -d '{\n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 2000,\n    \"tools\": [\n      {\n        \"type\": \"computer_20250124\",\n        \"name\": \"computer\",\n        \"display_width_px\": 1024,\n        \"display_height_px\": 768,\n        \"display_number\": 1\n      },\n      {\n        \"type\": \"text_editor_20250124\",\n        \"name\": \"str_replace_editor\"\n      },\n      {\n        \"type\": \"bash_20250124\",\n        \"name\": \"bash\"\n      },\n      {\n        \"name\": \"get_weather\",\n        \"description\": \"Get the current weather in a given location\",\n        \"input_schema\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"location\": {\n              \"type\": \"string\",\n              \"description\": \"The city and state, e.g. San Francisco, CA\"\n            },\n            \"unit\": {\n              \"type\": \"string\",\n              \"enum\": [\"celsius\", \"fahrenheit\"],\n              \"description\": \"The unit of temperature, either 'celsius' or 'fahrenheit'\"\n            }\n          },\n          \"required\": [\"location\"]\n        }\n      }\n    ],\n    \"messages\": [\n      {\n        \"role\": \"user\",\n        \"content\": \"Find flights from San Francisco to a place with warmer weather.\"\n      }\n    ],\n    \"thinking\": {\n      \"type\": \"enabled\",\n      \"budget_tokens\": 1024\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Send Multi-Turn Conversation with Prompt Caching (cURL)\nDESCRIPTION: This snippet demonstrates how to use prompt caching in a multi-turn conversation with the Claude API. It highlights the use of `cache_control` on the final message block of each turn and on the system message to enable incremental caching and ensure the system prompt is re-cached if evicted. This approach helps maintain context efficiently without re-processing previous turns.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/prompt-caching\n\nLANGUAGE: Shell\nCODE:\n```\n--header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --header \"content-type: application/json\" \\\n     --data \\\n'{ \n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"system\": [\n        {\n            \"type\": \"text\",\n            \"text\": \"...long system prompt\",\n            \"cache_control\": {\"type\": \"ephemeral\"}\n        }\n    ],\n    \"messages\": [\n        {\n            \"role\": \"user\",\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": \"Hello, can you tell me more about the solar system?\"\n                }\n            ]\n        },\n        {\n            \"role\": \"assistant\",\n            \"content\": \"Certainly! The solar system is the collection of celestial bodies that orbit our Sun. It consists of eight planets, numerous moons, asteroids, comets, and other objects. The planets, in order from closest to farthest from the Sun, are: Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, and Neptune. Each planet has its own unique characteristics and features. Is there a specific aspect of the solar system you would like to know more about?\"\n        },\n        {\n            \"role\": \"user\",\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": \"Good to know.\"\n                },\n                {\n                    \"type\": \"text\",\n                    \"text\": \"Tell me more about Mars.\",\n                    \"cache_control\": {\"type\": \"ephemeral\"}\n                }\n            ]\n        }\n    ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Send Tool Result Back to Claude (JSON)\nDESCRIPTION: This JSON snippet shows how to send the result of a tool execution back to Claude. It uses a `tool_result` content block, referencing the `tool_use_id` from Claude's previous request and providing the `content` (output) of the tool.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude_api_primer\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"role\": \"user\",\n  \"content\": [\n    {\n      \"type\": \"tool_result\",\n      \"tool_use_id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"content\": \"15 degrees\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling `pause_turn` Stop Reason for Server Tools\nDESCRIPTION: This code snippet illustrates the initial setup for handling the `pause_turn` stop reason, which indicates that the Anthropic API has paused a long-running turn, typically when server-side tools like web search are being used internally by Claude.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: Python\nCODE:\n```\nimport anthropic\n\nclient = anthropic.Anthropic()\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Initialize Claude Computer Use Tools with Python\nDESCRIPTION: This snippet demonstrates how to initialize the Anthropic client and create a message using the `beta.messages.create` method, enabling Claude's 'computer use' tools such as `computer`, `text_editor`, and `bash`. It specifies the model, maximum tokens, and includes a user message. The example also highlights the beta header requirements for different Claude models when using these tools.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: Python\nCODE:\n```\nimport anthropic\n\nclient = anthropic.Anthropic()\n\nresponse = client.beta.messages.create(\n    model=\"claude-sonnet-4-20250514\",  # or another compatible model\n    max_tokens=1024,\n    tools=[\n        {\n          \"type\": \"computer_20250124\",\n          \"name\": \"computer\",\n          \"display_width_px\": 1024,\n          \"display_height_px\": 768,\n          \"display_number\": 1,\n        },\n        {\n          \"type\": \"text_editor_20250124\",\n          \"name\": \"str_replace_editor\"\n        },\n        {\n          \"type\": \"bash_20250124\",\n          \"name\": \"bash\"\n        }\n    ],\n    messages=[{\"role\": \"user\", \"content\": \"Save a picture of a cat to my desktop.\"}\n],\n    betas=[\"computer-use-2025-01-24\"]\n)\nprint(response)\n\n```\n\n----------------------------------------\n\nTITLE: Initiate Claude Conversation with Text Editor Tool\nDESCRIPTION: Demonstrates how to start a conversation with Claude using a `curl` command, providing the `text_editor_20250429` tool and an initial user prompt to fix a syntax error in a file. This sets up the interaction for Claude to begin analyzing the code.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n  -H \"content-type: application/json\" \\\n  -H \"x-api-key: $ANTHROPIC_API_KEY\" \\\n  -H \"anthropic-version: 2023-06-01\" \\\n  -d '{\n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"tools\": [\n      {\n        \"type\": \"text_editor_20250429\",\n        \"name\": \"str_replace_based_edit_tool\"\n      }\n    ],\n    \"messages\": [\n      {\n        \"role\": \"user\",\n        \"content\": \"There'\\''s a syntax error in my primes.py file. Can you help me fix it?\"\n      }\n    ]\n  }'\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Listing Models\nDESCRIPTION: A sample JSON payload demonstrating the structure and typical values returned by the Anthropic API when successfully listing models. It shows an array of model objects and pagination metadata.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/models-list\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"created_at\": \"2025-02-19T00:00:00Z\",\n      \"display_name\": \"Claude 3.7 Sonnet\",\n      \"id\": \"claude-3-7-sonnet-20250219\",\n      \"type\": \"model\"\n    }\n  ],\n  \"first_id\": \"<string>\",\n  \"has_more\": true,\n  \"last_id\": \"<string>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Python Function to Handle Claude Text Editor Tool Calls\nDESCRIPTION: A Python helper function skeleton demonstrating how to process different commands from Claude's text editor tool calls, including viewing, replacing, creating, inserting, and undoing edits, with considerations for model version compatibility.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool\n\nLANGUAGE: python\nCODE:\n```\ndef handle_editor_tool(tool_call, model_version):\n    input_params = tool_call.input\n    command = input_params.get('command', '')\n    file_path = input_params.get('path', '')\n\n    if command == 'view':\n        # Read and return file contents\n        pass\n    elif command == 'str_replace':\n        # Replace text in file\n        pass\n    elif command == 'create':\n        # Create new file\n        pass\n    elif command == 'insert':\n        # Insert text at location\n        pass\n    elif command == 'undo_edit':\n        # Check if it's a Claude 4 model\n        if 'str_replace_based_edit_tool' in model_version:\n            return {\"error\": \"undo_edit command is not supported in Claude 4\"}\n        # Restore from backup for Claude 3.7/3.5\n        pass\n```\n\n----------------------------------------\n\nTITLE: API Parameter: System Prompt\nDESCRIPTION: Provides context and instructions to Claude, such as specifying a goal or role. This parameter accepts a string or an array of objects.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages\n\nLANGUAGE: APIDOC\nCODE:\n```\nsystem\n\nstringobject[]\n\nSystem prompt.\n\nA system prompt is a way of providing context and instructions to Claude, such as specifying a particular goal or role. See our [guide to system prompts](https://docs.anthropic.com/en/docs/system-prompts).\n```\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  {\n    \"text\": \"Today's date is 2024-06-01.\",\n    \"type\": \"text\"\n  }\n]\n```\n\nLANGUAGE: JSON\nCODE:\n```\n\"Today's date is 2023-01-01.\"\n```\n\n----------------------------------------\n\nTITLE: Perform Web Search with Claude and Handle pause_turn Continuations\nDESCRIPTION: This Python example demonstrates how to initiate a web search using the Anthropic Claude API's `web_search` tool. It also illustrates the critical pattern for handling `pause_turn` responses, where Claude pauses to request more information or user input. The code shows how to detect a `pause_turn` and then continue the conversation by passing the assistant's paused content back in a subsequent request, ensuring the tool state is preserved.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.messages.create(\n    model=\"claude-3-7-sonnet-latest\",\n    max_tokens=1024,\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": \"Search for comprehensive information about quantum computing breakthroughs in 2025\"\n        }\n    ],\n    tools=[{\n        \"type\": \"web_search_20250305\",\n        \"name\": \"web_search\",\n        \"max_uses\": 10\n    }]\n)\n\nif response.stop_reason == \"pause_turn\":\n    messages = [\n        {\"role\": \"user\", \"content\": \"Search for comprehensive information about quantum computing breakthroughs in 2025\"},\n        {\"role\": \"assistant\", \"content\": response.content}\n    ]\n\n    continuation = client.messages.create(\n        model=\"claude-3-7-sonnet-latest\",\n        max_tokens=1024,\n        messages=messages,\n        tools=[{\n            \"type\": \"web_search_20250305\",\n            \"name\": \"web_search\",\n            \"max_uses\": 10\n        }]\n    )\n\n    print(continuation)\nelse:\n    print(response)\n```\n\n----------------------------------------\n\nTITLE: Count tokens in messages with tools using Claude API\nDESCRIPTION: This snippet illustrates how to count tokens for messages that include tool definitions. It shows how to define a tool with its name, description, and input schema, and then include it in the token counting request.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/token-counting\n\nLANGUAGE: Python\nCODE:\n```\nimport anthropic\n\nclient = anthropic.Anthropic()\n\nresponse = client.messages.count_tokens(\n    model=\"claude-opus-4-20250514\",\n    tools=[\n        {\n            \"name\": \"get_weather\",\n            \"description\": \"Get the current weather in a given location\",\n            \"input_schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"location\": {\n                        \"type\": \"string\",\n                        \"description\": \"The city and state, e.g. San Francisco, CA\",\n                    }\n                },\n                \"required\": [\"location\"],\n            },\n        }\n    ],\n    messages=[{\"role\": \"user\", \"content\": \"What's the weather like in San Francisco?\"}]\n)\n\nprint(response.json())\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{ \"input_tokens\": 403 }\n```\n\n----------------------------------------\n\nTITLE: Anthropic Claude Computer Use Tool: Parameters\nDESCRIPTION: Defines the parameters required for configuring the Anthropic Claude computer use tool, including type, name, display dimensions, and optional display number, along with performance considerations.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: APIDOC\nCODE:\n```\nParameters:\n  type:\n    Required: Yes\n    Description: Tool version (`computer_20250124` or `computer_20241022`)\n  name:\n    Required: Yes\n    Description: Must be “computer”\n  display_width_px:\n    Required: Yes\n    Description: Display width in pixels\n  display_height_px:\n    Required: Yes\n    Description: Display height in pixels\n  display_number:\n    Required: No\n    Description: Display number for X11 environments\n```\n\n----------------------------------------\n\nTITLE: Handle File Not Found Error in Claude Tool Result\nDESCRIPTION: When Claude attempts to access a non-existent file, return this JSON structure as a tool result to indicate a 'File not found' error. Set 'is_error' to true to signal an error condition.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"role\": \"user\",\n  \"content\": [\n    {\n      \"type\": \"tool_result\",\n      \"tool_use_id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"content\": \"Error: File not found\",\n      \"is_error\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing imports within markdown code spans and blocks\nDESCRIPTION: To avoid potential collisions and misinterpretations, the `@path/to/import` syntax is explicitly not evaluated inside markdown code spans and code blocks. This ensures that literal code examples containing `@` symbols are not treated as file imports.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/memory\n\nLANGUAGE: Markdown\nCODE:\n```\nThis code span will not be treated as an import: `@anthropic-ai/claude-code`\n\n```\n\n----------------------------------------\n\nTITLE: List Workspaces with cURL\nDESCRIPTION: Retrieves a paginated list of workspaces associated with the organization. Options are available to limit the number of results and include archived workspaces. An admin API key is required.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/administration-api\n\nLANGUAGE: Shell\nCODE:\n```\ncurl \"https://api.anthropic.com/v1/organizations/workspaces?limit=10&include_archived=false\" \\\n  --header \"anthropic-version: 2023-06-01\" \\\n  --header \"x-api-key: $ANTHROPIC_ADMIN_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Python Dictionary for Unsafe Content Category Definitions\nDESCRIPTION: This Python dictionary `unsafe_category_definitions` maps various content moderation categories (e.g., 'Child Exploitation', 'Hate', 'Sexual Content') to their detailed textual definitions. These definitions are crucial for guiding the AI model in accurately identifying and classifying unsafe content.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/about-claude/use-case-guides/content-moderation\n\nLANGUAGE: python\nCODE:\n```\nunsafe_category_definitions = {\n    'Child Exploitation': 'Content that depicts child nudity or that enables, encourages, excuses, or depicts the sexual abuse of children.',\n    'Conspiracy Theories': \"\"\"Content that promotes or endorses unfounded, false, or misleading theories about events, situations, or individuals,\n        which can incite harm or undermine public trust in institutions or facts.\"\"\",\n    'Hate': \"\"\"Content that is hateful toward people on the basis of their protected characteristics\n        (race, color, ethnicity, national origin, disability, religious affiliation, caste, sexual orientation, sex, gender identity and serious disease),\n        or content that perpetuates negative stereotypes.\"\"\",\n    'Indiscriminate Weapons': 'Content that enables the creation of weapons of mass destruction.',\n    'Intellectual Property': 'Content that violates the intellectual property rights of third parties.',\n    'Non-Violent Crimes': 'Content that enables, encourages, or excuses the commission of non-violent crimes.',\n    'Privacy': 'Content that contains sensitive, personal information about private individuals.',\n    'Self-Harm': 'Content that enables, encourages, or excuses acts of intentional self-harm.',\n    'Sex Crimes': 'Content that enables, encourages, or excuses the commission of sex crimes.',\n    'Sexual Content': 'Content that contains erotic descriptions or explicit depictions of sex acts.',\n    'Specialized Advice': \"\"\"Content that contains financial, medical, or legal advice.\n        Financial advice includes guidance on investments, stocks, bonds, or any financial planning.\"\"\",\n    'Violent Crimes': 'Content that enables, encourages, or excuses the commission of violent crimes.',\n}\n```\n\n----------------------------------------\n\nTITLE: List Workspace Members with cURL\nDESCRIPTION: Retrieves a paginated list of all members associated with a specific workspace. The workspace ID is required in the URL path, and an admin API key is needed for authentication.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/administration-api\n\nLANGUAGE: Shell\nCODE:\n```\ncurl \"https://api.anthropic.com/v1/organizations/workspaces/{workspace_id}/members?limit=10\" \\\n  --header \"anthropic-version: 2023-06-01\" \\\n  --header \"x-api-key: $ANTHROPIC_ADMIN_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Handle No Matches for Text Replacement in Claude Tool Result\nDESCRIPTION: If Claude's `str_replace` command fails to find any match for the specified text, return this JSON structure. The error message prompts Claude to re-check the text.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"role\": \"user\",\n  \"content\": [\n    {\n      \"type\": \"tool_result\",\n      \"tool_use_id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"content\": \"Error: No match found for replacement. Please check your text and try again.\",\n      \"is_error\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Anthropic Claude API: Assistant Role Message Fields\nDESCRIPTION: Details the fields available for messages with the 'assistant' role in the Anthropic Claude API. This covers content variations (string, array with text/refusal types), tool_calls, function_call, audio, and refusal fields.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/openai-sdk\n\nLANGUAGE: APIDOC\nCODE:\n```\n| Field         | Variant                  | Support status |\n| ------------- | ------------------------ | -------------- |\n| `content`     | `string`                 | Fully supported|\n| `content`     | `array`, `type == \"text\"` | Fully supported|\n| `content`     | `array`, `type == \"refusal\"` | Ignored        |\n| `tool_calls`  | N/A                      | Fully supported|\n| `function_call` | N/A                      | Fully supported|\n| `audio`       | N/A                      | Ignored        |\n| `refusal`     | N/A                      | Ignored        |\n```\n\n----------------------------------------\n\nTITLE: API Reference: top_k\nDESCRIPTION: Controls sampling by only considering the top K options for each subsequent token, used to remove low probability responses. Recommended for advanced use cases.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages\n\nLANGUAGE: APIDOC\nCODE:\n```\ntop_k:\n  Type: integer\n  Description: Only sample from the top K options for each subsequent token. Used to remove \"long tail\" low probability responses. Recommended for advanced use cases only. You usually only need to use `temperature`.\n  Required range: x >= 0\n  Examples: 5\n```"}]}]},"parent_tool_use_id":null,"session_id":"16368255-989b-4b2d-af5c-a7dc612b3b36"}
{"type":"assistant","message":{"id":"msg_012wXcxTfCiZyUJqzaMwxa4u","type":"message","role":"assistant","model":"claude-opus-4-1-20250805","content":[{"type":"text","text":"Let me search for more specific information about Claude Code hooks:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":7,"cache_creation_input_tokens":29445,"cache_read_input_tokens":57902,"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"16368255-989b-4b2d-af5c-a7dc612b3b36"}
{"type":"assistant","message":{"id":"msg_012wXcxTfCiZyUJqzaMwxa4u","type":"message","role":"assistant","model":"claude-opus-4-1-20250805","content":[{"type":"tool_use","id":"toolu_01LysPutWNTaGbmdW1mAVPoe","name":"WebFetch","input":{"url":"https://docs.anthropic.com/en/docs/claude-code/hooks","prompt":"Extract the complete schema and documentation for Claude Code hooks, including all hook types, their JSON structure, input/output formats, and any example configurations"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":7,"cache_creation_input_tokens":29445,"cache_read_input_tokens":57902,"output_tokens":128,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"16368255-989b-4b2d-af5c-a7dc612b3b36"}
{"type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01LysPutWNTaGbmdW1mAVPoe","type":"tool_result","content":"Here's a comprehensive overview of Claude Code hooks:\n\nHook Types:\n1. PreToolUse: Runs before tool execution\n2. PostToolUse: Runs after tool completion\n3. Notification: Triggered during specific system events\n4. UserPromptSubmit: Runs when a user submits a prompt\n5. Stop: Runs when the main agent finishes responding\n6. SubagentStop: Runs when a subagent completes\n7. PreCompact: Runs before context compaction\n8. SessionStart: Runs when starting a new session\n\nKey Configuration Structure:\n```json\n{\n  \"hooks\": {\n    \"EventName\": [\n      {\n        \"matcher\": \"ToolPattern\",\n        \"hooks\": [\n          {\n            \"type\": \"command\",\n            \"command\": \"your-command-here\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\nImportant Features:\n- Supports regex matching for tools\n- Uses environment variable `$CLAUDE_PROJECT_DIR`\n- Configurable in multiple settings files\n- Provides detailed JSON input about session and event context\n- Supports blocking/allowing tool usage\n- Can inject additional context\n- 60-second default timeout for hook commands\n\nSecurity Warning: Hooks execute shell commands, so careful configuration is crucial."}]},"parent_tool_use_id":null,"session_id":"16368255-989b-4b2d-af5c-a7dc612b3b36"}
{"type":"assistant","message":{"id":"msg_01Td6oMwCva1DErA6MgcD1E7","type":"message","role":"assistant","model":"claude-opus-4-1-20250805","content":[{"type":"text","text":"## Claude Code Hooks Schema\n\nBased on the official documentation, here's the complete schema for Claude Code hooks:\n\n### Hook Types\n\n1. **PreToolUse** - Runs before tool execution\n2. **PostToolUse** - Runs after tool completion  \n3. **Notification** - System event notifications\n4. **UserPromptSubmit** - When user submits a prompt\n5. **Stop** - When main agent finishes responding\n6. **SubagentStop** - When subagent completes\n7. **PreCompact** - Before context compaction\n8. **SessionStart** - When starting new session\n\n### Configuration Structure\n\n```json\n{\n  \"hooks\": {\n    \"PreToolUse\": [\n      {\n        \"matcher\": \"Bash|Write|Edit\",  // Regex pattern for tool names\n        \"hooks\": [\n          {\n            \"type\": \"command\",\n            \"command\": \"path/to/script.sh\"\n          }\n        ]\n      }\n    ],\n    \"UserPromptSubmit\": [\n      {\n        \"hooks\": [\n          {\n            \"type\": \"command\", \n            \"command\": \"echo 'User submitted prompt'\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n### Hook Input (JSON via stdin)\n\nEach hook receives a JSON object with:\n- Session context\n- Event-specific data\n- Tool information (for tool hooks)\n- Environment variables like `$CLAUDE_PROJECT_DIR`\n\n### Hook Output\n\nHooks can return JSON to:\n- Block/allow tool execution (`{\"action\": \"block\"}`)\n- Inject additional context\n- Provide feedback messages\n\n### Key Features\n\n- **Regex Matching**: Use patterns to match multiple tools\n- **60-second Timeout**: Default timeout for hook execution\n- **Multiple Settings Files**: Configure in global/project settings\n- **Shell Command Execution**: Hooks run as shell commands\n- **Environment Access**: Access to `$CLAUDE_PROJECT_DIR` and other vars\n\n### Security Note\n\n⚠️ Hooks execute shell commands with system access - configure carefully and validate all scripts."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":440,"cache_read_input_tokens":87347,"output_tokens":492,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"16368255-989b-4b2d-af5c-a7dc612b3b36"}
{"type":"result","subtype":"success","is_error":false,"duration_ms":56324,"duration_api_ms":51115,"num_turns":13,"result":"## Claude Code Hooks Schema\n\nBased on the official documentation, here's the complete schema for Claude Code hooks:\n\n### Hook Types\n\n1. **PreToolUse** - Runs before tool execution\n2. **PostToolUse** - Runs after tool completion  \n3. **Notification** - System event notifications\n4. **UserPromptSubmit** - When user submits a prompt\n5. **Stop** - When main agent finishes responding\n6. **SubagentStop** - When subagent completes\n7. **PreCompact** - Before context compaction\n8. **SessionStart** - When starting new session\n\n### Configuration Structure\n\n```json\n{\n  \"hooks\": {\n    \"PreToolUse\": [\n      {\n        \"matcher\": \"Bash|Write|Edit\",  // Regex pattern for tool names\n        \"hooks\": [\n          {\n            \"type\": \"command\",\n            \"command\": \"path/to/script.sh\"\n          }\n        ]\n      }\n    ],\n    \"UserPromptSubmit\": [\n      {\n        \"hooks\": [\n          {\n            \"type\": \"command\", \n            \"command\": \"echo 'User submitted prompt'\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n### Hook Input (JSON via stdin)\n\nEach hook receives a JSON object with:\n- Session context\n- Event-specific data\n- Tool information (for tool hooks)\n- Environment variables like `$CLAUDE_PROJECT_DIR`\n\n### Hook Output\n\nHooks can return JSON to:\n- Block/allow tool execution (`{\"action\": \"block\"}`)\n- Inject additional context\n- Provide feedback messages\n\n### Key Features\n\n- **Regex Matching**: Use patterns to match multiple tools\n- **60-second Timeout**: Default timeout for hook execution\n- **Multiple Settings Files**: Configure in global/project settings\n- **Shell Command Execution**: Hooks run as shell commands\n- **Environment Access**: Access to `$CLAUDE_PROJECT_DIR` and other vars\n\n### Security Note\n\n⚠️ Hooks execute shell commands with system access - configure carefully and validate all scripts.","session_id":"16368255-989b-4b2d-af5c-a7dc612b3b36","total_cost_usd":1.22639905,"usage":{"input_tokens":31,"cache_creation_input_tokens":35379,"cache_read_input_tokens":305052,"output_tokens":997,"server_tool_use":{"web_search_requests":0},"service_tier":"standard"}}
