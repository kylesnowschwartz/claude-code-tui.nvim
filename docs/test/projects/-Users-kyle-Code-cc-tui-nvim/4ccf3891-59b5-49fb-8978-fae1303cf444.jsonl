{"type":"summary","summary":"Conversation Browser Bug Fix: Type Safety and Parser Improvements","leafUuid":"8c4f3616-bff6-40b0-b338-e6d9ec17ac99"}
{"type":"summary","summary":"Secure File Path Handling in Conversation Browser","leafUuid":"712ccbf8-0f65-4d0e-9b51-ffe40a815cab"}
{"parentUuid":null,"isSidechain":false,"userType":"external","cwd":"/Users/kyle/Code/cc-tui.nvim","sessionId":"4ccf3891-59b5-49fb-8978-fae1303cf444","version":"1.0.72","gitBranch":"project_discovery","type":"user","message":{"role":"user","content":"use context7 to look up claude code hook docs"},"uuid":"d68d49d6-2df8-4e38-b881-3d34f45b5bd0","timestamp":"2025-08-10T04:14:30.447Z"}
{"parentUuid":"d68d49d6-2df8-4e38-b881-3d34f45b5bd0","isSidechain":false,"userType":"external","cwd":"/Users/kyle/Code/cc-tui.nvim","sessionId":"4ccf3891-59b5-49fb-8978-fae1303cf444","version":"1.0.72","gitBranch":"project_discovery","message":{"id":"msg_011JuPqqRVazUhYciPpbMzHk","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"I'll look up the Claude Code hooks documentation for you."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":52476,"cache_read_input_tokens":0,"output_tokens":8,"service_tier":"standard"}},"requestId":"req_011CRyNyyG7JuuyqjfyN1ypd","type":"assistant","uuid":"a97cafcf-3eda-4836-8c01-dcf1d2044049","timestamp":"2025-08-10T04:14:34.659Z"}
{"type":"summary","summary":"Lua Plugin Security: Path Validation & Test Fixes","leafUuid":"705a36a4-bbf8-42e4-84e6-c3662faba6ea"}
{"parentUuid":"a97cafcf-3eda-4836-8c01-dcf1d2044049","isSidechain":false,"userType":"external","cwd":"/Users/kyle/Code/cc-tui.nvim","sessionId":"4ccf3891-59b5-49fb-8978-fae1303cf444","version":"1.0.72","gitBranch":"project_discovery","message":{"id":"msg_011JuPqqRVazUhYciPpbMzHk","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01WRLErvsRcjCnQRW3Pssftw","name":"mcp__mcphub__context7__resolve-library-id","input":{"libraryName":"claude code"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":52476,"cache_read_input_tokens":0,"output_tokens":81,"service_tier":"standard"}},"requestId":"req_011CRyNyyG7JuuyqjfyN1ypd","type":"assistant","uuid":"096c2a8d-6146-4e4d-83b6-253183e49922","timestamp":"2025-08-10T04:14:35.071Z"}
{"type":"summary","summary":"Neovim Plugin Refactor: Security, Performance, Architecture","leafUuid":"54b5ab4a-be67-479f-9f9a-56da61c0df18"}
{"parentUuid":"096c2a8d-6146-4e4d-83b6-253183e49922","isSidechain":false,"userType":"external","cwd":"/Users/kyle/Code/cc-tui.nvim","sessionId":"4ccf3891-59b5-49fb-8978-fae1303cf444","version":"1.0.72","gitBranch":"project_discovery","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01WRLErvsRcjCnQRW3Pssftw","type":"tool_result","content":[{"type":"text","text":"Available Libraries (top matches):\n\nEach result includes:\n- Library ID: Context7-compatible identifier (format: /org/project)\n- Name: Library or package name\n- Description: Short summary\n- Code Snippets: Number of available code examples\n- Trust Score: Authority indicator\n- Versions: List of versions if available. Use one of those versions if and only if the user explicitly provides a version in their query.\n\nFor best results, select libraries based on name match, trust score, snippet coverage, and relevance to your use case.\n\n----------\n\n- Title: Claude Code Multi AI MCP\n- Context7-compatible library ID: /raiansar/claude_code-multi-ai-mcp\n- Description: Connect Claude Code to multiple AIs like Gemini, Grok, ChatGPT, and DeepSeek to get diverse opinions and assistance without switching platforms.\n- Code Snippets: 22\n- Trust Score: 8.5\n----------\n- Title: Anthropic Claude\n- Context7-compatible library ID: /context7/anthropic-ru\n- Description: Claude is a high-performance, reliable, and intelligent AI platform by Anthropic, excelling in language, reasoning, analysis, and coding tasks.\n- Code Snippets: 1378\n- Trust Score: 7.5\n----------\n- Title: Claude Squad\n- Context7-compatible library ID: /smtg-ai/claude-squad\n- Description: Claude Squad is a terminal application that manages multiple AI code agents like Claude Code, Codex, and Gemini in separate workspaces, enabling simultaneous task management with isolated git environments.\n- Code Snippets: 10\n- Trust Score: 5.1\n----------\n- Title: AI SDK Provider Claude Code\n- Context7-compatible library ID: /ben-vargas/ai-sdk-provider-claude-code\n- Description: This project provides compatibility for using Claude via the Vercel AI SDK through the official @anthropic-ai/claude-code SDK/CLI, supporting both v4 and v5-beta versions.\n- Code Snippets: 80\n- Trust Score: 6.6\n----------\n- Title: Claude (llmstxt)\n- Context7-compatible library ID: /docs.anthropic.com-7a01857/llmstxt\n- Description: Claude is a family of highly capable, secure, and trustworthy large language models (LLMs) developed by Anthropic, offering advanced generative AI, reasoning, vision, and agentic capabilities via API, SDKs, and tooling for both enterprise and individual use.\n- Code Snippets: 1266\n----------\n- Title: Claude Code\n- Context7-compatible library ID: /anthropics/claude-code\n- Description: Claude Code is an agentic terminal tool that understands your codebase to help you code faster by executing tasks, explaining code, and handling git workflows through natural language commands.\n- Code Snippets: 1\n- Trust Score: 8.8\n----------\n- Title: Claude\n- Context7-compatible library ID: /context7/anthropic-en\n- Description: Claude is a highly performant, trustworthy, and intelligent AI platform by Anthropic that excels at tasks involving language, reasoning, analysis, coding, and vision, offering advanced models like Claude 4.\n- Code Snippets: 821\n- Trust Score: 7.5\n----------\n- Title: Claude Code UI\n- Context7-compatible library ID: /siteboon/claudecodeui\n- Description: A desktop and mobile UI for Anthropic's Claude Code CLI, enabling local or remote viewing and modification of active projects and sessions with features like a chat interface, integrated terminal, file explorer, and Git integration.\n- Code Snippets: 16\n- Trust Score: 4.8\n----------\n- Title: Claude-Simone\n- Context7-compatible library ID: /helmi/claude-simone\n- Description: A project management framework for AI-assisted development with Claude Code\n- Code Snippets: 18\n- Trust Score: 8.3\n----------\n- Title: Claude Code\n- Context7-compatible library ID: /context7/docs_anthropic_com-en-docs-claude-code\n- Description: Claude Code is an agentic coding tool that integrates with your terminal to help you code faster. It understands your codebase and performs actions like editing files, fixing bugs, and answering questions using natural language commands.\n- Code Snippets: 431\n- Trust Score: 7.5\n----------\n- Title: Claude Code Neovim IDE Extension\n- Context7-compatible library ID: /coder/claudecode.nvim\n- Description: claudecode.nvim is a Neovim IDE integration for Claude Code, bringing Anthropic's AI coding assistant to Neovim with a pure Lua implementation and full protocol compatibility.\n- Code Snippets: 81\n- Trust Score: 9.4\n----------\n- Title: AI Code Review\n- Context7-compatible library ID: /bobmatnyc/ai-code-review\n- Description: A TypeScript tool for automated code reviews using Gemini, Claude, OpenAI, and OpenRouter models with LangChain integration for enhanced prompt management.\n- Code Snippets: 342\n- Trust Score: 6.9\n----------\n- Title: Claude Code Go\n- Context7-compatible library ID: /lancekrogers/claude-code-go\n- Description: Golang SDK for Anthropic's Claude Code - A Go wrapper for the command line claude code agent\n- Code Snippets: 55\n- Trust Score: 7.6\n----------\n- Title: ClaudeLog\n- Context7-compatible library ID: /context7/claudelog\n- Description: ClaudeLog is a comprehensive guide providing experiments, insights, and best practices for mastering Claude Code, an AI agentic coding tool.\n- Code Snippets: 560\n- Trust Score: 7.5\n----------\n- Title: Claude Code Telegram\n- Context7-compatible library ID: /richardatct/claude-code-telegram\n- Description: A Telegram bot providing remote access to Claude Code, transforming your phone into a development terminal with AI assistance, project navigation, and session persistence.\n- Code Snippets: 244\n- Trust Score: 6.9\n----------\n- Title: Claude Code Usage Monitor\n- Context7-compatible library ID: /maciek-roboblog/claude-code-usage-monitor\n- Description: A real-time terminal monitoring tool for Claude AI token usage, featuring advanced analytics, ML-based predictions, and a Rich UI to track token consumption, burn rate, and cost.\n- Code Snippets: 108\n- Trust Score: 8.5\n----------\n- Title: Claude Code OTel\n- Context7-compatible library ID: /colemurray/claude-code-otel\n- Description: A comprehensive observability solution for monitoring Claude Code usage, performance, and costs, providing insights into AI-assisted development workflows.\n- Code Snippets: 24\n- Trust Score: 9.8\n----------\n- Title: Claude Code Action\n- Context7-compatible library ID: /anthropics/claude-code-action\n- Description: A GitHub action that enables Claude to answer questions and implement code changes in PRs and issues by listening for trigger phrases in comments.\n- Code Snippets: 104\n- Trust Score: 8.8\n----------\n- Title: Claude Code Sub Agent Manager\n- Context7-compatible library ID: /webdevtodayjason/sub-agents\n- Description: Claude Sub-Agents Manager is a CLI tool that enhances Claude Code with specialized AI assistants for code review, testing, debugging, and documentation.\n- Code Snippets: 61\n- Trust Score: 7.4\n----------\n- Title: Claude Code\n- Context7-compatible library ID: /context7/docs_anthropic_com-en-docs-claude-code-overview\n- Description: An agentic coding tool that lives in your terminal, understands your codebase, and helps you code faster through natural language commands by integrating directly with your development environment.\n- Code Snippets: 1225\n- Trust Score: 7.5\n----------\n- Title: Claude SDK for Rust\n- Context7-compatible library ID: /bredmond1019/claude-sdk-rs\n- Description: A type-safe, async-first Rust SDK that wraps the Claude Code CLI to provide a powerful programmatic API for interacting with Claude AI, enabling the creation of AI-powered applications with Rust's safety guarantees.\n- Code Snippets: 633\n- Trust Score: 6.2\n----------\n- Title: DeepClaude\n- Context7-compatible library ID: /getasterisk/deepclaude\n- Description: DeepClaude is a high-performance LLM inference API that unifies DeepSeek R1's reasoning with Claude's creativity and code generation, offering a private, secure, and configurable chat interface.\n- Code Snippets: 7\n- Trust Score: 7\n----------\n- Title: Claude Code SDK Python\n- Context7-compatible library ID: /anthropics/claude-code-sdk-python\n- Description: A Python SDK for interacting with Claude Code, enabling developers to send prompts, manage options, and utilize tools for code generation and execution.\n- Code Snippets: 11\n- Trust Score: 8.8\n----------\n- Title: Claude Code Router\n- Context7-compatible library ID: /musistudio/claude-code-router\n- Description: A powerful tool to route Claude Code requests to different models and customize requests, supporting multiple providers and dynamic model switching.\n- Code Snippets: 36\n- Trust Score: 9.4\n----------\n- Title: Claude Agents\n- Context7-compatible library ID: /iannuttall/claude-agents\n- Description: Custom subagents to use with Claude Code.\n- Code Snippets: 16\n- Trust Score: 8.4\n----------\n- Title: Claude Code SDK\n- Context7-compatible library ID: /geetchoudhary/claude-code-sdk\n- Description: \n- Code Snippets: 42\n- Trust Score: 4.8\n----------\n- Title: Claude Code TypeScript SDK\n- Context7-compatible library ID: /instantlyeasy/claude-code-sdk-ts\n- Description: An unofficial TypeScript SDK for the Claude Code CLI, enabling programmatic interaction with Claude for code generation, refactoring, and analysis with features like fluent API, response parsing, and session management.\n- Code Snippets: 194\n- Trust Score: 3.5\n----------\n- Title: Anthropic API\n- Context7-compatible library ID: /context7/anthropic-api\n- Description: Build user-facing experiences and new products with Anthropic's advanced AI models, Claude. Access all Claude models with usage-based tiers, automatically increasing rate limits, and simple pay-as-you-go pricing.\n- Code Snippets: 3\n- Trust Score: 7.5\n----------\n- Title: Claude-Flow\n- Context7-compatible library ID: /ruvnet/claude-flow\n- Description: Claude-Flow v2.0.0 Alpha represents a revolutionary leap in AI-powered development orchestration. Built from the ground up with enterprise-grade architecture, advanced swarm intelligence, and seamless Claude Code integration.\n- Code Snippets: 4798\n- Trust Score: 9.1\n----------\n- Title: Claude Code Hooks\n- Context7-compatible library ID: /gowaylee/cchooks\n- Description: A lightweight Python toolkit for building Claude Code hooks, simplifying JSON parsing and boilerplate code for various hook types.\n- Code Snippets: 80\n- Trust Score: 7.4\n----------\n- Title: Claude Code Flow\n- Context7-compatible library ID: /ruvnet/claude-code-flow\n- Description: This mode serves as a code-first orchestration layer, enabling Claude to write, edit, test, and optimize code autonomously across recursive agent cycles.\n- Code Snippets: 4303\n- Trust Score: 9.1\n----------\n- Title: Claude Code Go SDK\n- Context7-compatible library ID: /yukifoo/claude-code-sdk-go\n- Description: A Go SDK for Claude Code that provides programmatic access to Claude's agentic coding capabilities, wrapping the Claude Code CLI with a Go-native interface.\n- Code Snippets: 32\n- Trust Score: 5.1\n----------\n- Title: Kubernetes Copilot\n- Context7-compatible library ID: /feiskyer/kube-copilot\n- Description: Kubernetes Copilot powered by AI (OpenAI/Claude/Gemini/etc)\n- Code Snippets: 9\n- Trust Score: 8.8\n----------\n- Title: Awesome Claude Code Subagents\n- Context7-compatible library ID: /voltagent/awesome-claude-code-subagents\n- Description: A comprehensive repository of production-ready Claude Code subagents for various development tasks, maintained by VoltAgent.\n- Code Snippets: 875\n- Trust Score: 6.9\n----------\n- Title: Agent Rules\n- Context7-compatible library ID: /steipete/agent-rules\n- Description: A collection of reusable rules and knowledge documents for AI coding assistants like Claude Code and Cursor, covering development workflows, code quality, problem-solving, documentation, and automation.\n- Code Snippets: 77\n- Trust Score: 10\n----------\n- Title: SuperClaude Framework\n- Context7-compatible library ID: /superclaude-org/superclaude_framework\n- Description: SuperClaude is a framework that enhances Claude Code with specialized commands, smart personas, and MCP server integration to streamline development workflows.\n- Code Snippets: 408\n- Trust Score: 5.1\n----------\n- Title: Kilo Code\n- Context7-compatible library ID: /context7/kilocode_ai\n- Description: Kilo Code is an open-source AI agent VS Code extension that helps developers write code more efficiently by generating code, automating tasks, and providing intelligent suggestions through a chat interface.\n- Code Snippets: 209\n- Trust Score: 7.5\n----------\n- Title: Claude Code.nvim\n- Context7-compatible library ID: /greggh/claude-code.nvim\n- Description: A Neovim plugin that provides seamless integration with the Claude Code AI assistant, allowing users to toggle Claude Code in a terminal window with customizable options and real-time buffer updates.\n- Code Snippets: 41\n- Trust Score: 8.3\n----------\n- Title: Claude Code\n- Context7-compatible library ID: /thevibeworks/claude-code-docs\n- Description: \n- Code Snippets: 302\n- Trust Score: 4.7"}]}]},"uuid":"e34a7eb7-f7cb-4481-81d0-96280c73c27a","timestamp":"2025-08-10T04:14:36.954Z","toolUseResult":[{"type":"text","text":"Available Libraries (top matches):\n\nEach result includes:\n- Library ID: Context7-compatible identifier (format: /org/project)\n- Name: Library or package name\n- Description: Short summary\n- Code Snippets: Number of available code examples\n- Trust Score: Authority indicator\n- Versions: List of versions if available. Use one of those versions if and only if the user explicitly provides a version in their query.\n\nFor best results, select libraries based on name match, trust score, snippet coverage, and relevance to your use case.\n\n----------\n\n- Title: Claude Code Multi AI MCP\n- Context7-compatible library ID: /raiansar/claude_code-multi-ai-mcp\n- Description: Connect Claude Code to multiple AIs like Gemini, Grok, ChatGPT, and DeepSeek to get diverse opinions and assistance without switching platforms.\n- Code Snippets: 22\n- Trust Score: 8.5\n----------\n- Title: Anthropic Claude\n- Context7-compatible library ID: /context7/anthropic-ru\n- Description: Claude is a high-performance, reliable, and intelligent AI platform by Anthropic, excelling in language, reasoning, analysis, and coding tasks.\n- Code Snippets: 1378\n- Trust Score: 7.5\n----------\n- Title: Claude Squad\n- Context7-compatible library ID: /smtg-ai/claude-squad\n- Description: Claude Squad is a terminal application that manages multiple AI code agents like Claude Code, Codex, and Gemini in separate workspaces, enabling simultaneous task management with isolated git environments.\n- Code Snippets: 10\n- Trust Score: 5.1\n----------\n- Title: AI SDK Provider Claude Code\n- Context7-compatible library ID: /ben-vargas/ai-sdk-provider-claude-code\n- Description: This project provides compatibility for using Claude via the Vercel AI SDK through the official @anthropic-ai/claude-code SDK/CLI, supporting both v4 and v5-beta versions.\n- Code Snippets: 80\n- Trust Score: 6.6\n----------\n- Title: Claude (llmstxt)\n- Context7-compatible library ID: /docs.anthropic.com-7a01857/llmstxt\n- Description: Claude is a family of highly capable, secure, and trustworthy large language models (LLMs) developed by Anthropic, offering advanced generative AI, reasoning, vision, and agentic capabilities via API, SDKs, and tooling for both enterprise and individual use.\n- Code Snippets: 1266\n----------\n- Title: Claude Code\n- Context7-compatible library ID: /anthropics/claude-code\n- Description: Claude Code is an agentic terminal tool that understands your codebase to help you code faster by executing tasks, explaining code, and handling git workflows through natural language commands.\n- Code Snippets: 1\n- Trust Score: 8.8\n----------\n- Title: Claude\n- Context7-compatible library ID: /context7/anthropic-en\n- Description: Claude is a highly performant, trustworthy, and intelligent AI platform by Anthropic that excels at tasks involving language, reasoning, analysis, coding, and vision, offering advanced models like Claude 4.\n- Code Snippets: 821\n- Trust Score: 7.5\n----------\n- Title: Claude Code UI\n- Context7-compatible library ID: /siteboon/claudecodeui\n- Description: A desktop and mobile UI for Anthropic's Claude Code CLI, enabling local or remote viewing and modification of active projects and sessions with features like a chat interface, integrated terminal, file explorer, and Git integration.\n- Code Snippets: 16\n- Trust Score: 4.8\n----------\n- Title: Claude-Simone\n- Context7-compatible library ID: /helmi/claude-simone\n- Description: A project management framework for AI-assisted development with Claude Code\n- Code Snippets: 18\n- Trust Score: 8.3\n----------\n- Title: Claude Code\n- Context7-compatible library ID: /context7/docs_anthropic_com-en-docs-claude-code\n- Description: Claude Code is an agentic coding tool that integrates with your terminal to help you code faster. It understands your codebase and performs actions like editing files, fixing bugs, and answering questions using natural language commands.\n- Code Snippets: 431\n- Trust Score: 7.5\n----------\n- Title: Claude Code Neovim IDE Extension\n- Context7-compatible library ID: /coder/claudecode.nvim\n- Description: claudecode.nvim is a Neovim IDE integration for Claude Code, bringing Anthropic's AI coding assistant to Neovim with a pure Lua implementation and full protocol compatibility.\n- Code Snippets: 81\n- Trust Score: 9.4\n----------\n- Title: AI Code Review\n- Context7-compatible library ID: /bobmatnyc/ai-code-review\n- Description: A TypeScript tool for automated code reviews using Gemini, Claude, OpenAI, and OpenRouter models with LangChain integration for enhanced prompt management.\n- Code Snippets: 342\n- Trust Score: 6.9\n----------\n- Title: Claude Code Go\n- Context7-compatible library ID: /lancekrogers/claude-code-go\n- Description: Golang SDK for Anthropic's Claude Code - A Go wrapper for the command line claude code agent\n- Code Snippets: 55\n- Trust Score: 7.6\n----------\n- Title: ClaudeLog\n- Context7-compatible library ID: /context7/claudelog\n- Description: ClaudeLog is a comprehensive guide providing experiments, insights, and best practices for mastering Claude Code, an AI agentic coding tool.\n- Code Snippets: 560\n- Trust Score: 7.5\n----------\n- Title: Claude Code Telegram\n- Context7-compatible library ID: /richardatct/claude-code-telegram\n- Description: A Telegram bot providing remote access to Claude Code, transforming your phone into a development terminal with AI assistance, project navigation, and session persistence.\n- Code Snippets: 244\n- Trust Score: 6.9\n----------\n- Title: Claude Code Usage Monitor\n- Context7-compatible library ID: /maciek-roboblog/claude-code-usage-monitor\n- Description: A real-time terminal monitoring tool for Claude AI token usage, featuring advanced analytics, ML-based predictions, and a Rich UI to track token consumption, burn rate, and cost.\n- Code Snippets: 108\n- Trust Score: 8.5\n----------\n- Title: Claude Code OTel\n- Context7-compatible library ID: /colemurray/claude-code-otel\n- Description: A comprehensive observability solution for monitoring Claude Code usage, performance, and costs, providing insights into AI-assisted development workflows.\n- Code Snippets: 24\n- Trust Score: 9.8\n----------\n- Title: Claude Code Action\n- Context7-compatible library ID: /anthropics/claude-code-action\n- Description: A GitHub action that enables Claude to answer questions and implement code changes in PRs and issues by listening for trigger phrases in comments.\n- Code Snippets: 104\n- Trust Score: 8.8\n----------\n- Title: Claude Code Sub Agent Manager\n- Context7-compatible library ID: /webdevtodayjason/sub-agents\n- Description: Claude Sub-Agents Manager is a CLI tool that enhances Claude Code with specialized AI assistants for code review, testing, debugging, and documentation.\n- Code Snippets: 61\n- Trust Score: 7.4\n----------\n- Title: Claude Code\n- Context7-compatible library ID: /context7/docs_anthropic_com-en-docs-claude-code-overview\n- Description: An agentic coding tool that lives in your terminal, understands your codebase, and helps you code faster through natural language commands by integrating directly with your development environment.\n- Code Snippets: 1225\n- Trust Score: 7.5\n----------\n- Title: Claude SDK for Rust\n- Context7-compatible library ID: /bredmond1019/claude-sdk-rs\n- Description: A type-safe, async-first Rust SDK that wraps the Claude Code CLI to provide a powerful programmatic API for interacting with Claude AI, enabling the creation of AI-powered applications with Rust's safety guarantees.\n- Code Snippets: 633\n- Trust Score: 6.2\n----------\n- Title: DeepClaude\n- Context7-compatible library ID: /getasterisk/deepclaude\n- Description: DeepClaude is a high-performance LLM inference API that unifies DeepSeek R1's reasoning with Claude's creativity and code generation, offering a private, secure, and configurable chat interface.\n- Code Snippets: 7\n- Trust Score: 7\n----------\n- Title: Claude Code SDK Python\n- Context7-compatible library ID: /anthropics/claude-code-sdk-python\n- Description: A Python SDK for interacting with Claude Code, enabling developers to send prompts, manage options, and utilize tools for code generation and execution.\n- Code Snippets: 11\n- Trust Score: 8.8\n----------\n- Title: Claude Code Router\n- Context7-compatible library ID: /musistudio/claude-code-router\n- Description: A powerful tool to route Claude Code requests to different models and customize requests, supporting multiple providers and dynamic model switching.\n- Code Snippets: 36\n- Trust Score: 9.4\n----------\n- Title: Claude Agents\n- Context7-compatible library ID: /iannuttall/claude-agents\n- Description: Custom subagents to use with Claude Code.\n- Code Snippets: 16\n- Trust Score: 8.4\n----------\n- Title: Claude Code SDK\n- Context7-compatible library ID: /geetchoudhary/claude-code-sdk\n- Description: \n- Code Snippets: 42\n- Trust Score: 4.8\n----------\n- Title: Claude Code TypeScript SDK\n- Context7-compatible library ID: /instantlyeasy/claude-code-sdk-ts\n- Description: An unofficial TypeScript SDK for the Claude Code CLI, enabling programmatic interaction with Claude for code generation, refactoring, and analysis with features like fluent API, response parsing, and session management.\n- Code Snippets: 194\n- Trust Score: 3.5\n----------\n- Title: Anthropic API\n- Context7-compatible library ID: /context7/anthropic-api\n- Description: Build user-facing experiences and new products with Anthropic's advanced AI models, Claude. Access all Claude models with usage-based tiers, automatically increasing rate limits, and simple pay-as-you-go pricing.\n- Code Snippets: 3\n- Trust Score: 7.5\n----------\n- Title: Claude-Flow\n- Context7-compatible library ID: /ruvnet/claude-flow\n- Description: Claude-Flow v2.0.0 Alpha represents a revolutionary leap in AI-powered development orchestration. Built from the ground up with enterprise-grade architecture, advanced swarm intelligence, and seamless Claude Code integration.\n- Code Snippets: 4798\n- Trust Score: 9.1\n----------\n- Title: Claude Code Hooks\n- Context7-compatible library ID: /gowaylee/cchooks\n- Description: A lightweight Python toolkit for building Claude Code hooks, simplifying JSON parsing and boilerplate code for various hook types.\n- Code Snippets: 80\n- Trust Score: 7.4\n----------\n- Title: Claude Code Flow\n- Context7-compatible library ID: /ruvnet/claude-code-flow\n- Description: This mode serves as a code-first orchestration layer, enabling Claude to write, edit, test, and optimize code autonomously across recursive agent cycles.\n- Code Snippets: 4303\n- Trust Score: 9.1\n----------\n- Title: Claude Code Go SDK\n- Context7-compatible library ID: /yukifoo/claude-code-sdk-go\n- Description: A Go SDK for Claude Code that provides programmatic access to Claude's agentic coding capabilities, wrapping the Claude Code CLI with a Go-native interface.\n- Code Snippets: 32\n- Trust Score: 5.1\n----------\n- Title: Kubernetes Copilot\n- Context7-compatible library ID: /feiskyer/kube-copilot\n- Description: Kubernetes Copilot powered by AI (OpenAI/Claude/Gemini/etc)\n- Code Snippets: 9\n- Trust Score: 8.8\n----------\n- Title: Awesome Claude Code Subagents\n- Context7-compatible library ID: /voltagent/awesome-claude-code-subagents\n- Description: A comprehensive repository of production-ready Claude Code subagents for various development tasks, maintained by VoltAgent.\n- Code Snippets: 875\n- Trust Score: 6.9\n----------\n- Title: Agent Rules\n- Context7-compatible library ID: /steipete/agent-rules\n- Description: A collection of reusable rules and knowledge documents for AI coding assistants like Claude Code and Cursor, covering development workflows, code quality, problem-solving, documentation, and automation.\n- Code Snippets: 77\n- Trust Score: 10\n----------\n- Title: SuperClaude Framework\n- Context7-compatible library ID: /superclaude-org/superclaude_framework\n- Description: SuperClaude is a framework that enhances Claude Code with specialized commands, smart personas, and MCP server integration to streamline development workflows.\n- Code Snippets: 408\n- Trust Score: 5.1\n----------\n- Title: Kilo Code\n- Context7-compatible library ID: /context7/kilocode_ai\n- Description: Kilo Code is an open-source AI agent VS Code extension that helps developers write code more efficiently by generating code, automating tasks, and providing intelligent suggestions through a chat interface.\n- Code Snippets: 209\n- Trust Score: 7.5\n----------\n- Title: Claude Code.nvim\n- Context7-compatible library ID: /greggh/claude-code.nvim\n- Description: A Neovim plugin that provides seamless integration with the Claude Code AI assistant, allowing users to toggle Claude Code in a terminal window with customizable options and real-time buffer updates.\n- Code Snippets: 41\n- Trust Score: 8.3\n----------\n- Title: Claude Code\n- Context7-compatible library ID: /thevibeworks/claude-code-docs\n- Description: \n- Code Snippets: 302\n- Trust Score: 4.7"}]}
{"type":"summary","summary":"Neovim Plugin Refactoring: Security, Performance, Architecture","leafUuid":"4d0b1f61-4e00-4545-b2bc-da6d11900439"}
{"parentUuid":"e34a7eb7-f7cb-4481-81d0-96280c73c27a","isSidechain":false,"userType":"external","cwd":"/Users/kyle/Code/cc-tui.nvim","sessionId":"4ccf3891-59b5-49fb-8978-fae1303cf444","version":"1.0.72","gitBranch":"project_discovery","message":{"id":"msg_014qXnHVfkzYwadGbZU9QZq6","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Now I'll get the hooks documentation from the most relevant Claude Code library:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":7,"cache_creation_input_tokens":3502,"cache_read_input_tokens":52476,"output_tokens":3,"service_tier":"standard"}},"requestId":"req_011CRyNzSk6VU5jaHYoqgVb2","type":"assistant","uuid":"9ea60032-510d-4aab-83aa-63dbd808a47c","timestamp":"2025-08-10T04:14:39.945Z"}
{"type":"summary","summary":"Neovim Plugin Refactoring: Monolithic Files to Modular Architecture","leafUuid":"2a2f13b3-0408-40d7-a4c7-05e0be212bde"}
{"parentUuid":"9ea60032-510d-4aab-83aa-63dbd808a47c","isSidechain":false,"userType":"external","cwd":"/Users/kyle/Code/cc-tui.nvim","sessionId":"4ccf3891-59b5-49fb-8978-fae1303cf444","version":"1.0.72","gitBranch":"project_discovery","message":{"id":"msg_014qXnHVfkzYwadGbZU9QZq6","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_012irz2Q7vw1NNb2QZguS1Cx","name":"mcp__mcphub__context7__get-library-docs","input":{"context7CompatibleLibraryID":"/context7/docs_anthropic_com-en-docs-claude-code","topic":"hooks"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":7,"cache_creation_input_tokens":3502,"cache_read_input_tokens":52476,"output_tokens":123,"service_tier":"standard"}},"requestId":"req_011CRyNzSk6VU5jaHYoqgVb2","type":"assistant","uuid":"0b42a97c-abc7-4028-becf-ee045317d81d","timestamp":"2025-08-10T04:14:40.833Z"}
{"type":"summary","summary":"TDD Bug Fix: Content Classifier Test Suite","leafUuid":"e90d81e8-ab95-4924-a751-6b938cbe5cc1"}
{"parentUuid":"0b42a97c-abc7-4028-becf-ee045317d81d","isSidechain":false,"userType":"external","cwd":"/Users/kyle/Code/cc-tui.nvim","sessionId":"4ccf3891-59b5-49fb-8978-fae1303cf444","version":"1.0.72","gitBranch":"project_discovery","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_012irz2Q7vw1NNb2QZguS1Cx","type":"tool_result","content":[{"type":"text","text":"========================\nCODE SNIPPETS\n========================\nTITLE: Handle Invalid Coordinates Error for Claude Tool\nDESCRIPTION: Example JSON structure for informing Claude about invalid coordinates provided for an action, specifying the out-of-bounds coordinates and display limits.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"role\": \"user\",\n  \"content\": [\n    {\n      \"type\": \"tool_result\",\n      \"tool_use_id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"content\": \"Error: Coordinates (1200, 900) are outside display bounds (1024x768).\",\n      \"is_error\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Define a poor tool description for Claude\nDESCRIPTION: This example illustrates an ineffective tool definition due to its overly brief and vague description. Such a definition provides insufficient context for Claude, leading to potential misinterpretations or incorrect tool usage.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"get_stock_price\",\n  \"description\": \"Gets the stock price for a ticker.\",\n  \"input_schema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"ticker\": {\n        \"type\": \"string\"\n      }\n    },\n    \"required\": [\"ticker\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Payloads for Claude Computer Use Actions\nDESCRIPTION: Provides concrete JSON examples for invoking various actions supported by the Anthropic Claude computer use tool, demonstrating the required structure and parameters for screenshot, left_click, type, and scroll.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"action\": \"screenshot\"\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"action\": \"left_click\",\n  \"coordinate\": [500, 300]\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"action\": \"type\",\n  \"text\": \"Hello, world!\"\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"action\": \"scroll\",\n  \"coordinate\": [500, 400],\n  \"scroll_direction\": \"down\",\n  \"scroll_amount\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Claude Multi-Tool Chaining Dialogue Example\nDESCRIPTION: Illustrates a multi-turn conversation where Claude chains `get_location` and `get_weather` tool calls to answer a user's query, demonstrating the flow of information and tool result integration into a natural language response.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: Dialogue\nCODE:\n```\n| --- | --- |\n| User | What’s the weather like where I am? |\n| Assistant | <thinking>To answer this, I first need to determine the user’s location using the get_location tool. Then I can pass that location to the get_weather tool to find the current weather there.</thinking>[Tool use for get_location] |\n| User | [Tool result for get_location with matching id and result of San Francisco, CA] |\n| Assistant | [Tool use for get_weather with the following input]{ “location”: “San Francisco, CA”, “unit”: “fahrenheit” } |\n| User | [Tool result for get_weather with matching id and result of “59°F (15°C), mostly cloudy”] |\n| Assistant | Based on your current location in San Francisco, CA, the weather right now is 59°F (15°C) and mostly cloudy. It’s a fairly cool and overcast day in the city. You may want to bring a light jacket if you’re heading outside. |\n```\n\n----------------------------------------\n\nTITLE: Integrate Web Search Tool with Claude API using cURL\nDESCRIPTION: Demonstrates how to make an API request to Claude with the web search tool enabled. This example shows a user message asking about TypeScript updates and includes the `web_search_20250305` tool in the request payload, limiting its uses to 5.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/web-search-tool\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n    --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n    --header \"anthropic-version: 2023-06-01\" \\\n    --header \"content-type: application/json\" \\\n    --data '{\n        \"model\": \"claude-opus-4-20250514\",\n        \"max_tokens\": 1024,\n        \"messages\": [\n            {\n                \"role\": \"user\",\n                \"content\": \"How do I update a web app to TypeScript 5.5?\"\n            }\n        ],\n        \"tools\": [{\n            \"type\": \"web_search_20250305\",\n            \"name\": \"web_search\",\n            \"max_uses\": 5\n        }]\n    }'\n```\n\n----------------------------------------\n\nTITLE: Claude Tool Use Output with Inferred Parameters (JSON)\nDESCRIPTION: This JSON snippet demonstrates a `tool_use` block returned by Claude when it attempts to infer missing required parameters for a tool call. In this example, Claude infers 'New York, NY' and 'fahrenheit' for the `get_weather` tool, even if the user prompt didn't explicitly provide them.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"type\": \"tool_use\",\n  \"id\": \"toolu_01A09q90qw90lq917835lq9\",\n  \"name\": \"get_weather\",\n  \"input\": {\"location\": \"New York, NY\", \"unit\": \"fahrenheit\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Web Search Server Tool Error Codes\nDESCRIPTION: This section lists possible error codes for server-side web search tools. Unlike client tools, these errors are handled transparently by Claude, which attempts to provide an alternative response or explanation to the user without requiring explicit `is_error` handling.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: APIDOC\nCODE:\n```\nPossible error codes for web search:\n- too_many_requests: Rate limit exceeded\n- invalid_input: Invalid search query parameter\n- max_uses_exceeded: Maximum web search tool uses exceeded\n- query_too_long: Query exceeds maximum length\n- unavailable: An internal error occurred\n```\n\n----------------------------------------\n\nTITLE: Handle Action Execution Failure for Claude Tool\nDESCRIPTION: Example JSON structure for reporting a general action execution failure to Claude, providing a descriptive error message when an operation like a click fails.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"role\": \"user\",\n  \"content\": [\n    {\n      \"type\": \"tool_result\",\n      \"tool_use_id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"content\": \"Error: Failed to perform click action. The application may be unresponsive.\",\n      \"is_error\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Claude Tool Use API Request with Image and Schema\nDESCRIPTION: Example JSON payload for making an API request to Claude that includes tool definitions, a tool choice, and a user message with an embedded image. It defines a 'record_summary' tool with a schema for extracting key colors, a general description, and an estimated year from an image.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"tools\": [{\n        \"name\": \"record_summary\",\n        \"description\": \"Record a summary of an image.\",\n        \"input_schema\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"key_colors\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"r\": { \"type\": \"number\", \"description\": \"red value [0.0, 1.0]\" },\n                            \"g\": { \"type\": \"number\", \"description\": \"green value [0.0, 1.0]\" },\n                            \"b\": { \"type\": \"number\", \"description\": \"blue value [0.0, 1.0]\" },\n                            \"name\": { \"type\": \"string\", \"description\": \"Human-readable color name in snake_case, e.g. \\\"olive_green\\\" or \\\"turquoise\\\"\" }\n                        },\n                        \"required\": [ \"r\", \"g\", \"b\", \"name\" ]\n                    },\n                    \"description\": \"Key colors in the image. Limit to less than four.\"\n                },\n                \"description\": {\n                    \"type\": \"string\",\n                    \"description\": \"Image description. One to two sentences max.\"\n                },\n                \"estimated_year\": {\n                    \"type\": \"integer\",\n                    \"description\": \"Estimated year that the image was taken, if it is a photo. Only set this if the image appears to be non-fictional. Rough estimates are okay!\"\n                }\n            },\n            \"required\": [ \"key_colors\", \"description\" ]\n        }\n    }],\n    \"tool_choice\": {\"type\": \"tool\", \"name\": \"record_summary\"},\n    \"messages\": [\n        {\"role\": \"user\", \"content\": [\n            {\"type\": \"image\", \"source\": {\n                \"type\": \"base64\",\n                \"media_type\": \"'$IMAGE_MEDIA_TYPE'\",\n                \"data\": \"'$IMAGE_BASE64'\"\n            }},\n            {\"type\": \"text\", \"text\": \"Describe this image.\"}\n        ]}\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Provide tools to Claude using Messages API (Shell)\nDESCRIPTION: Demonstrates how to define and provide a custom tool (get_weather) to Claude using the Anthropic Messages API via a curl command. The example shows the tool's schema and a user prompt.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n  -H \"content-type: application/json\" \\\n  -H \"x-api-key: $ANTHROPIC_API_KEY\" \\\n  -H \"anthropic-version: 2023-06-01\" \\\n  -d '{\n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"tools\": [\n      {\n        \"name\": \"get_weather\",\n        \"description\": \"Get the current weather in a given location\",\n        \"input_schema\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"location\": {\n              \"type\": \"string\",\n              \"description\": \"The city and state, e.g. San Francisco, CA\"\n            }\n          },\n          \"required\": [\"location\"]\n        }\n      }\n    ],\n    \"messages\": [\n      {\n        \"role\": \"user\",\n        \"content\": \"What is the weather like in San Francisco?\"\n      }\n    ]\n  }'\n```\n\n----------------------------------------\n\nTITLE: Handling `max_tokens` Stop Reason for Incomplete Tool Use\nDESCRIPTION: This code snippet demonstrates how to detect if Claude's response was truncated due to the `max_tokens` limit, specifically when an incomplete `tool_use` block is present. It shows how to retry the API request with an increased `max_tokens` value to get the full tool use instruction.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: Python\nCODE:\n```\n# Check if response was truncated during tool use\nif response.stop_reason == \"max_tokens\":\n    # Check if the last content block is an incomplete tool_use\n    last_block = response.content[-1]\n    if last_block.type == \"tool_use\":\n        # Send the request with higher max_tokens\n        response = client.messages.create(\n            model=\"claude-opus-4-20250514\",\n            max_tokens=4096,  # Increased limit\n            messages=messages,\n            tools=tools\n        )\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Initiate Tool Use with Claude (Multiple Tools)\nDESCRIPTION: Demonstrates how to define multiple tools (get_weather and get_time) in a single request to Claude, allowing the model to select and use the appropriate tool(s) based on the user's query.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --header \"content-type: application/json\" \\\n```\n\nLANGUAGE: Python\nCODE:\n```\n\n```\n\nLANGUAGE: Java\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Define Sequential Tools for Claude API Call (Shell/JSON)\nDESCRIPTION: This snippet provides an example of defining sequential tools for the Anthropic Claude API. It shows how `get_location` can be called first to obtain a user's location, and then that location can be used as input for the `get_weather` tool in a subsequent call, illustrating a multi-step tool execution flow.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --header \"content-type: application/json\" \\\n     --data \\\n'{\n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"tools\": [\n        {\n            \"name\": \"get_location\",\n            \"description\": \"Get the current user location based on their IP address. This tool has no parameters or arguments.\",\n            \"input_schema\": {\n                \"type\": \"object\",\n                \"properties\": {}\n            }\n        },\n        {\n            \"name\": \"get_weather\",\n            \"description\": \"Get the current weather in a given location\",\n            \"input_schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"location\": {\n                        \"type\": \"string\",\n                        \"description\": \"The city and state, e.g. San Francisco, CA\"\n                    },\n                    \"unit\": {\n                        \"type\": \"string\",\n                        \"enum\": [\"celsius\", \"fahrenheit\"],\n                        \"description\": \"The unit of temperature, either 'celsius' or 'fahrenheit'\"\n                    }\n                },\n                \"required\": [\"location\"]\n            }\n        }\n    ],\n    \"messages\": [{\n        \"role\": \"user\",\n        \"content\": \"What is the weather like where I am?\"\n    }]\n}'\n```\n\n----------------------------------------\n\nTITLE: Implement Claude Agent Loop in Python\nDESCRIPTION: Shows a Python agent loop that continuously interacts with Claude, sending messages and processing tool calls until Claude indicates the task is complete or no more tools are used.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: Python\nCODE:\n```\nwhile True:\n    response = client.beta.messages.create(...)\n\n    # Check if Claude used any tools\n    tool_results = process_tool_calls(response)\n\n    if not tool_results:\n        # No more tool use, task complete\n        break\n\n    # Continue conversation with tool results\n    messages.append({\"role\": \"user\", \"content\": tool_results})\n```\n\n----------------------------------------\n\nTITLE: Claude Chain of Thought Prompt for Tool Use\nDESCRIPTION: A recommended prompt for Claude Sonnet and Haiku models to encourage pre-tool call analysis, ensuring tools are used appropriately and preventing calls with missing required parameters. It guides the model to think within `<thinking>` tags before making a tool call.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: Text\nCODE:\n```\nAnswer the user's request using relevant tools (if they are available). Before calling a tool, do some analysis within <thinking></thinking> tags. First, think about which of the provided tools is the relevant tool to answer the user's request. Second, go through each of the required parameters of the relevant tool and determine if the user has directly provided or given enough information to infer a value. When deciding if the parameter can be inferred, carefully consider all the context to see if it supports a specific value. If all of the required parameters are present or can be reasonably inferred, close the thinking tag and proceed with the tool call. BUT, if one of the values for a required parameter is missing, DO NOT invoke the function (not even with fillers for the missing params) and instead, ask the user to provide the missing parameters. DO NOT ask for more information on optional parameters if it is not provided.\n```\n\n----------------------------------------\n\nTITLE: Example Python Code with Syntax Error (primes.py)\nDESCRIPTION: This Python code snippet represents the content of the `primes.py` file, which contains functions for checking prime numbers and generating a list of primes. It includes a deliberate syntax error in the `get_primes` function's for loop, which Claude is designed to fix.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool\n\nLANGUAGE: Python\nCODE:\n```\ndef is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef get_primes(limit):\n    \"\"\"Generate a list of prime numbers up to the given limit.\"\"\"\n    primes = []\n    for num in range(2, limit + 1)\n        if is_prime(num):\n            primes.append(num)\n    return primes\n\ndef main():\n    \"\"\"Main function to demonstrate prime number generation.\"\"\"\n    limit = 100\n    prime_list = get_primes(limit)\n    print(f\"Prime numbers up to {limit}:\")\n    print(prime_list)\n    print(f\"Found {len(prime_list)} prime numbers.\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Understand Claude's tool_choice parameter options\nDESCRIPTION: This API documentation outlines the various options available for Claude's `tool_choice` parameter, which controls how Claude decides to use provided tools. Each option dictates a different behavior, from automatic selection to mandatory tool use or complete prevention of tool calls.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: APIDOC\nCODE:\n```\ntool_choice parameter options:\n  - auto: Allows Claude to decide whether to call any provided tools or not. (Default when tools are provided)\n  - any: Tells Claude that it must use one of the provided tools, but doesn’t force a particular tool.\n  - tool: Forces Claude to always use a particular tool.\n  - none: Prevents Claude from using any tools. (Default when no tools are provided)\n```\n\n----------------------------------------\n\nTITLE: API Parameter: Tool Choice Type\nDESCRIPTION: Specifies the type of tool choice strategy. Currently, only `auto` is an available option.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages\n\nLANGUAGE: APIDOC\nCODE:\n```\ntool_choice.type\n\nenum<string>\n\nrequired\n\nAvailable options:\n\n`auto`\n```\n\n----------------------------------------\n\nTITLE: API Parameter: Tool Choice Strategy\nDESCRIPTION: Defines how the model should use provided tools. Options include using a specific tool, any tool, deciding itself, or not using tools at all.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages\n\nLANGUAGE: APIDOC\nCODE:\n```\ntool_choice\n\nobject\n\nHow the model should use the provided tools. The model can use a specific tool, any available tool, decide by itself, or not use tools at all.\n\n* Auto\n* Any\n* Tool\n* None\n\nShow child attributes\n```\n\n----------------------------------------\n\nTITLE: Validate Claude Actions in Python\nDESCRIPTION: Python function to validate parameters of requested actions, such as checking if coordinates are within display bounds, before execution to prevent errors.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: Python\nCODE:\n```\ndef validate_action(action_type, params):\n    if action_type == \"left_click\":\n        x, y = params.get(\"coordinate\", (0, 0))\n        if not (0 <= x < display_width and 0 <= y < display_height):\n            return False, \"Coordinates out of bounds\"\n    return True, None\n```\n\n----------------------------------------\n\nTITLE: Make Streaming API Request to Claude with Tool Use\nDESCRIPTION: This `curl` command demonstrates how to send a streaming API request to the Anthropic Claude model. It defines a `get_weather` tool with a `location` parameter and instructs Claude to use this tool to find the weather in San Francisco, showcasing the beta feature of fine-grained streaming for tool parameter values.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/streaming\n\nLANGUAGE: Shell\nCODE:\n```\n  curl https://api.anthropic.com/v1/messages \\\n    -H \"content-type: application/json\" \\\n    -H \"x-api-key: $ANTHROPIC_API_KEY\" \\\n    -H \"anthropic-version: 2023-06-01\" \\\n    -d '{\n      \"model\": \"claude-opus-4-20250514\",\n      \"max_tokens\": 1024,\n      \"tools\": [\n        {\n          \"name\": \"get_weather\",\n          \"description\": \"Get the current weather in a given location\",\n          \"input_schema\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"location\": {\n                \"type\": \"string\",\n                \"description\": \"The city and state, e.g. San Francisco, CA\"\n              }\n            },\n            \"required\": [\"location\"]\n          }\n        }\n      ],\n      \"tool_choice\": {\"type\": \"any\"},\n      \"messages\": [\n        {\n          \"role\": \"user\",\n          \"content\": \"What is the weather like in San Francisco?\"\n        }\n      ],\n      \"stream\": true\n    }'\n```\n\n----------------------------------------\n\nTITLE: Claude Tool Use for Structured JSON Output (Shell)\nDESCRIPTION: Demonstrates how to configure Claude to produce structured JSON output using a single tool (`record_summary`) and the `tool_choice` parameter. This example shows a `curl` command to interact with the Anthropic API, passing an image and the tool definition.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: Shell\nCODE:\n```\n#!/bin/bash\nIMAGE_URL=\"https://upload.wikimedia.org/wikipedia/commons/a/a7/Camponotus_flavomarginatus_ant.jpg\"\nIMAGE_MEDIA_TYPE=\"image/jpeg\"\nIMAGE_BASE64=$(curl \"$IMAGE_URL\" | base64)\n\ncurl https://api.anthropic.com/v1/messages \\\n     --header \"content-type: application/json\" \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --data \\\n'{\n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"tools\": [{\n        \"name\": \"record_summary\",\n        \"description\": \"Record summary of an image using well-structured JSON.\",\n        \"input_schema\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"key_colors\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"r\": { \"type\": \"number\", \"description\": \"red value [0.0, 1.0]\" },\n                            \"g\": { \"type\": \"number\", \"description\": \"green value [0.0, 1.0]\" },\n```\n\n----------------------------------------\n\nTITLE: API Reference: tools.name\nDESCRIPTION: Defines the `name` property for a tool, which is used by the model to call the tool and appears in `tool_use` blocks. It is a required string with a length constraint.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages\n\nLANGUAGE: APIDOC\nCODE:\n```\ntools.name:\n  Type: string\n  Required: true\n  Description: Name of the tool. This is how the tool will be called by the model and in `tool_use` blocks.\n  Required string length: 1 - 64\n```\n\n----------------------------------------\n\nTITLE: Define a good tool description for Claude\nDESCRIPTION: This example demonstrates a well-structured and detailed tool definition for Claude. It includes a comprehensive description of the tool's purpose, usage conditions, parameter meanings, and limitations, which is crucial for Claude's effective tool selection and execution.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"get_stock_price\",\n  \"description\": \"Retrieves the current stock price for a given ticker symbol. The ticker symbol must be a valid symbol for a publicly traded company on a major US stock exchange like NYSE or NASDAQ. The tool will return the latest trade price in USD. It should be used when the user asks about the current or most recent price of a specific stock. It will not provide any other information about the stock or company.\",\n  \"input_schema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"ticker\": {\n        \"type\": \"string\",\n        \"description\": \"The stock ticker symbol, e.g. AAPL for Apple Inc.\"\n      }\n    },\n    \"required\": [\"ticker\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Application Applies Code Fix and Returns Tool Result\nDESCRIPTION: This snippet shows how an application integrates with Claude's tool use. After receiving Claude's `tool_use` message, the application executes the `str_replace` command and then sends a `tool_result` message back to Claude, confirming the successful text replacement.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool\n\nLANGUAGE: Python\nCODE:\n```\nresponse = client.messages.create(\n    model=\"claude-opus-4-20250514\",\n    max_tokens=1024,\n    tools=[\n        {\n            \"type\": \"text_editor_20250429\",\n            \"name\": \"str_replace_based_edit_tool\"\n        }\n    ],\n    messages=[\n        # Previous messages...\n        {\n            \"role\": \"assistant\",\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": \"I found the syntax error in your primes.py file. In the `get_primes` function, there is a missing colon (:) at the end of the for loop line. Let me fix that for you.\"\n                },\n                {\n                    \"type\": \"tool_use\",\n                    \"id\": \"toolu_01PqRsTuVwXyZAbCdEfGh\",\n                    \"name\": \"str_replace_based_edit_tool\",\n                    \"input\": {\n                        \"command\": \"str_replace\",\n                        \"path\": \"primes.py\",\n                        \"old_str\": \"    for num in range(2, limit + 1)\",\n                        \"new_str\": \"    for num in range(2, limit + 1):\"\n                    }\n                }\n            ]\n        },\n        {\n            \"role\": \"user\",\n            \"content\": [\n                {\n                    \"type\": \"tool_result\",\n                    \"tool_use_id\": \"toolu_01PqRsTuVwXyZAbCdEfGh\",\n                    \"content\": \"Successfully replaced text at exactly one location.\"\n                }\n            ]\n        }\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Claude Model Tool Result Response Example\nDESCRIPTION: Illustrates the JSON structure for returning the result of a tool execution back to the Claude model in a subsequent user message, linking the result to the original `tool_use_id`.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"type\": \"tool_result\",\n    \"tool_use_id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n    \"content\": \"259.75 USD\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Anthropic Claude API Response with Tool Use Block\nDESCRIPTION: This JSON example illustrates an API response from Claude where the `stop_reason` is `tool_use`. It includes a `tool_use` content block detailing the tool's `id`, `name`, and `input` parameters, indicating that Claude intends to use a client-side tool.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"id\": \"msg_01Aq9w938a90dw8q\",\n  \"model\": \"claude-opus-4-20250514\",\n  \"stop_reason\": \"tool_use\",\n  \"role\": \"assistant\",\n  \"content\": [\n    {\n      \"type\": \"text\",\n      \"text\": \"<thinking>I need to use the get_weather, and the user wants SF, which is likely San Francisco, CA.</thinking>\"\n    },\n    {\n      \"type\": \"tool_use\",\n      \"id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"name\": \"get_weather\",\n      \"input\": {\"location\": \"San Francisco, CA\", \"unit\": \"celsius\"}\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Making a Claude API Request with Web Search and Cache Control\nDESCRIPTION: This Python snippet demonstrates how to append messages to a conversation, make a Claude API request using the 'web_search_20250305' tool, and apply 'cache_control' to manage caching behavior. It includes specifying user location for relevant search results and shows how to access cache read tokens from the response.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/web-search-tool\n\nLANGUAGE: Python\nCODE:\n```\nmessages.append({\n    \"role\": \"assistant\",\n    \"content\": response1.content\n})\n\n# Second request with cache breakpoint after the search results\nmessages.append({\n    \"role\": \"user\",\n    \"content\": \"Should I expect rain later this week?\",\n    \"cache_control\": {\"type\": \"ephemeral\"}  # Cache up to this point\n})\n\nresponse2 = client.messages.create(\n    model=\"claude-opus-4-20250514\",\n    max_tokens=1024,\n    messages=messages,\n    tools=[{\n        \"type\": \"web_search_20250305\",\n        \"name\": \"web_search\",\n        \"user_location\": {\n            \"type\": \"approximate\",\n            \"city\": \"San Francisco\",\n            \"region\": \"California\",\n            \"country\": \"US\",\n            \"timezone\": \"America/Los_Angeles\"\n        }\n    }]\n)\n# The second response will benefit from cached search results\n# while still being able to perform new searches if needed\nprint(f\"Cache read tokens: {response2.usage.get('cache_read_input_tokens', 0)}\")\n```\n\n----------------------------------------\n\nTITLE: Handle Invalid Tool Use or Missing Parameters with Claude\nDESCRIPTION: If Claude attempts to use a tool with invalid or missing required parameters, provide a `tool_result` indicating the specific error. Claude will then attempt to retry the tool use, incorporating the missing information, before apologizing to the user after 2-3 retries.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"role\": \"user\",\n  \"content\": [\n    {\n      \"type\": \"tool_result\",\n      \"tool_use_id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"content\": \"Error: Missing required 'location' parameter\",\n      \"is_error\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Claude's Chain of Thought JSON Response\nDESCRIPTION: This JSON snippet demonstrates how Claude Opus 3 model expresses its internal reasoning process (chain of thought) when `tool_choice` is set to `auto`. It shows a `text` content block containing the thinking process and a `tool_use` content block for calling the `get_weather` tool, illustrating a multi-step plan to answer a user query.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"role\": \"assistant\",\n  \"content\": [\n    {\n      \"type\": \"text\",\n      \"text\": \"<thinking>To answer this question, I will: 1. Use the get_weather tool to get the current weather in San Francisco. 2. Use the get_time tool to get the current time in the America/Los_Angeles timezone, which covers San Francisco, CA.</thinking>\"\n    },\n    {\n      \"type\": \"tool_use\",\n      \"id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"name\": \"get_weather\",\n      \"input\": {\"location\": \"San Francisco, CA\"}\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Log Claude Tool Actions in Python\nDESCRIPTION: Python function demonstrating how to log details of executed actions, including type, parameters, and results, for debugging and monitoring purposes.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: Python\nCODE:\n```\nimport logging\n\ndef log_action(action_type, params, result):\n    logging.info(f\"Action: {action_type}, Params: {params}, Result: {result}\")\n```\n\n----------------------------------------\n\nTITLE: Initiate Tool Use with Claude (Single Tool)\nDESCRIPTION: Send an initial message to Claude, defining a single tool (get_weather) and posing a user query. Claude is expected to respond by indicating its intent to use the tool.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --header \"content-type: application/json\" \\\n     --data \\\n'{\n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"tools\": [{\n        \"name\": \"get_weather\",\n        \"description\": \"Get the current weather in a given location\",\n        \"input_schema\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"location\": {\n                    \"type\": \"string\",\n                    \"description\": \"The city and state, e.g. San Francisco, CA\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"enum\": [\"celsius\", \"fahrenheit\"],\n                    \"description\": \"The unit of temperature, either \\\"celsius\\\" or \\\"fahrenheit\\\"\"\n                }\n            },\n            \"required\": [\"location\"]\n        }\n    }],\n    \"messages\": [{\"role\": \"user\", \"content\": \"What is the weather like in San Francisco?\"}]\n}'\n```\n\nLANGUAGE: Python\nCODE:\n```\n\n```\n\nLANGUAGE: Java\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Provide Tool Result to Claude (Single Tool)\nDESCRIPTION: After executing the tool identified by Claude, send a follow-up message back to Claude containing the tool_result. This allows Claude to continue the conversation with the tool's output.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --header \"content-type: application/json\" \\\n     --data \\\n'{\n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"tools\": [\n        {\n            \"name\": \"get_weather\",\n            \"description\": \"Get the current weather in a given location\",\n            \"input_schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"location\": {\n                        \"type\": \"string\",\n                        \"description\": \"The city and state, e.g. San Francisco, CA\"\n                    },\n                    \"unit\": {\n                        \"type\": \"string\",\n                        \"enum\": [\"celsius\", \"fahrenheit\"],\n                        \"description\": \"The unit of temperature, either \\\"celsius\\\" or \\\"fahrenheit\\\"\"\n                    }\n                },\n                \"required\": [\"location\"]\n            }\n        }\n    ],\n    \"messages\": [\n        {\n            \"role\": \"user\",\n            \"content\": \"What is the weather like in San Francisco?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": \"<thinking>I need to use get_weather, and the user wants SF, which is likely San Francisco, CA.</thinking>\"\n                },\n                {\n                    \"type\": \"tool_use\",\n                    \"id\": \"toolu_01A09q90qw90lq917835lq9\",\n                    \"name\": \"get_weather\",\n                    \"input\": {\n                        \"location\": \"San Francisco, CA\",\n                        \"unit\": \"celsius\"\n                    }\n                }\n            ]\n        },\n        {\n            \"role\": \"user\",\n            \"content\": [\n                {\n                    \"type\": \"tool_result\",\n                    \"tool_use_id\": \"toolu_01A09q90qw90lq917835lq9\",\n                    \"content\": \"15 degrees\"\n                }\n            ]\n        }\n    ]\n}'\n```\n\nLANGUAGE: Python\nCODE:\n```\n\n```\n\nLANGUAGE: Java\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: cURL Request to List Anthropic Models\nDESCRIPTION: Example cURL command to retrieve a list of available models from the Anthropic API. It includes necessary headers for authentication using an API key and specifying the API version.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/models-list\n\nLANGUAGE: cURL\nCODE:\n```\ncurl https://api.anthropic.com/v1/models \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\"\n```\n\n----------------------------------------\n\nTITLE: Claude Proposes Syntax Error Fix using str_replace Tool\nDESCRIPTION: This JSON snippet demonstrates Claude's response after identifying the syntax error. It uses the `str_replace_based_edit_tool` with the `str_replace` command to specify the exact string to be replaced (`old_str`) and its corrected version (`new_str`) in the `primes.py` file.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool\n\nLANGUAGE: APIDOC\nCODE:\n```\n{\n  \"id\": \"msg_01VwXyZAbCdEfGhIjKlMnO\",\n  \"model\": \"claude-opus-4-20250514\",\n  \"stop_reason\": \"tool_use\",\n  \"role\": \"assistant\",\n  \"content\": [\n    {\n      \"type\": \"text\",\n      \"text\": \"I found the syntax error in your primes.py file. In the `get_primes` function, there is a missing colon (:) at the end of the for loop line. Let me fix that for you.\"\n    },\n    {\n      \"type\": \"tool_use\",\n      \"id\": \"toolu_01PqRsTuVwXyZAbCdEfGh\",\n      \"name\": \"str_replace_based_edit_tool\",\n      \"input\": {\n        \"command\": \"str_replace\",\n        \"path\": \"primes.py\",\n        \"old_str\": \"    for num in range(2, limit + 1)\",\n        \"new_str\": \"    for num in range(2, limit + 1):\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Handle Claude Computer Actions with Python\nDESCRIPTION: Defines a Python function to dispatch various computer actions requested by Claude, such as screenshot capture, mouse clicks, and text typing, based on the action type and provided parameters.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: Python\nCODE:\n```\ndef handle_computer_action(action_type, params):\n    if action_type == \"screenshot\":\n        return capture_screenshot()\n    elif action_type == \"left_click\":\n        x, y = params[\"coordinate\"]\n        return click_at(x, y)\n    elif action_type == \"type\":\n        return type_text(params[\"text\"])\n    # ... handle other actions\n```\n\n----------------------------------------\n\nTITLE: API Reference: tools.type\nDESCRIPTION: Defines the type of the tool, with 'custom' as an available option.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages\n\nLANGUAGE: APIDOC\nCODE:\n```\ntools.type:\n  Type: enum<string> | null\n  Available options: custom\n```\n\n----------------------------------------\n\nTITLE: Anthropic Claude Tool Definitions (APIDOC)\nDESCRIPTION: This section documents the structure for defining tools that can be used with Anthropic's Claude API. It includes examples of `get_weather`, `get_time`, and `get_location` tools, detailing their names, descriptions, and input schemas with parameter types, descriptions, and required fields.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: APIDOC\nCODE:\n```\nTool: get_weather\n  Description: Get the current weather in a given location\n  Input Schema:\n    type: object\n    properties:\n      location:\n        type: string\n        description: The city and state, e.g. San Francisco, CA\n      unit:\n        type: string\n        enum: [\"celsius\", \"fahrenheit\"]\n        description: The unit of temperature, either 'celsius' or 'fahrenheit'\n    required: [\"location\"]\n\nTool: get_time\n  Description: Get the current time in a given time zone\n  Input Schema:\n    type: object\n    properties:\n      timezone:\n        type: string\n        description: The IANA time zone name, e.g. America/Los_Angeles\n    required: [\"timezone\"]\n\nTool: get_location\n  Description: Get the current user location based on their IP address. This tool has no parameters or arguments.\n  Input Schema:\n    type: object\n    properties: {}\n```\n\n----------------------------------------\n\nTITLE: Force Claude to use a specific tool with tool_choice\nDESCRIPTION: This snippet shows how to explicitly instruct Claude to use a particular tool by setting the `tool_choice` parameter. This is useful when you want to ensure a specific tool is invoked regardless of Claude's internal reasoning.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: Python\nCODE:\n```\ntool_choice = {\"type\": \"tool\", \"name\": \"get_weather\"}\n```\n\n----------------------------------------\n\nTITLE: Define Multiple Tools for Claude API Call (Shell/JSON)\nDESCRIPTION: This snippet shows an example of defining two independent tools, `get_weather` and `get_time`, within a single Anthropic Claude API request. It illustrates how Claude can use these tools, potentially in parallel or sequentially, to answer a user's query that requires information from both.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --header \"content-type: application/json\" \\\n     --data \\\n'{\n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"tools\": [{\n        \"name\": \"get_weather\",\n        \"description\": \"Get the current weather in a given location\",\n        \"input_schema\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"location\": {\n                    \"type\": \"string\",\n                    \"description\": \"The city and state, e.g. San Francisco, CA\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"enum\": [\"celsius\", \"fahrenheit\"],\n                    \"description\": \"The unit of temperature, either 'celsius' or 'fahrenheit'\"\n                }\n            },\n            \"required\": [\"location\"]\n        }\n    },\n    {\n        \"name\": \"get_time\",\n        \"description\": \"Get the current time in a given time zone\",\n        \"input_schema\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"timezone\": {\n                    \"type\": \"string\",\n                    \"description\": \"The IANA time zone name, e.g. America/Los_Angeles\"\n                }\n            },\n            \"required\": [\"timezone\"]\n        }\n    }],\n    \"messages\": [{\n        \"role\": \"user\",\n        \"content\": \"What is the weather like right now in New York? Also what time is it there?\"\n    }]\n}'\n```\n\n----------------------------------------\n\nTITLE: API Parameter: Tool Definitions\nDESCRIPTION: Defines tools the model may use. Includes `name`, `description`, and `input_schema`. Model may return `tool_use` blocks, which can be run and results returned via `tool_result` blocks. Supports client and server tools.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages\n\nLANGUAGE: APIDOC\nCODE:\n```\ntools\n\nobject[]\n\nDefinitions of tools that the model may use.\n\nIf you include `tools` in your API request, the model may return `tool_use` content blocks that represent the model's use of those tools. You can then run those tools using the tool input generated by the model and then optionally return results back to the model using `tool_result` content blocks.\n\nThere are two types of tools: **client tools** and **server tools**. The behavior described below applies to client tools. For [server tools](https://docs.anthropic.com/en/docs/agents-and-tools/tool-use/overview#server-tools), see their individual documentation as each has its own behavior (e.g., the [web search tool](https://docs.anthropic.com/en/docs/agents-and-tools/tool-use/web-search-tool)).\n\nEach tool definition includes:\n\n* `name`: Name of the tool.\n* `description`: Optional, but strongly-recommended description of the tool.\n* `input_schema`: [JSON schema](https://json-schema.org/draft/2020-12) for the tool `input` shape that the model will produce in `tool_use` output content blocks.\n```\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  {\n    \"name\": \"get_stock_price\",\n    \"description\": \"Get the current stock price for a given ticker symbol.\",\n    \"input_schema\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"ticker\": {\n          \"type\": \"string\",\n          \"description\": \"The stock ticker symbol, e.g. AAPL for Apple Inc.\"\n        }\n      },\n      \"required\": [\"ticker\"]\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: cURL Example to List Anthropic Models\nDESCRIPTION: Demonstrates how to make a cURL request to the Anthropic API to list available models, including required headers for authentication and API version.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/models-list\n\nLANGUAGE: cURL\nCODE:\n```\ncurl https://api.anthropic.com/v1/models \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\"\n```\n\n----------------------------------------\n\nTITLE: Handle Multiple Matches for Text Replacement in Claude Tool Result\nDESCRIPTION: If Claude's `str_replace` command finds multiple occurrences of the target text, return this JSON structure. The error message guides Claude to provide more context for a unique match.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"role\": \"user\",\n  \"content\": [\n    {\n      \"type\": \"tool_result\",\n      \"tool_use_id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"content\": \"Error: Found 3 matches for replacement text. Please provide more context to make a unique match.\",\n      \"is_error\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Anthropic Claude Computer Use Tool: Available Actions\nDESCRIPTION: Lists all supported actions for the Anthropic Claude computer use tool, categorized into basic and enhanced versions, detailing their purpose.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: APIDOC\nCODE:\n```\nActions:\n  Basic actions (all versions):\n    screenshot: Capture the current display\n    left_click: Click at coordinates [x, y]\n    type: Type text string\n    key: Press key or key combination (e.g., “ctrl+s”)\n    mouse_move: Move cursor to coordinates\n  Enhanced actions (computer_20250124):\n    scroll: Scroll in any direction with amount control\n    left_click_drag: Click and drag between coordinates\n    right_click: Additional mouse button\n    middle_click: Additional mouse button\n    double_click: Multiple clicks\n    triple_click: Multiple clicks\n    left_mouse_down: Fine-grained click control\n    left_mouse_up: Fine-grained click control\n    hold_key: Hold a key while performing other actions\n    wait: Pause between actions\n```\n\n----------------------------------------\n\nTITLE: Anthropic Claude API: Tool Role Message Fields\nDESCRIPTION: Details the fields available for messages with the 'tool' role in the Anthropic Claude API. This includes content variations (string, array with text type), tool_call_id, tool_choice, and name fields.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/openai-sdk\n\nLANGUAGE: APIDOC\nCODE:\n```\n| Field         | Variant                  | Support status |\n| ------------- | ------------------------ | -------------- |\n| `content`     | `string`                 | Fully supported|\n| `content`     | `array`, `type == \"text\"` | Fully supported|\n| `tool_call_id`| N/A                      | Fully supported|\n| `tool_choice` | N/A                      | Fully supported|\n| `name`        | N/A                      | Ignored        |\n```\n\n----------------------------------------\n\nTITLE: Send Message with Multiple Cache Breakpoints and Tools (cURL)\nDESCRIPTION: This example illustrates how to combine prompt caching with tool definitions and system messages in a single API call. It shows how to define multiple tools with their input schemas and how to apply `cache_control` to both tools and system messages, enabling more granular control over caching behavior for complex interactions.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/prompt-caching\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --header \"content-type: application/json\" \\\n     --data \\\n'{ \n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"tools\": [\n        {\n            \"name\": \"search_documents\",\n            \"description\": \"Search through the knowledge base\",\n            \"input_schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"query\": {\n                        \"type\": \"string\",\n                        \"description\": \"Search query\"\n                    }\n                },\n                \"required\": [\"query\"]\n            }\n        },\n        {\n            \"name\": \"get_document\",\n            \"description\": \"Retrieve a specific document by ID\",\n            \"input_schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"doc_id\": {\n                        \"type\": \"string\",\n                        \"description\": \"Document ID\"\n                    }\n                },\n                \"required\": [\"doc_id\"]\n            },\n            \"cache_control\": {\"type\": \"ephemeral\"}\n        }\n    ],\n    \"system\": [\n        {\n            \"type\": \"text\",\n            \"text\": \"You are a helpful research assistant with access to a document knowledge base.\\n\\n# Instructions\\n- Always search for relevant documents before answering\\n- Provide citations for your sources\\n- Be objective and accurate in your responses\\n- If multiple documents contain relevant information, synthesize them\\n- Acknowledge when information is not available in the knowledge base\",\n            \"cache_control\": {\"type\": \"ephemeral\"}\n        },\n        {\n            \"type\": \"text\",\n```\n\n----------------------------------------\n\nTITLE: Sending Client Tool Result with Images to Claude\nDESCRIPTION: This JSON example shows how to return a `tool_result` to Claude that includes both text and image content. The `content` field is an array of content blocks, allowing for rich media results from client-side tools, with images encoded in base64.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"role\": \"user\",\n  \"content\": [\n    {\n      \"type\": \"tool_result\",\n      \"tool_use_id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"content\": [\n        {\"type\": \"text\", \"text\": \"15 degrees\"},\n        {\n          \"type\": \"image\",\n          \"source\": {\n            \"type\": \"base64\",\n            \"media_type\": \"image/jpeg\",\n            \"data\": \"/9j/4AAQSkZJRg...\"\n          }\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Successful Client Tool Result to Claude\nDESCRIPTION: This JSON example demonstrates how to send a successful `tool_result` message back to Claude after a client-side tool has been executed. It includes the `tool_use_id` to link to the original request and the tool's output as a simple string `content`.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"role\": \"user\",\n  \"content\": [\n    {\n      \"type\": \"tool_result\",\n      \"tool_use_id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"content\": \"15 degrees\"\n    }\n  ]\n}\n```"}]}]},"uuid":"d2d16b23-fcf1-460d-90a0-5b4b9742cf8b","timestamp":"2025-08-10T04:14:42.130Z","toolUseResult":[{"type":"text","text":"========================\nCODE SNIPPETS\n========================\nTITLE: Handle Invalid Coordinates Error for Claude Tool\nDESCRIPTION: Example JSON structure for informing Claude about invalid coordinates provided for an action, specifying the out-of-bounds coordinates and display limits.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"role\": \"user\",\n  \"content\": [\n    {\n      \"type\": \"tool_result\",\n      \"tool_use_id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"content\": \"Error: Coordinates (1200, 900) are outside display bounds (1024x768).\",\n      \"is_error\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Define a poor tool description for Claude\nDESCRIPTION: This example illustrates an ineffective tool definition due to its overly brief and vague description. Such a definition provides insufficient context for Claude, leading to potential misinterpretations or incorrect tool usage.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"get_stock_price\",\n  \"description\": \"Gets the stock price for a ticker.\",\n  \"input_schema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"ticker\": {\n        \"type\": \"string\"\n      }\n    },\n    \"required\": [\"ticker\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Payloads for Claude Computer Use Actions\nDESCRIPTION: Provides concrete JSON examples for invoking various actions supported by the Anthropic Claude computer use tool, demonstrating the required structure and parameters for screenshot, left_click, type, and scroll.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"action\": \"screenshot\"\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"action\": \"left_click\",\n  \"coordinate\": [500, 300]\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"action\": \"type\",\n  \"text\": \"Hello, world!\"\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"action\": \"scroll\",\n  \"coordinate\": [500, 400],\n  \"scroll_direction\": \"down\",\n  \"scroll_amount\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Claude Multi-Tool Chaining Dialogue Example\nDESCRIPTION: Illustrates a multi-turn conversation where Claude chains `get_location` and `get_weather` tool calls to answer a user's query, demonstrating the flow of information and tool result integration into a natural language response.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: Dialogue\nCODE:\n```\n| --- | --- |\n| User | What’s the weather like where I am? |\n| Assistant | <thinking>To answer this, I first need to determine the user’s location using the get_location tool. Then I can pass that location to the get_weather tool to find the current weather there.</thinking>[Tool use for get_location] |\n| User | [Tool result for get_location with matching id and result of San Francisco, CA] |\n| Assistant | [Tool use for get_weather with the following input]{ “location”: “San Francisco, CA”, “unit”: “fahrenheit” } |\n| User | [Tool result for get_weather with matching id and result of “59°F (15°C), mostly cloudy”] |\n| Assistant | Based on your current location in San Francisco, CA, the weather right now is 59°F (15°C) and mostly cloudy. It’s a fairly cool and overcast day in the city. You may want to bring a light jacket if you’re heading outside. |\n```\n\n----------------------------------------\n\nTITLE: Integrate Web Search Tool with Claude API using cURL\nDESCRIPTION: Demonstrates how to make an API request to Claude with the web search tool enabled. This example shows a user message asking about TypeScript updates and includes the `web_search_20250305` tool in the request payload, limiting its uses to 5.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/web-search-tool\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n    --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n    --header \"anthropic-version: 2023-06-01\" \\\n    --header \"content-type: application/json\" \\\n    --data '{\n        \"model\": \"claude-opus-4-20250514\",\n        \"max_tokens\": 1024,\n        \"messages\": [\n            {\n                \"role\": \"user\",\n                \"content\": \"How do I update a web app to TypeScript 5.5?\"\n            }\n        ],\n        \"tools\": [{\n            \"type\": \"web_search_20250305\",\n            \"name\": \"web_search\",\n            \"max_uses\": 5\n        }]\n    }'\n```\n\n----------------------------------------\n\nTITLE: Claude Tool Use Output with Inferred Parameters (JSON)\nDESCRIPTION: This JSON snippet demonstrates a `tool_use` block returned by Claude when it attempts to infer missing required parameters for a tool call. In this example, Claude infers 'New York, NY' and 'fahrenheit' for the `get_weather` tool, even if the user prompt didn't explicitly provide them.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"type\": \"tool_use\",\n  \"id\": \"toolu_01A09q90qw90lq917835lq9\",\n  \"name\": \"get_weather\",\n  \"input\": {\"location\": \"New York, NY\", \"unit\": \"fahrenheit\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Web Search Server Tool Error Codes\nDESCRIPTION: This section lists possible error codes for server-side web search tools. Unlike client tools, these errors are handled transparently by Claude, which attempts to provide an alternative response or explanation to the user without requiring explicit `is_error` handling.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: APIDOC\nCODE:\n```\nPossible error codes for web search:\n- too_many_requests: Rate limit exceeded\n- invalid_input: Invalid search query parameter\n- max_uses_exceeded: Maximum web search tool uses exceeded\n- query_too_long: Query exceeds maximum length\n- unavailable: An internal error occurred\n```\n\n----------------------------------------\n\nTITLE: Handle Action Execution Failure for Claude Tool\nDESCRIPTION: Example JSON structure for reporting a general action execution failure to Claude, providing a descriptive error message when an operation like a click fails.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"role\": \"user\",\n  \"content\": [\n    {\n      \"type\": \"tool_result\",\n      \"tool_use_id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"content\": \"Error: Failed to perform click action. The application may be unresponsive.\",\n      \"is_error\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Claude Tool Use API Request with Image and Schema\nDESCRIPTION: Example JSON payload for making an API request to Claude that includes tool definitions, a tool choice, and a user message with an embedded image. It defines a 'record_summary' tool with a schema for extracting key colors, a general description, and an estimated year from an image.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"tools\": [{\n        \"name\": \"record_summary\",\n        \"description\": \"Record a summary of an image.\",\n        \"input_schema\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"key_colors\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"r\": { \"type\": \"number\", \"description\": \"red value [0.0, 1.0]\" },\n                            \"g\": { \"type\": \"number\", \"description\": \"green value [0.0, 1.0]\" },\n                            \"b\": { \"type\": \"number\", \"description\": \"blue value [0.0, 1.0]\" },\n                            \"name\": { \"type\": \"string\", \"description\": \"Human-readable color name in snake_case, e.g. \\\"olive_green\\\" or \\\"turquoise\\\"\" }\n                        },\n                        \"required\": [ \"r\", \"g\", \"b\", \"name\" ]\n                    },\n                    \"description\": \"Key colors in the image. Limit to less than four.\"\n                },\n                \"description\": {\n                    \"type\": \"string\",\n                    \"description\": \"Image description. One to two sentences max.\"\n                },\n                \"estimated_year\": {\n                    \"type\": \"integer\",\n                    \"description\": \"Estimated year that the image was taken, if it is a photo. Only set this if the image appears to be non-fictional. Rough estimates are okay!\"\n                }\n            },\n            \"required\": [ \"key_colors\", \"description\" ]\n        }\n    }],\n    \"tool_choice\": {\"type\": \"tool\", \"name\": \"record_summary\"},\n    \"messages\": [\n        {\"role\": \"user\", \"content\": [\n            {\"type\": \"image\", \"source\": {\n                \"type\": \"base64\",\n                \"media_type\": \"'$IMAGE_MEDIA_TYPE'\",\n                \"data\": \"'$IMAGE_BASE64'\"\n            }},\n            {\"type\": \"text\", \"text\": \"Describe this image.\"}\n        ]}\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Provide tools to Claude using Messages API (Shell)\nDESCRIPTION: Demonstrates how to define and provide a custom tool (get_weather) to Claude using the Anthropic Messages API via a curl command. The example shows the tool's schema and a user prompt.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n  -H \"content-type: application/json\" \\\n  -H \"x-api-key: $ANTHROPIC_API_KEY\" \\\n  -H \"anthropic-version: 2023-06-01\" \\\n  -d '{\n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"tools\": [\n      {\n        \"name\": \"get_weather\",\n        \"description\": \"Get the current weather in a given location\",\n        \"input_schema\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"location\": {\n              \"type\": \"string\",\n              \"description\": \"The city and state, e.g. San Francisco, CA\"\n            }\n          },\n          \"required\": [\"location\"]\n        }\n      }\n    ],\n    \"messages\": [\n      {\n        \"role\": \"user\",\n        \"content\": \"What is the weather like in San Francisco?\"\n      }\n    ]\n  }'\n```\n\n----------------------------------------\n\nTITLE: Handling `max_tokens` Stop Reason for Incomplete Tool Use\nDESCRIPTION: This code snippet demonstrates how to detect if Claude's response was truncated due to the `max_tokens` limit, specifically when an incomplete `tool_use` block is present. It shows how to retry the API request with an increased `max_tokens` value to get the full tool use instruction.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: Python\nCODE:\n```\n# Check if response was truncated during tool use\nif response.stop_reason == \"max_tokens\":\n    # Check if the last content block is an incomplete tool_use\n    last_block = response.content[-1]\n    if last_block.type == \"tool_use\":\n        # Send the request with higher max_tokens\n        response = client.messages.create(\n            model=\"claude-opus-4-20250514\",\n            max_tokens=4096,  # Increased limit\n            messages=messages,\n            tools=tools\n        )\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Initiate Tool Use with Claude (Multiple Tools)\nDESCRIPTION: Demonstrates how to define multiple tools (get_weather and get_time) in a single request to Claude, allowing the model to select and use the appropriate tool(s) based on the user's query.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --header \"content-type: application/json\" \\\n```\n\nLANGUAGE: Python\nCODE:\n```\n\n```\n\nLANGUAGE: Java\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Define Sequential Tools for Claude API Call (Shell/JSON)\nDESCRIPTION: This snippet provides an example of defining sequential tools for the Anthropic Claude API. It shows how `get_location` can be called first to obtain a user's location, and then that location can be used as input for the `get_weather` tool in a subsequent call, illustrating a multi-step tool execution flow.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --header \"content-type: application/json\" \\\n     --data \\\n'{\n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"tools\": [\n        {\n            \"name\": \"get_location\",\n            \"description\": \"Get the current user location based on their IP address. This tool has no parameters or arguments.\",\n            \"input_schema\": {\n                \"type\": \"object\",\n                \"properties\": {}\n            }\n        },\n        {\n            \"name\": \"get_weather\",\n            \"description\": \"Get the current weather in a given location\",\n            \"input_schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"location\": {\n                        \"type\": \"string\",\n                        \"description\": \"The city and state, e.g. San Francisco, CA\"\n                    },\n                    \"unit\": {\n                        \"type\": \"string\",\n                        \"enum\": [\"celsius\", \"fahrenheit\"],\n                        \"description\": \"The unit of temperature, either 'celsius' or 'fahrenheit'\"\n                    }\n                },\n                \"required\": [\"location\"]\n            }\n        }\n    ],\n    \"messages\": [{\n        \"role\": \"user\",\n        \"content\": \"What is the weather like where I am?\"\n    }]\n}'\n```\n\n----------------------------------------\n\nTITLE: Implement Claude Agent Loop in Python\nDESCRIPTION: Shows a Python agent loop that continuously interacts with Claude, sending messages and processing tool calls until Claude indicates the task is complete or no more tools are used.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: Python\nCODE:\n```\nwhile True:\n    response = client.beta.messages.create(...)\n\n    # Check if Claude used any tools\n    tool_results = process_tool_calls(response)\n\n    if not tool_results:\n        # No more tool use, task complete\n        break\n\n    # Continue conversation with tool results\n    messages.append({\"role\": \"user\", \"content\": tool_results})\n```\n\n----------------------------------------\n\nTITLE: Claude Chain of Thought Prompt for Tool Use\nDESCRIPTION: A recommended prompt for Claude Sonnet and Haiku models to encourage pre-tool call analysis, ensuring tools are used appropriately and preventing calls with missing required parameters. It guides the model to think within `<thinking>` tags before making a tool call.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: Text\nCODE:\n```\nAnswer the user's request using relevant tools (if they are available). Before calling a tool, do some analysis within <thinking></thinking> tags. First, think about which of the provided tools is the relevant tool to answer the user's request. Second, go through each of the required parameters of the relevant tool and determine if the user has directly provided or given enough information to infer a value. When deciding if the parameter can be inferred, carefully consider all the context to see if it supports a specific value. If all of the required parameters are present or can be reasonably inferred, close the thinking tag and proceed with the tool call. BUT, if one of the values for a required parameter is missing, DO NOT invoke the function (not even with fillers for the missing params) and instead, ask the user to provide the missing parameters. DO NOT ask for more information on optional parameters if it is not provided.\n```\n\n----------------------------------------\n\nTITLE: Example Python Code with Syntax Error (primes.py)\nDESCRIPTION: This Python code snippet represents the content of the `primes.py` file, which contains functions for checking prime numbers and generating a list of primes. It includes a deliberate syntax error in the `get_primes` function's for loop, which Claude is designed to fix.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool\n\nLANGUAGE: Python\nCODE:\n```\ndef is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef get_primes(limit):\n    \"\"\"Generate a list of prime numbers up to the given limit.\"\"\"\n    primes = []\n    for num in range(2, limit + 1)\n        if is_prime(num):\n            primes.append(num)\n    return primes\n\ndef main():\n    \"\"\"Main function to demonstrate prime number generation.\"\"\"\n    limit = 100\n    prime_list = get_primes(limit)\n    print(f\"Prime numbers up to {limit}:\")\n    print(prime_list)\n    print(f\"Found {len(prime_list)} prime numbers.\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Understand Claude's tool_choice parameter options\nDESCRIPTION: This API documentation outlines the various options available for Claude's `tool_choice` parameter, which controls how Claude decides to use provided tools. Each option dictates a different behavior, from automatic selection to mandatory tool use or complete prevention of tool calls.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: APIDOC\nCODE:\n```\ntool_choice parameter options:\n  - auto: Allows Claude to decide whether to call any provided tools or not. (Default when tools are provided)\n  - any: Tells Claude that it must use one of the provided tools, but doesn’t force a particular tool.\n  - tool: Forces Claude to always use a particular tool.\n  - none: Prevents Claude from using any tools. (Default when no tools are provided)\n```\n\n----------------------------------------\n\nTITLE: API Parameter: Tool Choice Type\nDESCRIPTION: Specifies the type of tool choice strategy. Currently, only `auto` is an available option.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages\n\nLANGUAGE: APIDOC\nCODE:\n```\ntool_choice.type\n\nenum<string>\n\nrequired\n\nAvailable options:\n\n`auto`\n```\n\n----------------------------------------\n\nTITLE: API Parameter: Tool Choice Strategy\nDESCRIPTION: Defines how the model should use provided tools. Options include using a specific tool, any tool, deciding itself, or not using tools at all.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages\n\nLANGUAGE: APIDOC\nCODE:\n```\ntool_choice\n\nobject\n\nHow the model should use the provided tools. The model can use a specific tool, any available tool, decide by itself, or not use tools at all.\n\n* Auto\n* Any\n* Tool\n* None\n\nShow child attributes\n```\n\n----------------------------------------\n\nTITLE: Validate Claude Actions in Python\nDESCRIPTION: Python function to validate parameters of requested actions, such as checking if coordinates are within display bounds, before execution to prevent errors.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: Python\nCODE:\n```\ndef validate_action(action_type, params):\n    if action_type == \"left_click\":\n        x, y = params.get(\"coordinate\", (0, 0))\n        if not (0 <= x < display_width and 0 <= y < display_height):\n            return False, \"Coordinates out of bounds\"\n    return True, None\n```\n\n----------------------------------------\n\nTITLE: Make Streaming API Request to Claude with Tool Use\nDESCRIPTION: This `curl` command demonstrates how to send a streaming API request to the Anthropic Claude model. It defines a `get_weather` tool with a `location` parameter and instructs Claude to use this tool to find the weather in San Francisco, showcasing the beta feature of fine-grained streaming for tool parameter values.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/streaming\n\nLANGUAGE: Shell\nCODE:\n```\n  curl https://api.anthropic.com/v1/messages \\\n    -H \"content-type: application/json\" \\\n    -H \"x-api-key: $ANTHROPIC_API_KEY\" \\\n    -H \"anthropic-version: 2023-06-01\" \\\n    -d '{\n      \"model\": \"claude-opus-4-20250514\",\n      \"max_tokens\": 1024,\n      \"tools\": [\n        {\n          \"name\": \"get_weather\",\n          \"description\": \"Get the current weather in a given location\",\n          \"input_schema\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"location\": {\n                \"type\": \"string\",\n                \"description\": \"The city and state, e.g. San Francisco, CA\"\n              }\n            },\n            \"required\": [\"location\"]\n          }\n        }\n      ],\n      \"tool_choice\": {\"type\": \"any\"},\n      \"messages\": [\n        {\n          \"role\": \"user\",\n          \"content\": \"What is the weather like in San Francisco?\"\n        }\n      ],\n      \"stream\": true\n    }'\n```\n\n----------------------------------------\n\nTITLE: Claude Tool Use for Structured JSON Output (Shell)\nDESCRIPTION: Demonstrates how to configure Claude to produce structured JSON output using a single tool (`record_summary`) and the `tool_choice` parameter. This example shows a `curl` command to interact with the Anthropic API, passing an image and the tool definition.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: Shell\nCODE:\n```\n#!/bin/bash\nIMAGE_URL=\"https://upload.wikimedia.org/wikipedia/commons/a/a7/Camponotus_flavomarginatus_ant.jpg\"\nIMAGE_MEDIA_TYPE=\"image/jpeg\"\nIMAGE_BASE64=$(curl \"$IMAGE_URL\" | base64)\n\ncurl https://api.anthropic.com/v1/messages \\\n     --header \"content-type: application/json\" \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --data \\\n'{\n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"tools\": [{\n        \"name\": \"record_summary\",\n        \"description\": \"Record summary of an image using well-structured JSON.\",\n        \"input_schema\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"key_colors\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"r\": { \"type\": \"number\", \"description\": \"red value [0.0, 1.0]\" },\n                            \"g\": { \"type\": \"number\", \"description\": \"green value [0.0, 1.0]\" },\n```\n\n----------------------------------------\n\nTITLE: API Reference: tools.name\nDESCRIPTION: Defines the `name` property for a tool, which is used by the model to call the tool and appears in `tool_use` blocks. It is a required string with a length constraint.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages\n\nLANGUAGE: APIDOC\nCODE:\n```\ntools.name:\n  Type: string\n  Required: true\n  Description: Name of the tool. This is how the tool will be called by the model and in `tool_use` blocks.\n  Required string length: 1 - 64\n```\n\n----------------------------------------\n\nTITLE: Define a good tool description for Claude\nDESCRIPTION: This example demonstrates a well-structured and detailed tool definition for Claude. It includes a comprehensive description of the tool's purpose, usage conditions, parameter meanings, and limitations, which is crucial for Claude's effective tool selection and execution.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"get_stock_price\",\n  \"description\": \"Retrieves the current stock price for a given ticker symbol. The ticker symbol must be a valid symbol for a publicly traded company on a major US stock exchange like NYSE or NASDAQ. The tool will return the latest trade price in USD. It should be used when the user asks about the current or most recent price of a specific stock. It will not provide any other information about the stock or company.\",\n  \"input_schema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"ticker\": {\n        \"type\": \"string\",\n        \"description\": \"The stock ticker symbol, e.g. AAPL for Apple Inc.\"\n      }\n    },\n    \"required\": [\"ticker\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Application Applies Code Fix and Returns Tool Result\nDESCRIPTION: This snippet shows how an application integrates with Claude's tool use. After receiving Claude's `tool_use` message, the application executes the `str_replace` command and then sends a `tool_result` message back to Claude, confirming the successful text replacement.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool\n\nLANGUAGE: Python\nCODE:\n```\nresponse = client.messages.create(\n    model=\"claude-opus-4-20250514\",\n    max_tokens=1024,\n    tools=[\n        {\n            \"type\": \"text_editor_20250429\",\n            \"name\": \"str_replace_based_edit_tool\"\n        }\n    ],\n    messages=[\n        # Previous messages...\n        {\n            \"role\": \"assistant\",\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": \"I found the syntax error in your primes.py file. In the `get_primes` function, there is a missing colon (:) at the end of the for loop line. Let me fix that for you.\"\n                },\n                {\n                    \"type\": \"tool_use\",\n                    \"id\": \"toolu_01PqRsTuVwXyZAbCdEfGh\",\n                    \"name\": \"str_replace_based_edit_tool\",\n                    \"input\": {\n                        \"command\": \"str_replace\",\n                        \"path\": \"primes.py\",\n                        \"old_str\": \"    for num in range(2, limit + 1)\",\n                        \"new_str\": \"    for num in range(2, limit + 1):\"\n                    }\n                }\n            ]\n        },\n        {\n            \"role\": \"user\",\n            \"content\": [\n                {\n                    \"type\": \"tool_result\",\n                    \"tool_use_id\": \"toolu_01PqRsTuVwXyZAbCdEfGh\",\n                    \"content\": \"Successfully replaced text at exactly one location.\"\n                }\n            ]\n        }\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Claude Model Tool Result Response Example\nDESCRIPTION: Illustrates the JSON structure for returning the result of a tool execution back to the Claude model in a subsequent user message, linking the result to the original `tool_use_id`.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"type\": \"tool_result\",\n    \"tool_use_id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n    \"content\": \"259.75 USD\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Anthropic Claude API Response with Tool Use Block\nDESCRIPTION: This JSON example illustrates an API response from Claude where the `stop_reason` is `tool_use`. It includes a `tool_use` content block detailing the tool's `id`, `name`, and `input` parameters, indicating that Claude intends to use a client-side tool.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"id\": \"msg_01Aq9w938a90dw8q\",\n  \"model\": \"claude-opus-4-20250514\",\n  \"stop_reason\": \"tool_use\",\n  \"role\": \"assistant\",\n  \"content\": [\n    {\n      \"type\": \"text\",\n      \"text\": \"<thinking>I need to use the get_weather, and the user wants SF, which is likely San Francisco, CA.</thinking>\"\n    },\n    {\n      \"type\": \"tool_use\",\n      \"id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"name\": \"get_weather\",\n      \"input\": {\"location\": \"San Francisco, CA\", \"unit\": \"celsius\"}\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Making a Claude API Request with Web Search and Cache Control\nDESCRIPTION: This Python snippet demonstrates how to append messages to a conversation, make a Claude API request using the 'web_search_20250305' tool, and apply 'cache_control' to manage caching behavior. It includes specifying user location for relevant search results and shows how to access cache read tokens from the response.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/web-search-tool\n\nLANGUAGE: Python\nCODE:\n```\nmessages.append({\n    \"role\": \"assistant\",\n    \"content\": response1.content\n})\n\n# Second request with cache breakpoint after the search results\nmessages.append({\n    \"role\": \"user\",\n    \"content\": \"Should I expect rain later this week?\",\n    \"cache_control\": {\"type\": \"ephemeral\"}  # Cache up to this point\n})\n\nresponse2 = client.messages.create(\n    model=\"claude-opus-4-20250514\",\n    max_tokens=1024,\n    messages=messages,\n    tools=[{\n        \"type\": \"web_search_20250305\",\n        \"name\": \"web_search\",\n        \"user_location\": {\n            \"type\": \"approximate\",\n            \"city\": \"San Francisco\",\n            \"region\": \"California\",\n            \"country\": \"US\",\n            \"timezone\": \"America/Los_Angeles\"\n        }\n    }]\n)\n# The second response will benefit from cached search results\n# while still being able to perform new searches if needed\nprint(f\"Cache read tokens: {response2.usage.get('cache_read_input_tokens', 0)}\")\n```\n\n----------------------------------------\n\nTITLE: Handle Invalid Tool Use or Missing Parameters with Claude\nDESCRIPTION: If Claude attempts to use a tool with invalid or missing required parameters, provide a `tool_result` indicating the specific error. Claude will then attempt to retry the tool use, incorporating the missing information, before apologizing to the user after 2-3 retries.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"role\": \"user\",\n  \"content\": [\n    {\n      \"type\": \"tool_result\",\n      \"tool_use_id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"content\": \"Error: Missing required 'location' parameter\",\n      \"is_error\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Claude's Chain of Thought JSON Response\nDESCRIPTION: This JSON snippet demonstrates how Claude Opus 3 model expresses its internal reasoning process (chain of thought) when `tool_choice` is set to `auto`. It shows a `text` content block containing the thinking process and a `tool_use` content block for calling the `get_weather` tool, illustrating a multi-step plan to answer a user query.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"role\": \"assistant\",\n  \"content\": [\n    {\n      \"type\": \"text\",\n      \"text\": \"<thinking>To answer this question, I will: 1. Use the get_weather tool to get the current weather in San Francisco. 2. Use the get_time tool to get the current time in the America/Los_Angeles timezone, which covers San Francisco, CA.</thinking>\"\n    },\n    {\n      \"type\": \"tool_use\",\n      \"id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"name\": \"get_weather\",\n      \"input\": {\"location\": \"San Francisco, CA\"}\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Log Claude Tool Actions in Python\nDESCRIPTION: Python function demonstrating how to log details of executed actions, including type, parameters, and results, for debugging and monitoring purposes.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: Python\nCODE:\n```\nimport logging\n\ndef log_action(action_type, params, result):\n    logging.info(f\"Action: {action_type}, Params: {params}, Result: {result}\")\n```\n\n----------------------------------------\n\nTITLE: Initiate Tool Use with Claude (Single Tool)\nDESCRIPTION: Send an initial message to Claude, defining a single tool (get_weather) and posing a user query. Claude is expected to respond by indicating its intent to use the tool.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --header \"content-type: application/json\" \\\n     --data \\\n'{\n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"tools\": [{\n        \"name\": \"get_weather\",\n        \"description\": \"Get the current weather in a given location\",\n        \"input_schema\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"location\": {\n                    \"type\": \"string\",\n                    \"description\": \"The city and state, e.g. San Francisco, CA\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"enum\": [\"celsius\", \"fahrenheit\"],\n                    \"description\": \"The unit of temperature, either \\\"celsius\\\" or \\\"fahrenheit\\\"\"\n                }\n            },\n            \"required\": [\"location\"]\n        }\n    }],\n    \"messages\": [{\"role\": \"user\", \"content\": \"What is the weather like in San Francisco?\"}]\n}'\n```\n\nLANGUAGE: Python\nCODE:\n```\n\n```\n\nLANGUAGE: Java\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Provide Tool Result to Claude (Single Tool)\nDESCRIPTION: After executing the tool identified by Claude, send a follow-up message back to Claude containing the tool_result. This allows Claude to continue the conversation with the tool's output.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --header \"content-type: application/json\" \\\n     --data \\\n'{\n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"tools\": [\n        {\n            \"name\": \"get_weather\",\n            \"description\": \"Get the current weather in a given location\",\n            \"input_schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"location\": {\n                        \"type\": \"string\",\n                        \"description\": \"The city and state, e.g. San Francisco, CA\"\n                    },\n                    \"unit\": {\n                        \"type\": \"string\",\n                        \"enum\": [\"celsius\", \"fahrenheit\"],\n                        \"description\": \"The unit of temperature, either \\\"celsius\\\" or \\\"fahrenheit\\\"\"\n                    }\n                },\n                \"required\": [\"location\"]\n            }\n        }\n    ],\n    \"messages\": [\n        {\n            \"role\": \"user\",\n            \"content\": \"What is the weather like in San Francisco?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": \"<thinking>I need to use get_weather, and the user wants SF, which is likely San Francisco, CA.</thinking>\"\n                },\n                {\n                    \"type\": \"tool_use\",\n                    \"id\": \"toolu_01A09q90qw90lq917835lq9\",\n                    \"name\": \"get_weather\",\n                    \"input\": {\n                        \"location\": \"San Francisco, CA\",\n                        \"unit\": \"celsius\"\n                    }\n                }\n            ]\n        },\n        {\n            \"role\": \"user\",\n            \"content\": [\n                {\n                    \"type\": \"tool_result\",\n                    \"tool_use_id\": \"toolu_01A09q90qw90lq917835lq9\",\n                    \"content\": \"15 degrees\"\n                }\n            ]\n        }\n    ]\n}'\n```\n\nLANGUAGE: Python\nCODE:\n```\n\n```\n\nLANGUAGE: Java\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: cURL Request to List Anthropic Models\nDESCRIPTION: Example cURL command to retrieve a list of available models from the Anthropic API. It includes necessary headers for authentication using an API key and specifying the API version.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/models-list\n\nLANGUAGE: cURL\nCODE:\n```\ncurl https://api.anthropic.com/v1/models \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\"\n```\n\n----------------------------------------\n\nTITLE: Claude Proposes Syntax Error Fix using str_replace Tool\nDESCRIPTION: This JSON snippet demonstrates Claude's response after identifying the syntax error. It uses the `str_replace_based_edit_tool` with the `str_replace` command to specify the exact string to be replaced (`old_str`) and its corrected version (`new_str`) in the `primes.py` file.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool\n\nLANGUAGE: APIDOC\nCODE:\n```\n{\n  \"id\": \"msg_01VwXyZAbCdEfGhIjKlMnO\",\n  \"model\": \"claude-opus-4-20250514\",\n  \"stop_reason\": \"tool_use\",\n  \"role\": \"assistant\",\n  \"content\": [\n    {\n      \"type\": \"text\",\n      \"text\": \"I found the syntax error in your primes.py file. In the `get_primes` function, there is a missing colon (:) at the end of the for loop line. Let me fix that for you.\"\n    },\n    {\n      \"type\": \"tool_use\",\n      \"id\": \"toolu_01PqRsTuVwXyZAbCdEfGh\",\n      \"name\": \"str_replace_based_edit_tool\",\n      \"input\": {\n        \"command\": \"str_replace\",\n        \"path\": \"primes.py\",\n        \"old_str\": \"    for num in range(2, limit + 1)\",\n        \"new_str\": \"    for num in range(2, limit + 1):\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Handle Claude Computer Actions with Python\nDESCRIPTION: Defines a Python function to dispatch various computer actions requested by Claude, such as screenshot capture, mouse clicks, and text typing, based on the action type and provided parameters.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: Python\nCODE:\n```\ndef handle_computer_action(action_type, params):\n    if action_type == \"screenshot\":\n        return capture_screenshot()\n    elif action_type == \"left_click\":\n        x, y = params[\"coordinate\"]\n        return click_at(x, y)\n    elif action_type == \"type\":\n        return type_text(params[\"text\"])\n    # ... handle other actions\n```\n\n----------------------------------------\n\nTITLE: API Reference: tools.type\nDESCRIPTION: Defines the type of the tool, with 'custom' as an available option.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages\n\nLANGUAGE: APIDOC\nCODE:\n```\ntools.type:\n  Type: enum<string> | null\n  Available options: custom\n```\n\n----------------------------------------\n\nTITLE: Anthropic Claude Tool Definitions (APIDOC)\nDESCRIPTION: This section documents the structure for defining tools that can be used with Anthropic's Claude API. It includes examples of `get_weather`, `get_time`, and `get_location` tools, detailing their names, descriptions, and input schemas with parameter types, descriptions, and required fields.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: APIDOC\nCODE:\n```\nTool: get_weather\n  Description: Get the current weather in a given location\n  Input Schema:\n    type: object\n    properties:\n      location:\n        type: string\n        description: The city and state, e.g. San Francisco, CA\n      unit:\n        type: string\n        enum: [\"celsius\", \"fahrenheit\"]\n        description: The unit of temperature, either 'celsius' or 'fahrenheit'\n    required: [\"location\"]\n\nTool: get_time\n  Description: Get the current time in a given time zone\n  Input Schema:\n    type: object\n    properties:\n      timezone:\n        type: string\n        description: The IANA time zone name, e.g. America/Los_Angeles\n    required: [\"timezone\"]\n\nTool: get_location\n  Description: Get the current user location based on their IP address. This tool has no parameters or arguments.\n  Input Schema:\n    type: object\n    properties: {}\n```\n\n----------------------------------------\n\nTITLE: Force Claude to use a specific tool with tool_choice\nDESCRIPTION: This snippet shows how to explicitly instruct Claude to use a particular tool by setting the `tool_choice` parameter. This is useful when you want to ensure a specific tool is invoked regardless of Claude's internal reasoning.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: Python\nCODE:\n```\ntool_choice = {\"type\": \"tool\", \"name\": \"get_weather\"}\n```\n\n----------------------------------------\n\nTITLE: Define Multiple Tools for Claude API Call (Shell/JSON)\nDESCRIPTION: This snippet shows an example of defining two independent tools, `get_weather` and `get_time`, within a single Anthropic Claude API request. It illustrates how Claude can use these tools, potentially in parallel or sequentially, to answer a user's query that requires information from both.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --header \"content-type: application/json\" \\\n     --data \\\n'{\n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"tools\": [{\n        \"name\": \"get_weather\",\n        \"description\": \"Get the current weather in a given location\",\n        \"input_schema\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"location\": {\n                    \"type\": \"string\",\n                    \"description\": \"The city and state, e.g. San Francisco, CA\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"enum\": [\"celsius\", \"fahrenheit\"],\n                    \"description\": \"The unit of temperature, either 'celsius' or 'fahrenheit'\"\n                }\n            },\n            \"required\": [\"location\"]\n        }\n    },\n    {\n        \"name\": \"get_time\",\n        \"description\": \"Get the current time in a given time zone\",\n        \"input_schema\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"timezone\": {\n                    \"type\": \"string\",\n                    \"description\": \"The IANA time zone name, e.g. America/Los_Angeles\"\n                }\n            },\n            \"required\": [\"timezone\"]\n        }\n    }],\n    \"messages\": [{\n        \"role\": \"user\",\n        \"content\": \"What is the weather like right now in New York? Also what time is it there?\"\n    }]\n}'\n```\n\n----------------------------------------\n\nTITLE: API Parameter: Tool Definitions\nDESCRIPTION: Defines tools the model may use. Includes `name`, `description`, and `input_schema`. Model may return `tool_use` blocks, which can be run and results returned via `tool_result` blocks. Supports client and server tools.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages\n\nLANGUAGE: APIDOC\nCODE:\n```\ntools\n\nobject[]\n\nDefinitions of tools that the model may use.\n\nIf you include `tools` in your API request, the model may return `tool_use` content blocks that represent the model's use of those tools. You can then run those tools using the tool input generated by the model and then optionally return results back to the model using `tool_result` content blocks.\n\nThere are two types of tools: **client tools** and **server tools**. The behavior described below applies to client tools. For [server tools](https://docs.anthropic.com/en/docs/agents-and-tools/tool-use/overview#server-tools), see their individual documentation as each has its own behavior (e.g., the [web search tool](https://docs.anthropic.com/en/docs/agents-and-tools/tool-use/web-search-tool)).\n\nEach tool definition includes:\n\n* `name`: Name of the tool.\n* `description`: Optional, but strongly-recommended description of the tool.\n* `input_schema`: [JSON schema](https://json-schema.org/draft/2020-12) for the tool `input` shape that the model will produce in `tool_use` output content blocks.\n```\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  {\n    \"name\": \"get_stock_price\",\n    \"description\": \"Get the current stock price for a given ticker symbol.\",\n    \"input_schema\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"ticker\": {\n          \"type\": \"string\",\n          \"description\": \"The stock ticker symbol, e.g. AAPL for Apple Inc.\"\n        }\n      },\n      \"required\": [\"ticker\"]\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: cURL Example to List Anthropic Models\nDESCRIPTION: Demonstrates how to make a cURL request to the Anthropic API to list available models, including required headers for authentication and API version.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/models-list\n\nLANGUAGE: cURL\nCODE:\n```\ncurl https://api.anthropic.com/v1/models \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\"\n```\n\n----------------------------------------\n\nTITLE: Handle Multiple Matches for Text Replacement in Claude Tool Result\nDESCRIPTION: If Claude's `str_replace` command finds multiple occurrences of the target text, return this JSON structure. The error message guides Claude to provide more context for a unique match.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"role\": \"user\",\n  \"content\": [\n    {\n      \"type\": \"tool_result\",\n      \"tool_use_id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"content\": \"Error: Found 3 matches for replacement text. Please provide more context to make a unique match.\",\n      \"is_error\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Anthropic Claude Computer Use Tool: Available Actions\nDESCRIPTION: Lists all supported actions for the Anthropic Claude computer use tool, categorized into basic and enhanced versions, detailing their purpose.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: APIDOC\nCODE:\n```\nActions:\n  Basic actions (all versions):\n    screenshot: Capture the current display\n    left_click: Click at coordinates [x, y]\n    type: Type text string\n    key: Press key or key combination (e.g., “ctrl+s”)\n    mouse_move: Move cursor to coordinates\n  Enhanced actions (computer_20250124):\n    scroll: Scroll in any direction with amount control\n    left_click_drag: Click and drag between coordinates\n    right_click: Additional mouse button\n    middle_click: Additional mouse button\n    double_click: Multiple clicks\n    triple_click: Multiple clicks\n    left_mouse_down: Fine-grained click control\n    left_mouse_up: Fine-grained click control\n    hold_key: Hold a key while performing other actions\n    wait: Pause between actions\n```\n\n----------------------------------------\n\nTITLE: Anthropic Claude API: Tool Role Message Fields\nDESCRIPTION: Details the fields available for messages with the 'tool' role in the Anthropic Claude API. This includes content variations (string, array with text type), tool_call_id, tool_choice, and name fields.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/openai-sdk\n\nLANGUAGE: APIDOC\nCODE:\n```\n| Field         | Variant                  | Support status |\n| ------------- | ------------------------ | -------------- |\n| `content`     | `string`                 | Fully supported|\n| `content`     | `array`, `type == \"text\"` | Fully supported|\n| `tool_call_id`| N/A                      | Fully supported|\n| `tool_choice` | N/A                      | Fully supported|\n| `name`        | N/A                      | Ignored        |\n```\n\n----------------------------------------\n\nTITLE: Send Message with Multiple Cache Breakpoints and Tools (cURL)\nDESCRIPTION: This example illustrates how to combine prompt caching with tool definitions and system messages in a single API call. It shows how to define multiple tools with their input schemas and how to apply `cache_control` to both tools and system messages, enabling more granular control over caching behavior for complex interactions.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/prompt-caching\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --header \"content-type: application/json\" \\\n     --data \\\n'{ \n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"tools\": [\n        {\n            \"name\": \"search_documents\",\n            \"description\": \"Search through the knowledge base\",\n            \"input_schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"query\": {\n                        \"type\": \"string\",\n                        \"description\": \"Search query\"\n                    }\n                },\n                \"required\": [\"query\"]\n            }\n        },\n        {\n            \"name\": \"get_document\",\n            \"description\": \"Retrieve a specific document by ID\",\n            \"input_schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"doc_id\": {\n                        \"type\": \"string\",\n                        \"description\": \"Document ID\"\n                    }\n                },\n                \"required\": [\"doc_id\"]\n            },\n            \"cache_control\": {\"type\": \"ephemeral\"}\n        }\n    ],\n    \"system\": [\n        {\n            \"type\": \"text\",\n            \"text\": \"You are a helpful research assistant with access to a document knowledge base.\\n\\n# Instructions\\n- Always search for relevant documents before answering\\n- Provide citations for your sources\\n- Be objective and accurate in your responses\\n- If multiple documents contain relevant information, synthesize them\\n- Acknowledge when information is not available in the knowledge base\",\n            \"cache_control\": {\"type\": \"ephemeral\"}\n        },\n        {\n            \"type\": \"text\",\n```\n\n----------------------------------------\n\nTITLE: Sending Client Tool Result with Images to Claude\nDESCRIPTION: This JSON example shows how to return a `tool_result` to Claude that includes both text and image content. The `content` field is an array of content blocks, allowing for rich media results from client-side tools, with images encoded in base64.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"role\": \"user\",\n  \"content\": [\n    {\n      \"type\": \"tool_result\",\n      \"tool_use_id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"content\": [\n        {\"type\": \"text\", \"text\": \"15 degrees\"},\n        {\n          \"type\": \"image\",\n          \"source\": {\n            \"type\": \"base64\",\n            \"media_type\": \"image/jpeg\",\n            \"data\": \"/9j/4AAQSkZJRg...\"\n          }\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Successful Client Tool Result to Claude\nDESCRIPTION: This JSON example demonstrates how to send a successful `tool_result` message back to Claude after a client-side tool has been executed. It includes the `tool_use_id` to link to the original request and the tool's output as a simple string `content`.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"role\": \"user\",\n  \"content\": [\n    {\n      \"type\": \"tool_result\",\n      \"tool_use_id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"content\": \"15 degrees\"\n    }\n  ]\n}\n```"}]}
{"parentUuid":"d2d16b23-fcf1-460d-90a0-5b4b9742cf8b","isSidechain":false,"userType":"external","cwd":"/Users/kyle/Code/cc-tui.nvim","sessionId":"4ccf3891-59b5-49fb-8978-fae1303cf444","version":"1.0.72","gitBranch":"project_discovery","message":{"id":"msg_01AbtMWcWL3YKz63UGW6TKDN","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"I found documentation about Claude Code hooks. Let me look for more specific hook documentation:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":7,"cache_creation_input_tokens":14350,"cache_read_input_tokens":55978,"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CRyNzqHfVLsQtVzLQ3hTj","type":"assistant","uuid":"b3812ac8-f68b-4e7e-acb1-cef0254e5fc6","timestamp":"2025-08-10T04:14:46.083Z"}
{"parentUuid":"b3812ac8-f68b-4e7e-acb1-cef0254e5fc6","isSidechain":false,"userType":"external","cwd":"/Users/kyle/Code/cc-tui.nvim","sessionId":"4ccf3891-59b5-49fb-8978-fae1303cf444","version":"1.0.72","gitBranch":"project_discovery","message":{"id":"msg_01AbtMWcWL3YKz63UGW6TKDN","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01WfehQBu9oZMURwMfmLDsFK","name":"mcp__mcphub__context7__get-library-docs","input":{"context7CompatibleLibraryID":"/context7/docs_anthropic_com-en-docs-claude-code","topic":"hooks settings","tokens":15000}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":7,"cache_creation_input_tokens":14350,"cache_read_input_tokens":55978,"output_tokens":144,"service_tier":"standard"}},"requestId":"req_011CRyNzqHfVLsQtVzLQ3hTj","type":"assistant","uuid":"93f01464-af6d-49d6-9d80-b2443387f40f","timestamp":"2025-08-10T04:14:47.799Z"}
{"parentUuid":"93f01464-af6d-49d6-9d80-b2443387f40f","isSidechain":false,"userType":"external","cwd":"/Users/kyle/Code/cc-tui.nvim","sessionId":"4ccf3891-59b5-49fb-8978-fae1303cf444","version":"1.0.72","gitBranch":"project_discovery","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01WfehQBu9oZMURwMfmLDsFK","type":"tool_result","content":[{"type":"text","text":"========================\nCODE SNIPPETS\n========================\nTITLE: Configure OpenTelemetry via Managed Settings File\nDESCRIPTION: Administrators can centralize OpenTelemetry settings for Claude Code by defining environment variables within a `managed-settings.json` file. This example demonstrates configuring telemetry enablement, OTLP exporters for metrics and logs, gRPC protocol, a custom collector endpoint, and authorization headers.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/monitoring-usage\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"env\": {\n    \"CLAUDE_CODE_ENABLE_TELEMETRY\": \"1\",\n    \"OTEL_METRICS_EXPORTER\": \"otlp\",\n    \"OTEL_LOGS_EXPORTER\": \"otlp\",\n    \"OTEL_EXPORTER_OTLP_PROTOCOL\": \"grpc\",\n    \"OTEL_EXPORTER_OTLP_ENDPOINT\": \"http://collector.company.com:4317\",\n    \"OTEL_EXPORTER_OTLP_HEADERS\": \"Authorization=Bearer company-token\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Set Anthropic API Key Environment Variable\nDESCRIPTION: Sets the `ANTHROPIC_API_KEY` environment variable, which the Anthropic SDKs automatically use for authentication. This example is for macOS and Linux.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/get-started\n\nLANGUAGE: Shell\nCODE:\n```\nexport ANTHROPIC_API_KEY='your-api-key-here'\n```\n\n----------------------------------------\n\nTITLE: Configure Claude Code for Metrics Telemetry\nDESCRIPTION: This snippet sets environment variables to enable OpenTelemetry metrics export for Claude Code, directing metrics to a local OTLP gRPC endpoint. It ensures only metrics are collected, without events or logs.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/monitoring-usage\n\nLANGUAGE: bash\nCODE:\n```\nexport CLAUDE_CODE_ENABLE_TELEMETRY=1\nexport OTEL_METRICS_EXPORTER=otlp\nexport OTEL_EXPORTER_OTLP_PROTOCOL=grpc\nexport OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317\n```\n\n----------------------------------------\n\nTITLE: Navigate to Project Directory for Claude Code\nDESCRIPTION: Changes the current working directory to your project's root. This is where you will run Claude Code commands relevant to your project files.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/setup\n\nLANGUAGE: shell\nCODE:\n```\ncd your-project-directory\n```\n\n----------------------------------------\n\nTITLE: Force Claude to use a specific tool with tool_choice\nDESCRIPTION: This snippet shows how to explicitly instruct Claude to use a particular tool by setting the `tool_choice` parameter. This is useful when you want to ensure a specific tool is invoked regardless of Claude's internal reasoning.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: Python\nCODE:\n```\ntool_choice = {\"type\": \"tool\", \"name\": \"get_weather\"}\n```\n\n----------------------------------------\n\nTITLE: Enabling and Configuring Vim Mode in Claude Code\nDESCRIPTION: These commands are used to enable Vim keybindings within Claude Code or to access the general configuration menu. Claude Code supports a subset of Vim commands for mode switching, navigation, and editing.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/setup\n\nLANGUAGE: Shell\nCODE:\n```\n/vim\n```\n\nLANGUAGE: Shell\nCODE:\n```\n/config\n```\n\n----------------------------------------\n\nTITLE: Force Claude to Use a Specific Tool (Python)\nDESCRIPTION: This Python snippet illustrates how to use the `tool_choice` parameter in an API request to explicitly force Claude to use a particular tool by its name. It sets the `type` to 'tool' and specifies the `name` of the desired tool.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude_api_primer\n\nLANGUAGE: python\nCODE:\n```\ntool_choice = {\"type\": \"tool\", \"name\": \"get_weather\"}\n```\n\n----------------------------------------\n\nTITLE: Configure OpenTelemetry for Claude Code\nDESCRIPTION: This snippet provides a quick start guide to configure OpenTelemetry for Claude Code using environment variables. It covers enabling telemetry, selecting metrics and logs exporters (OTLP, Prometheus, console), setting the OTLP endpoint and protocol, configuring authentication headers, and adjusting export intervals for debugging purposes. It also notes the default export intervals and advises resetting them for production.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/monitoring-usage\n\nLANGUAGE: Shell\nCODE:\n```\n# 1. Enable telemetry\nexport CLAUDE_CODE_ENABLE_TELEMETRY=1\n\n# 2. Choose exporters (both are optional - configure only what you need)\nexport OTEL_METRICS_EXPORTER=otlp       # Options: otlp, prometheus, console\nexport OTEL_LOGS_EXPORTER=otlp          # Options: otlp, console\n\n# 3. Configure OTLP endpoint (for OTLP exporter)\nexport OTEL_EXPORTER_OTLP_PROTOCOL=grpc\nexport OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317\n\n# 4. Set authentication (if required)\nexport OTEL_EXPORTER_OTLP_HEADERS=\"Authorization=Bearer your-token\"\n\n# 5. For debugging: reduce export intervals\nexport OTEL_METRIC_EXPORT_INTERVAL=10000  # 10 seconds (default: 60000ms)\nexport OTEL_LOGS_EXPORT_INTERVAL=5000     # 5 seconds (default: 5000ms)\n\n# 6. Run Claude Code\nclaude\n```\n\n----------------------------------------\n\nTITLE: Configure Claude Code for Vertex AI integration\nDESCRIPTION: This snippet sets environment variables to enable Claude Code's integration with Google Vertex AI. It specifies the region (`us-east5`), your Google Cloud project ID, and includes an optional setting to disable prompt caching, which can be removed once caching is enabled by Google Cloud support.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/google-vertex-ai\n\nLANGUAGE: bash\nCODE:\n```\n# Enable Vertex AI integration\nexport CLAUDE_CODE_USE_VERTEX=1\nexport CLOUD_ML_REGION=us-east5\nexport ANTHROPIC_VERTEX_PROJECT_ID=YOUR-PROJECT-ID\n\n# Optional: Disable prompt caching if not enabled\nexport DISABLE_PROMPT_CACHING=1\n```\n\n----------------------------------------\n\nTITLE: Claude Code OpenTelemetry Environment Variable Reference\nDESCRIPTION: This section details the environment variables available for configuring OpenTelemetry within Claude Code. It covers common settings for telemetry collection, exporter types, OTLP protocols and endpoints, export intervals, and specific variables for controlling metrics cardinality to optimize performance and storage.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/monitoring-usage\n\nLANGUAGE: APIDOC\nCODE:\n```\nCommon Configuration Variables:\n`CLAUDE_CODE_ENABLE_TELEMETRY`: Enables telemetry collection (required). Example Values: `1`\n`OTEL_METRICS_EXPORTER`: Metrics exporter type(s) (comma-separated). Example Values: `console`, `otlp`, `prometheus`\n`OTEL_LOGS_EXPORTER`: Logs/events exporter type(s) (comma-separated). Example Values: `console`, `otlp`\n`OTEL_EXPORTER_OTLP_PROTOCOL`: Protocol for OTLP exporter (all signals). Example Values: `grpc`, `http/json`, `http/protobuf`\n`OTEL_EXPORTER_OTLP_ENDPOINT`: OTLP collector endpoint (all signals). Example Values: `http://localhost:4317`\n`OTEL_EXPORTER_OTLP_METRICS_PROTOCOL`: Protocol for metrics (overrides general). Example Values: `grpc`, `http/json`, `http/protobuf`\n`OTEL_EXPORTER_OTLP_METRICS_ENDPOINT`: OTLP metrics endpoint (overrides general). Example Values: `http://localhost:4318/v1/metrics`\n`OTEL_EXPORTER_OTLP_LOGS_PROTOCOL`: Protocol for logs (overrides general). Example Values: `grpc`, `http/json`, `http/protobuf`\n`OTEL_EXPORTER_OTLP_LOGS_ENDPOINT`: OTLP logs endpoint (overrides general). Example Values: `http://localhost:4318/v1/logs`\n`OTEL_EXPORTER_OTLP_HEADERS`: Authentication headers for OTLP. Example Values: `Authorization=Bearer token`\n`OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY`: Client key for mTLS authentication. Example Values: Path to client key file\n`OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE`: Client certificate for mTLS authentication. Example Values: Path to client cert file\n`OTEL_METRIC_EXPORT_INTERVAL`: Export interval in milliseconds (default: 60000). Example Values: `5000`, `60000`\n`OTEL_LOGS_EXPORT_INTERVAL`: Logs export interval in milliseconds (default: 5000). Example Values: `1000`, `10000`\n`OTEL_LOG_USER_PROMPTS`: Enable logging of user prompt content (default: disabled). Example Values: `1` to enable\n\nMetrics Cardinality Control:\n`OTEL_METRICS_INCLUDE_SESSION_ID`: Include session.id attribute in metrics. Default Value: `true`. Example to Disable: `false`\n`OTEL_METRICS_INCLUDE_VERSION`: Include app.version attribute in metrics. Default Value: `false`. Example to Disable: `true`\n`OTEL_METRICS_INCLUDE_ACCOUNT_UUID`: Include user.account_uuid attribute in metrics. Default Value: `true`. Example to Disable: `false`\n```\n\n----------------------------------------\n\nTITLE: Configure Anthropic Model with Inference Profile ID\nDESCRIPTION: Sets environment variables for Anthropic models using their inference profile IDs, specifying the exact model version and region for direct access.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/amazon-bedrock\n\nLANGUAGE: shell\nCODE:\n```\nexport ANTHROPIC_MODEL='us.anthropic.claude-opus-4-20250514-v1:0'\nexport ANTHROPIC_SMALL_FAST_MODEL='us.anthropic.claude-3-5-haiku-20241022-v1:0'\n```\n\n----------------------------------------\n\nTITLE: Set AWS Credentials using Environment Variables\nDESCRIPTION: This method allows setting AWS access key ID, secret access key, and session token directly as environment variables. This is an alternative to AWS CLI configuration for providing credentials to Claude Code for Bedrock integration.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/amazon-bedrock\n\nLANGUAGE: bash\nCODE:\n```\nexport AWS_ACCESS_KEY_ID=your-access-key-id\nexport AWS_SECRET_ACCESS_KEY=your-secret-access-key\nexport AWS_SESSION_TOKEN=your-session-token\n```\n\n----------------------------------------\n\nTITLE: Set Service Tier for Anthropic Claude API Request (Python)\nDESCRIPTION: Demonstrates how to set the `service_tier` parameter to 'auto' when creating a message with the Anthropic Claude API client. This configuration automatically attempts to use Priority Tier capacity if available, falling back to standard tier otherwise.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/service-tiers\n\nLANGUAGE: Python\nCODE:\n```\nmessage = client.messages.create(\n    model=\"claude-opus-4-20250514\",\n    max_tokens=1024,\n    messages=[{\"role\": \"user\", \"content\": \"Hello, Claude!\"}],\n    service_tier=\"auto\"  # Automatically use Priority Tier when available, fallback to standard\n)\n```\n\n----------------------------------------\n\nTITLE: Start Claude Code Application\nDESCRIPTION: Launches the Claude Code application from the command line. This command initiates the authentication process and prepares the environment for interaction.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/setup\n\nLANGUAGE: shell\nCODE:\n```\nclaude\n```\n\n----------------------------------------\n\nTITLE: Enabling Terminal Bell Notifications for Claude Code\nDESCRIPTION: This command configures Claude Code to use terminal bell notifications upon task completion. Users on macOS should also ensure notification permissions are enabled for their terminal application.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/setup\n\nLANGUAGE: Shell\nCODE:\n```\nclaude config set --global preferredNotifChannel terminal_bell\n```\n\n----------------------------------------\n\nTITLE: Switch AWS Region Environment Variable\nDESCRIPTION: Sets the AWS_REGION environment variable to a specified region, which can resolve region-related issues for subsequent AWS CLI commands or SDK operations.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/amazon-bedrock\n\nLANGUAGE: shell\nCODE:\n```\nexport AWS_REGION=us-east-1\n```\n\n----------------------------------------\n\nTITLE: Generate CLAUDE.md Project Guide\nDESCRIPTION: Initializes and generates a `CLAUDE.md` project guide file in your repository. This file provides an overview and context for your project, which can then be committed.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/setup\n\nLANGUAGE: shell\nCODE:\n```\n/init\n```\n\n----------------------------------------\n\nTITLE: Customize Claude models for Vertex AI\nDESCRIPTION: This snippet demonstrates how to customize the primary and small/fast Claude models used by Claude Code when integrated with Vertex AI. By setting these environment variables, users can override the default models to use specific versions like 'claude-opus-4' or 'claude-3-5-haiku'.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/google-vertex-ai\n\nLANGUAGE: bash\nCODE:\n```\nexport ANTHROPIC_MODEL='claude-opus-4@20250514'\nexport ANTHROPIC_SMALL_FAST_MODEL='claude-3-5-haiku@20241022'\n```\n\n----------------------------------------\n\nTITLE: Fixing OS/Platform Detection Issues in Claude Code WSL Installation\nDESCRIPTION: These commands help resolve errors where WSL might be using Windows `npm` during Claude Code installation. The first command sets the npm OS configuration to Linux, and the second forces installation while bypassing OS checks.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/setup\n\nLANGUAGE: Shell\nCODE:\n```\nnpm config set os linux\n```\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install -g @anthropic-ai/claude-code --force --no-os-check\n```\n\n----------------------------------------\n\nTITLE: Enable Claude Code Bedrock Integration and AWS Region\nDESCRIPTION: These environment variables enable the Bedrock integration for Claude Code and specify the AWS region to be used. The AWS_REGION variable is a required setting for Bedrock integration and is not read from the .aws config file.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/amazon-bedrock\n\nLANGUAGE: bash\nCODE:\n```\n# Enable Bedrock integration\nexport CLAUDE_CODE_USE_BEDROCK=1\nexport AWS_REGION=us-east-1  # or your preferred region\n```\n\n----------------------------------------\n\nTITLE: Configure AWS SSO Profile for Claude Code\nDESCRIPTION: Use this method to log in via AWS SSO and then set the AWS_PROFILE environment variable. This allows Claude Code to use credentials managed by an AWS SSO profile for Bedrock access.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/amazon-bedrock\n\nLANGUAGE: bash\nCODE:\n```\naws sso login --profile=<your-profile-name>\n\nexport AWS_PROFILE=your-profile-name\n```\n\n----------------------------------------\n\nTITLE: Install Claude Code CLI with npm\nDESCRIPTION: Installs the Claude Code command-line interface globally using npm. This requires Node.js 18+ to be pre-installed. Avoid using `sudo` to prevent permission issues.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/setup\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g @anthropic-ai/claude-code\n```\n\n----------------------------------------\n\nTITLE: Handle Screenshot Capture Failure for Claude Tool\nDESCRIPTION: Example JSON structure for returning an error message to Claude when a screenshot capture operation fails, indicating the issue and setting the 'is_error' flag.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"role\": \"user\",\n  \"content\": [\n    {\n      \"type\": \"tool_result\",\n      \"tool_use_id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"content\": \"Error: Failed to capture screenshot. Display may be locked or unavailable.\",\n      \"is_error\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Run a Simple Command in Claude Code Interactive Mode\nDESCRIPTION: Executes a basic command within the Claude Code interactive session. For example, it can be used to summarize the current project's context.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/setup\n\nLANGUAGE: shell\nCODE:\n```\n> summarize this project\n```\n\n----------------------------------------\n\nTITLE: Initiate Claude Conversation with Text Editor Tool\nDESCRIPTION: Demonstrates how to start a conversation with Claude using a `curl` command, providing the `text_editor_20250429` tool and an initial user prompt to fix a syntax error in a file. This sets up the interaction for Claude to begin analyzing the code.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n  -H \"content-type: application/json\" \\\n  -H \"x-api-key: $ANTHROPIC_API_KEY\" \\\n  -H \"anthropic-version: 2023-06-01\" \\\n  -d '{\n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"tools\": [\n      {\n        \"type\": \"text_editor_20250429\",\n        \"name\": \"str_replace_based_edit_tool\"\n      }\n    ],\n    \"messages\": [\n      {\n        \"role\": \"user\",\n        \"content\": \"There'\\''s a syntax error in my primes.py file. Can you help me fix it?\"\n      }\n    ]\n  }'\n```\n\n----------------------------------------\n\nTITLE: Configure Anthropic Model with Application Inference Profile ARN\nDESCRIPTION: Sets the ANTHROPIC_MODEL environment variable using an AWS ARN for an application inference profile, allowing for custom or shared model configurations.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/amazon-bedrock\n\nLANGUAGE: shell\nCODE:\n```\nexport ANTHROPIC_MODEL='arn:aws:bedrock:us-east-2:your-account-id:application-inference-profile/your-model-id'\n```\n\n----------------------------------------\n\nTITLE: Initialize Project Memory with /init Command\nDESCRIPTION: Illustrates the command to bootstrap a CLAUDE.md file for a codebase. This command helps set up a central repository for important project information, conventions, and frequently used commands, facilitating consistent project interaction.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/memory\n\nLANGUAGE: Shell\nCODE:\n```\n> /init\n```\n\n----------------------------------------\n\nTITLE: Shell Examples for Claude Code OpenTelemetry Configuration\nDESCRIPTION: These shell script examples illustrate various ways to configure OpenTelemetry for Claude Code using environment variables. Scenarios include enabling console debugging with short intervals, setting up OTLP/gRPC export, configuring Prometheus export, using multiple exporters, and defining distinct endpoints for metrics and logs.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/monitoring-usage\n\nLANGUAGE: shell\nCODE:\n```\n# Console debugging (1-second intervals)\nexport CLAUDE_CODE_ENABLE_TELEMETRY=1\nexport OTEL_METRICS_EXPORTER=console\nexport OTEL_METRIC_EXPORT_INTERVAL=1000\n\n# OTLP/gRPC\nexport CLAUDE_CODE_ENABLE_TELEMETRY=1\nexport OTEL_METRICS_EXPORTER=otlp\nexport OTEL_EXPORTER_OTLP_PROTOCOL=grpc\nexport OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317\n\n# Prometheus\nexport CLAUDE_CODE_ENABLE_TELEMETRY=1\nexport OTEL_METRICS_EXPORTER=prometheus\n\n# Multiple exporters\nexport CLAUDE_CODE_ENABLE_TELEMETRY=1\nexport OTEL_METRICS_EXPORTER=console,otlp\nexport OTEL_EXPORTER_OTLP_PROTOCOL=http/json\n\n# Different endpoints/backends for metrics and logs\nexport CLAUDE_CODE_ENABLE_TELEMETRY=1\nexport OTEL_METRICS_EXPORTER=otlp\nexport OTEL_LOGS_EXPORTER=otlp\nexport OTEL_EXPORTER_OTLP_METRICS_PROTOCOL=http/protobuf\nexport OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://metrics.company.com:4318\nexport OTEL_EXPORTER_OTLP_LOGS_PROTOCOL=grpc\nexport OTEL_EXPORTER_OTLP_LOGS_ENDPOINT=http://logs.company.com:4317\n```\n\n----------------------------------------\n\nTITLE: Report Tool Execution Error in Anthropic API\nDESCRIPTION: Demonstrates how to report an error that occurs during tool execution by setting `\"is_error\": true` within the `tool_result` content block. This informs Claude that the tool call failed.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude_api_primer\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"role\": \"user\",\n  \"content\": [\n    {\n      \"type\": \"tool_result\",\n      \"tool_use_id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"content\": \"ConnectionError: the weather service API is not available (HTTP 500)\",\n      \"is_error\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Prompt Caching with Claude API Web Search\nDESCRIPTION: Demonstrates how to use prompt caching with the Claude API's web search feature in a multi-turn conversation. It shows setting a `cache_control` breakpoint and making an initial request with web search tools.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/web-search-tool\n\nLANGUAGE: python\nCODE:\n```\nimport anthropic\n\nclient = anthropic.Anthropic()\n\n# First request with web search and cache breakpoint\nmessages = [\n    {\n        \"role\": \"user\",\n        \"content\": \"What's the current weather in San Francisco today?\"\n    }\n]\n\nresponse1 = client.messages.create(\n    model=\"claude-opus-4-20250514\",\n    max_tokens=1024,\n    messages=messages,\n    tools=[{\n        \"type\": \"web_search_20250305\",\n        \"name\": \"web_search\",\n        \"user_location\": {\n            \"type\": \"approximate\",\n            \"city\": \"San Francisco\",\n            \"region\": \"California\",\n            \"country\": \"US\",\n            \"timezone\": \"America/Los_Angeles\"\n        }\n    }]\n)\n```\n\n----------------------------------------\n\nTITLE: Automating Shift+Enter Configuration for Line Breaks in Claude Code\nDESCRIPTION: This command, run within Claude Code, automatically configures Shift+Enter as a more intuitive alternative for entering line breaks in iTerm2 and VS Code terminals.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/setup\n\nLANGUAGE: Shell\nCODE:\n```\n/terminal-setup\n```\n\n----------------------------------------\n\nTITLE: Call Anthropic Claude API (Python)\nDESCRIPTION: Demonstrates how to make a basic API call to the Anthropic Claude messages endpoint using the Python SDK. It includes model selection, setting temperature, a system prompt, and a user message.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/get-started\n\nLANGUAGE: Python\nCODE:\n```\nimport anthropic\n\nclient = anthropic.Anthropic()\n\nmessage = client.messages.create(\n    model=\"claude-opus-4-20250514\",\n    max_tokens=1000,\n    temperature=1,\n    system=\"You are a world-class poet. Respond only with short poems.\",\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": \"Why is the ocean salty?\"\n                }\n            ]\n        }\n    ]\n)\nprint(message.content)\n```\n\n----------------------------------------\n\nTITLE: Handle File Not Found Error in Claude Tool Result\nDESCRIPTION: When Claude attempts to access a non-existent file, return this JSON structure as a tool result to indicate a 'File not found' error. Set 'is_error' to true to signal an error condition.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"role\": \"user\",\n  \"content\": [\n    {\n      \"type\": \"tool_result\",\n      \"tool_use_id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"content\": \"Error: File not found\",\n      \"is_error\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Install Claude Code CLI via NPM\nDESCRIPTION: This command installs the Claude Code command-line interface globally using npm, making it accessible from any directory in your terminal. This is the initial step for setting up Claude Code.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/overview\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @anthropic-ai/claude-code\n```\n\n----------------------------------------\n\nTITLE: Basic Streaming Request to Anthropic API with cURL\nDESCRIPTION: Demonstrates how to initiate a streaming conversation with the Anthropic Claude API using a cURL command, setting necessary headers and request body parameters like model, messages, max tokens, and enabling streaming.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/streaming\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --header \"content-type: application/json\" \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --data \\\n'{\n  \"model\": \"claude-opus-4-20250514\",\n  \"messages\": [{\"role\": \"user\", \"content\": \"Hello\"}],\n  \"max_tokens\": 256,\n  \"stream\": true\n}'\n```\n\n----------------------------------------\n\nTITLE: Optimize PDF Processing with Prompt Caching in Claude\nDESCRIPTION: Shows how to enable prompt caching for PDF documents when sending requests to the Claude API. This feature improves performance for repeated analyses of the same document by setting the `cache_control` type to `ephemeral`.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/pdf-support\n\nLANGUAGE: Shell\nCODE:\n```\n# Create a JSON request file using the pdf_base64.txt content\njq -n --rawfile PDF_BASE64 pdf_base64.txt '{\n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"messages\": [{\n        \"role\": \"user\",\n        \"content\": [{\n            \"type\": \"document\",\n            \"source\": {\n                \"type\": \"base64\",\n                \"media_type\": \"application/pdf\",\n                \"data\": $PDF_BASE64\n            },\n            \"cache_control\": {\n              \"type\": \"ephemeral\"\n            }\n        },\n        {\n            \"type\": \"text\",\n            \"text\": \"Which model has the highest human preference win rates across each use-case?\"\n        }]\n    }]\n}' > request.json\n```\n\n----------------------------------------\n\nTITLE: Understand Claude's tool_choice parameter options\nDESCRIPTION: This API documentation outlines the various options available for Claude's `tool_choice` parameter, which controls how Claude decides to use provided tools. Each option dictates a different behavior, from automatic selection to mandatory tool use or complete prevention of tool calls.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: APIDOC\nCODE:\n```\ntool_choice parameter options:\n  - auto: Allows Claude to decide whether to call any provided tools or not. (Default when tools are provided)\n  - any: Tells Claude that it must use one of the provided tools, but doesn’t force a particular tool.\n  - tool: Forces Claude to always use a particular tool.\n  - none: Prevents Claude from using any tools. (Default when no tools are provided)\n```\n\n----------------------------------------\n\nTITLE: Verify AWS CLI credentials for Bedrock access\nDESCRIPTION: After installing and configuring the AWS CLI, execute this command to confirm that your AWS credentials are correctly set up and functional for interacting with AWS services, including Amazon Bedrock.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/claude-on-amazon-bedrock\n\nLANGUAGE: Shell\nCODE:\n```\naws sts get-caller-identity\n```\n\n----------------------------------------\n\nTITLE: Create Claude Message with Go SDK\nDESCRIPTION: This Go code snippet demonstrates how to initialize the Anthropic client and send a message to the Claude API. It sets up a new client with an API key, then creates a message with a specified model, max tokens, and user content, handling potential errors.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/client-sdks\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/anthropics/anthropic-sdk-go\"\n\t\"github.com/anthropics/anthropic-sdk-go/option\"\n)\n\nfunc main() {\n\tclient := anthropic.NewClient(\n\t\toption.WithAPIKey(\"my-anthropic-api-key\"),\n\t)\n\tmessage, err := client.Messages.New(context.TODO(), anthropic.MessageNewParams{\n\t\tModel:     anthropic.F(anthropic.ModelClaudeSonnet4_0),\n\t\tMaxTokens: anthropic.F(int64(1024)),\n\t\tMessages: anthropic.F([]anthropic.MessageParam{\n\t\t\tanthropic.NewUserMessage(anthropic.NewTextBlock(\"What is a quaternion?\")),\n\t\t}),\n\t})\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\tfmt.Printf(\"%+v\\n\", message.Content)\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Claude's Chain of Thought JSON Response\nDESCRIPTION: This JSON snippet demonstrates how Claude Opus 3 model expresses its internal reasoning process (chain of thought) when `tool_choice` is set to `auto`. It shows a `text` content block containing the thinking process and a `tool_use` content block for calling the `get_weather` tool, illustrating a multi-step plan to answer a user query.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"role\": \"assistant\",\n  \"content\": [\n    {\n      \"type\": \"text\",\n      \"text\": \"<thinking>To answer this question, I will: 1. Use the get_weather tool to get the current weather in San Francisco. 2. Use the get_time tool to get the current time in the America/Los_Angeles timezone, which covers San Francisco, CA.</thinking>\"\n    },\n    {\n      \"type\": \"tool_use\",\n      \"id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"name\": \"get_weather\",\n      \"input\": {\"location\": \"San Francisco, CA\"}\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initiate Tool Use with Claude (Multiple Tools)\nDESCRIPTION: Demonstrates how to define multiple tools (get_weather and get_time) in a single request to Claude, allowing the model to select and use the appropriate tool(s) based on the user's query.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --header \"content-type: application/json\" \\\n```\n\nLANGUAGE: Python\nCODE:\n```\n\n```\n\nLANGUAGE: Java\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Report Client Tool Execution Errors to Claude\nDESCRIPTION: When a client-side tool encounters an error during execution (e.g., a network error), return a `tool_result` content block. Include the error message in the `content` field and set `\"is_error\": true`. This allows Claude to incorporate the error into its response to the user.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"role\": \"user\",\n  \"content\": [\n    {\n      \"type\": \"tool_result\",\n      \"tool_use_id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"content\": \"ConnectionError: the weather service API is not available (HTTP 500)\",\n      \"is_error\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Create Claude Message with Ruby SDK\nDESCRIPTION: This Ruby code snippet demonstrates how to initialize the Anthropic client and send a message to the Claude API. It sets up a new client with an API key, then creates a message with a specified model, max tokens, and user content, printing the response.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/client-sdks\n\nLANGUAGE: Ruby\nCODE:\n```\nrequire \"bundler/setup\"\nrequire \"anthropic\"\n\nanthropic = Anthropic::Client.new(\n  api_key: \"my_api_key\" # defaults to ENV[\"ANTHROPIC_API_KEY\"]\n)\n\nmessage =\n  anthropic.messages.create(\n    max_tokens: 1024,\n    messages: [{\n      role: \"user\",\n      content: \"Hello, Claude\"\n    }],\n    model: \"claude-sonnet-4-20250514\"\n  )\n\nputs(message.content)\n```\n\n----------------------------------------\n\nTITLE: Send Message to Anthropic Claude API with cURL\nDESCRIPTION: This cURL command demonstrates how to make a direct HTTP POST request to the Anthropic messages API. It includes setting required headers like 'x-api-key' and 'anthropic-version', and providing a JSON payload with the model name, max tokens, and user message. This is useful for direct API interaction without an SDK.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/getting-started\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --header \"content-type: application/json\" \\\n     --data \\\n'{\n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"messages\": [\n        {\"role\": \"user\", \"content\": \"Hello, world\"}\n    ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Quick Start Example: Using OpenAI SDK with Anthropic API\nDESCRIPTION: This example demonstrates how to configure the OpenAI SDK to interact with the Anthropic API. It shows how to set the base URL, use an Anthropic API key, and specify a Claude model for chat completions.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/openai-sdk\n\nLANGUAGE: Python\nCODE:\n```\nfrom openai import OpenAI\n\nclient = OpenAI(\n    api_key=\"ANTHROPIC_API_KEY\",  # Your Anthropic API key\n    base_url=\"https://api.anthropic.com/v1/\"  # Anthropic's API endpoint\n)\n\nresponse = client.chat.completions.create(\n    model=\"claude-opus-4-20250514\", # Anthropic model name\n    messages=[\n        {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n        {\"role\": \"user\", \"content\": \"Who are you?\"}\n    ],\n)\n\nprint(response.choices[0].message.content)\n```\n\n----------------------------------------\n\nTITLE: Make Streaming API Request to Claude with Tool Use\nDESCRIPTION: This `curl` command demonstrates how to send a streaming API request to the Anthropic Claude model. It defines a `get_weather` tool with a `location` parameter and instructs Claude to use this tool to find the weather in San Francisco, showcasing the beta feature of fine-grained streaming for tool parameter values.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/streaming\n\nLANGUAGE: Shell\nCODE:\n```\n  curl https://api.anthropic.com/v1/messages \\\n    -H \"content-type: application/json\" \\\n    -H \"x-api-key: $ANTHROPIC_API_KEY\" \\\n    -H \"anthropic-version: 2023-06-01\" \\\n    -d '{\n      \"model\": \"claude-opus-4-20250514\",\n      \"max_tokens\": 1024,\n      \"tools\": [\n        {\n          \"name\": \"get_weather\",\n          \"description\": \"Get the current weather in a given location\",\n          \"input_schema\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"location\": {\n                \"type\": \"string\",\n                \"description\": \"The city and state, e.g. San Francisco, CA\"\n              }\n            },\n            \"required\": [\"location\"]\n          }\n        }\n      ],\n      \"tool_choice\": {\"type\": \"any\"},\n      \"messages\": [\n        {\n          \"role\": \"user\",\n          \"content\": \"What is the weather like in San Francisco?\"\n        }\n      ],\n      \"stream\": true\n    }'\n```\n\n----------------------------------------\n\nTITLE: Enable Extended Thinking in Claude API\nDESCRIPTION: This Python snippet demonstrates how to enable Claude's extended thinking feature by setting the `thinking` parameter to `{\"type\": \"enabled\", \"budget_tokens\": 10000}` in the `messages.create` call. It shows how to iterate through the response content to identify and print both `thinking` and `text` blocks, allowing developers to access Claude's internal reasoning.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude_api_primer\n\nLANGUAGE: python\nCODE:\n```\nimport anthropic\n\nclient = anthropic.Anthropic()\n\nresponse = client.messages.create(\n    model=\"claude-sonnet-4-20250514\",\n    max_tokens=16000,\n    thinking={\n        \"type\": \"enabled\",\n        \"budget_tokens\": 10000\n    },\n    messages=[{\n        \"role\": \"user\",\n        \"content\": \"Are there an infinite number of prime numbers such that n mod 4 == 3?\"\n    }]\n)\n\n# The response will contain summarized thinking blocks and text blocks\nfor block in response.content:\n    if block.type == \"thinking\":\n        print(f\"\\nThinking summary: {block.thinking}\")\n    elif block.type == \"text\":\n        print(f\"\\nResponse: {block.text}\")\n```\n\n----------------------------------------\n\nTITLE: Anthropic Claude Computer Use Tool: Parameters\nDESCRIPTION: Defines the parameters required for configuring the Anthropic Claude computer use tool, including type, name, display dimensions, and optional display number, along with performance considerations.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: APIDOC\nCODE:\n```\nParameters:\n  type:\n    Required: Yes\n    Description: Tool version (`computer_20250124` or `computer_20241022`)\n  name:\n    Required: Yes\n    Description: Must be “computer”\n  display_width_px:\n    Required: Yes\n    Description: Display width in pixels\n  display_height_px:\n    Required: Yes\n    Description: Display height in pixels\n  display_number:\n    Required: No\n    Description: Display number for X11 environments\n```\n\n----------------------------------------\n\nTITLE: Configure AWS CLI for Claude Code Bedrock Integration\nDESCRIPTION: This command initializes the AWS CLI configuration, prompting for access key ID, secret access key, region, and output format. It's a standard way to set up AWS credentials for Claude Code to use with Amazon Bedrock.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/amazon-bedrock\n\nLANGUAGE: bash\nCODE:\n```\naws configure\n```\n\n----------------------------------------\n\nTITLE: Provide tools to Claude using Messages API (Shell)\nDESCRIPTION: Demonstrates how to define and provide a custom tool (get_weather) to Claude using the Anthropic Messages API via a curl command. The example shows the tool's schema and a user prompt.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n  -H \"content-type: application/json\" \\\n  -H \"x-api-key: $ANTHROPIC_API_KEY\" \\\n  -H \"anthropic-version: 2023-06-01\" \\\n  -d '{\n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"tools\": [\n      {\n        \"name\": \"get_weather\",\n        \"description\": \"Get the current weather in a given location\",\n        \"input_schema\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"location\": {\n              \"type\": \"string\",\n              \"description\": \"The city and state, e.g. San Francisco, CA\"\n            }\n          },\n          \"required\": [\"location\"]\n        }\n      }\n    ],\n    \"messages\": [\n      {\n        \"role\": \"user\",\n        \"content\": \"What is the weather like in San Francisco?\"\n      }\n    ]\n  }'\n```\n\n----------------------------------------\n\nTITLE: Handle Invalid Coordinates Error for Claude Tool\nDESCRIPTION: Example JSON structure for informing Claude about invalid coordinates provided for an action, specifying the out-of-bounds coordinates and display limits.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"role\": \"user\",\n  \"content\": [\n    {\n      \"type\": \"tool_result\",\n      \"tool_use_id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"content\": \"Error: Coordinates (1200, 900) are outside display bounds (1024x768).\",\n      \"is_error\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Validate Claude Actions in Python\nDESCRIPTION: Python function to validate parameters of requested actions, such as checking if coordinates are within display bounds, before execution to prevent errors.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: Python\nCODE:\n```\ndef validate_action(action_type, params):\n    if action_type == \"left_click\":\n        x, y = params.get(\"coordinate\", (0, 0))\n        if not (0 <= x < display_width and 0 <= y < display_height):\n            return False, \"Coordinates out of bounds\"\n    return True, None\n```\n\n----------------------------------------\n\nTITLE: Enable Vertex AI API using gcloud CLI\nDESCRIPTION: This snippet provides the necessary `gcloud` commands to set your Google Cloud project ID and enable the Vertex AI API within that project. This is a foundational step required before deploying or using Claude models on Vertex AI.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/google-vertex-ai\n\nLANGUAGE: bash\nCODE:\n```\n# Set your project ID\ngcloud config set project YOUR-PROJECT-ID\n\n# Enable Vertex AI API\ngcloud services enable aiplatform.googleapis.com\n```\n\n----------------------------------------\n\nTITLE: Moderate Messages with Anthropic Claude (Python)\nDESCRIPTION: Implements a Python function `moderate_message` that leverages the Anthropic Claude AI model for content moderation. It dynamically constructs a prompt with a user message and a list of unsafe categories, then parses Claude's JSON response to identify violations, associated categories, and an optional explanation. The function uses Claude Haiku for cost-effectiveness and sets temperature to 0 for consistent results.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/about-claude/use-case-guides/content-moderation\n\nLANGUAGE: python\nCODE:\n```\nimport anthropic\nimport json\n\n# Initialize the Anthropic client\nclient = anthropic.Anthropic()\n\ndef moderate_message(message, unsafe_categories):\n    # Convert the list of unsafe categories into a string, with each category on a new line\n    unsafe_category_str = '\\n'.join(unsafe_categories)\n\n    # Construct the prompt for Claude, including the message and unsafe categories\n    assessment_prompt = f\"\"\"\n    Determine whether the following message warrants moderation,\n    based on the unsafe categories outlined below.\n\n    Message:\n    <message>{message}</message>\n\n    Unsafe Categories:\n    <categories>\n    {unsafe_category_str}\n    </categories>\n\n    Respond with ONLY a JSON object, using the format below:\n    {{\n    \"violation\": <Boolean field denoting whether the message should be moderated>,\n    \"categories\": [Comma-separated list of violated categories],\n    \"explanation\": [Optional. Only include if there is a violation.]\n    }}\"\"\"\n\n    # Send the request to Claude for content moderation\n    response = client.messages.create(\n        model=\"claude-3-haiku-20240307\",  # Using the Haiku model for lower costs\n        max_tokens=200,\n        temperature=0,   # Use 0 temperature for increased consistency\n        messages=[\n            {\"role\": \"user\", \"content\": assessment_prompt}\n        ]\n    )\n\n    # Parse the JSON response from Claude\n    assessment = json.loads(response.content[0].text)\n\n    # Extract the violation status from the assessment\n    contains_violation = assessment['violation']\n\n    # If there's a violation, get the categories and explanation; otherwise, use empty defaults\n    violated_categories = assessment.get('categories', []) if contains_violation else []\n    explanation = assessment.get('explanation') if contains_violation else None\n\n    return contains_violation, violated_categories, explanation\n\n```\n\n----------------------------------------\n\nTITLE: Initiate Tool Use with Claude (Single Tool)\nDESCRIPTION: Send an initial message to Claude, defining a single tool (get_weather) and posing a user query. Claude is expected to respond by indicating its intent to use the tool.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --header \"content-type: application/json\" \\\n     --data \\\n'{\n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"tools\": [{\n        \"name\": \"get_weather\",\n        \"description\": \"Get the current weather in a given location\",\n        \"input_schema\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"location\": {\n                    \"type\": \"string\",\n                    \"description\": \"The city and state, e.g. San Francisco, CA\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"enum\": [\"celsius\", \"fahrenheit\"],\n                    \"description\": \"The unit of temperature, either \\\"celsius\\\" or \\\"fahrenheit\\\"\"\n                }\n            },\n            \"required\": [\"location\"]\n        }\n    }],\n    \"messages\": [{\"role\": \"user\", \"content\": \"What is the weather like in San Francisco?\"}]\n}'\n```\n\nLANGUAGE: Python\nCODE:\n```\n\n```\n\nLANGUAGE: Java\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Define Sequential Tools for Claude API Call (Shell/JSON)\nDESCRIPTION: This snippet provides an example of defining sequential tools for the Anthropic Claude API. It shows how `get_location` can be called first to obtain a user's location, and then that location can be used as input for the `get_weather` tool in a subsequent call, illustrating a multi-step tool execution flow.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --header \"content-type: application/json\" \\\n     --data \\\n'{\n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"tools\": [\n        {\n            \"name\": \"get_location\",\n            \"description\": \"Get the current user location based on their IP address. This tool has no parameters or arguments.\",\n            \"input_schema\": {\n                \"type\": \"object\",\n                \"properties\": {}\n            }\n        },\n        {\n            \"name\": \"get_weather\",\n            \"description\": \"Get the current weather in a given location\",\n            \"input_schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"location\": {\n                        \"type\": \"string\",\n                        \"description\": \"The city and state, e.g. San Francisco, CA\"\n                    },\n                    \"unit\": {\n                        \"type\": \"string\",\n                        \"enum\": [\"celsius\", \"fahrenheit\"],\n                        \"description\": \"The unit of temperature, either 'celsius' or 'fahrenheit'\"\n                    }\n                },\n                \"required\": [\"location\"]\n            }\n        }\n    ],\n    \"messages\": [{\n        \"role\": \"user\",\n        \"content\": \"What is the weather like where I am?\"\n    }]\n}'\n```\n\n----------------------------------------\n\nTITLE: Make a Streaming Request with Extended Thinking to Anthropic Messages API\nDESCRIPTION: This cURL command sends a request to the Anthropic Messages API to get a streaming response, including Claude's internal 'thinking' process. It uses the 'claude-opus-4-20250514' model, sets a high max_tokens limit, enables streaming, and configures a budget for the 'thinking' output.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/streaming\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --header \"content-type: application/json\" \\\n     --data \\\n'{ \n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 20000,\n    \"stream\": true,\n    \"thinking\": {\n        \"type\": \"enabled\",\n        \"budget_tokens\": 16000\n    },\n    \"messages\": [\n        {\n            \"role\": \"user\",\n            \"content\": \"What is 27 * 453?\"\n        }\n    ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Importing individual preferences into CLAUDE.md\nDESCRIPTION: This example shows how to import individual preferences from a user's home directory into a CLAUDE.md file. This is a convenient way for team members to provide personal instructions that are not checked into the repository, replacing the deprecated CLAUDE.local.md.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/memory\n\nLANGUAGE: Markdown\nCODE:\n```\n# Individual Preferences\n- @~/.claude/my-project-instructions.md\n\n```\n\n----------------------------------------\n\nTITLE: Send Multiple Images to Claude API with System Prompt (Base64)\nDESCRIPTION: This Python snippet illustrates how to send multiple Base64-encoded images to the Claude API while also providing a system prompt. The system prompt allows developers to set a specific behavior or instruction for the model, such as requiring responses in a particular language, before processing the user's image-based query.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/vision\n\nLANGUAGE: Python\nCODE:\n```\nmessage = client.messages.create(\n    model=\"claude-sonnet-4-20250514\",\n    max_tokens=1024,\n    system=\"Respond only in Spanish.\",\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": \"Image 1:\"\n                },\n                {\n                    \"type\": \"image\",\n                    \"source\": {\n                        \"type\": \"base64\",\n                        \"media_type\": image1_media_type,\n                        \"data\": image1_data\n                    }\n                },\n                {\n                    \"type\": \"text\",\n                    \"text\": \"Image 2:\"\n                },\n                {\n                    \"type\": \"image\",\n                    \"source\": {\n                        \"type\": \"base64\",\n                        \"media_type\": image2_media_type,\n                        \"data\": image2_data\n                    }\n                },\n                {\n                    \"type\": \"text\",\n                    \"text\": \"How are these images different?\"\n                }\n            ]\n        }\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Claude Tool Use Output with Inferred Parameters (JSON)\nDESCRIPTION: This JSON snippet demonstrates a `tool_use` block returned by Claude when it attempts to infer missing required parameters for a tool call. In this example, Claude infers 'New York, NY' and 'fahrenheit' for the `get_weather` tool, even if the user prompt didn't explicitly provide them.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"type\": \"tool_use\",\n  \"id\": \"toolu_01A09q90qw90lq917835lq9\",\n  \"name\": \"get_weather\",\n  \"input\": {\"location\": \"New York, NY\", \"unit\": \"fahrenheit\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Anthropic Claude Tool Definitions (APIDOC)\nDESCRIPTION: This section documents the structure for defining tools that can be used with Anthropic's Claude API. It includes examples of `get_weather`, `get_time`, and `get_location` tools, detailing their names, descriptions, and input schemas with parameter types, descriptions, and required fields.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: APIDOC\nCODE:\n```\nTool: get_weather\n  Description: Get the current weather in a given location\n  Input Schema:\n    type: object\n    properties:\n      location:\n        type: string\n        description: The city and state, e.g. San Francisco, CA\n      unit:\n        type: string\n        enum: [\"celsius\", \"fahrenheit\"]\n        description: The unit of temperature, either 'celsius' or 'fahrenheit'\n    required: [\"location\"]\n\nTool: get_time\n  Description: Get the current time in a given time zone\n  Input Schema:\n    type: object\n    properties:\n      timezone:\n        type: string\n        description: The IANA time zone name, e.g. America/Los_Angeles\n    required: [\"timezone\"]\n\nTool: get_location\n  Description: Get the current user location based on their IP address. This tool has no parameters or arguments.\n  Input Schema:\n    type: object\n    properties: {}\n```\n\n----------------------------------------\n\nTITLE: Configure Claude Code Telemetry and Reporting Behaviors\nDESCRIPTION: Details the default behaviors of Statsig (metrics), Sentry (errors), and Anthropic API (/bug reports) across different API providers (Anthropic, Vertex, Bedrock) and how to modify them using environment variables. It also includes a global opt-out variable.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/data-usage\n\nLANGUAGE: APIDOC\nCODE:\n```\nAPI Provider Configuration:\n  Anthropic API:\n    Statsig (Metrics):\n      Default: On\n      Disable: DISABLE_TELEMETRY=1\n    Sentry (Errors):\n      Default: On\n      Disable: DISABLE_ERROR_REPORTING=1\n    Anthropic API (/bug reports):\n      Default: On\n      Disable: DISABLE_BUG_COMMAND=1\n  Vertex API:\n    Statsig (Metrics):\n      Default: Off\n      Enable: CLAUDE_CODE_USE_VERTEX=1\n    Sentry (Errors):\n      Default: Off\n      Enable: CLAUDE_CODE_USE_VERTEX=1\n    Anthropic API (/bug reports):\n      Default: Off\n      Enable: CLAUDE_CODE_USE_VERTEX=1\n  Bedrock API:\n    Statsig (Metrics):\n      Default: Off\n      Enable: CLAUDE_CODE_USE_BEDROCK=1\n    Sentry (Errors):\n      Default: Off\n      Enable: CLAUDE_CODE_USE_BEDROCK=1\n    Anthropic API (/bug reports):\n      Default: Off\n      Enable: CLAUDE_CODE_USE_BEDROCK=1\nGlobal Opt-out:\n  CLAUDE_CODE_DISABLE_NONESSENTIAL_TRAFFIC: Disables all non-essential traffic (error reporting, telemetry, bug reporting) when using Bedrock or Vertex.\n```\n\n----------------------------------------\n\nTITLE: Integrate Web Search Tool with Claude API using cURL\nDESCRIPTION: Demonstrates how to make an API request to Claude with the web search tool enabled. This example shows a user message asking about TypeScript updates and includes the `web_search_20250305` tool in the request payload, limiting its uses to 5.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/web-search-tool\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n    --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n    --header \"anthropic-version: 2023-06-01\" \\\n    --header \"content-type: application/json\" \\\n    --data '{\n        \"model\": \"claude-opus-4-20250514\",\n        \"max_tokens\": 1024,\n        \"messages\": [\n            {\n                \"role\": \"user\",\n                \"content\": \"How do I update a web app to TypeScript 5.5?\"\n            }\n        ],\n        \"tools\": [{\n            \"type\": \"web_search_20250305\",\n            \"name\": \"web_search\",\n            \"max_uses\": 5\n        }]\n    }'\n```\n\n----------------------------------------\n\nTITLE: Implement Content Risk Assessment with Anthropic Claude\nDESCRIPTION: This Python code defines the `assess_risk_level` function, which uses the Anthropic Claude API to evaluate the risk level of a given message against a set of unsafe categories. It constructs a detailed prompt for Claude, specifying risk levels (0-3) and requiring a JSON response. The function initializes the Anthropic client, sends the message to the 'claude-3-haiku-20240307' model, parses the JSON output, and returns the risk level, violated categories, and an optional explanation. The subsequent loop demonstrates how to use this function to process user comments and print the assessment results.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/about-claude/use-case-guides/content-moderation\n\nLANGUAGE: python\nCODE:\n```\nimport anthropic\nimport json\n\n# Initialize the Anthropic client\nclient = anthropic.Anthropic()\n\ndef assess_risk_level(message, unsafe_categories):\n    # Convert the list of unsafe categories into a string, with each category on a new line\n    unsafe_category_str = '\\n'.join(unsafe_categories)\n\n    # Construct the prompt for Claude, including the message, unsafe categories, and risk level definitions\n    assessment_prompt = f\"\"\"\n    Assess the risk level of the following message warrants moderation,\n    based on the unsafe categories listed below.\n\nMessage:\n<message>{message}</message>\n\nUnsafe Categories:\n<categories>\n{unsafe_category_str}\n</categories>\n\nAssign a risk level based on your confidence that the user's message should be moderated\nbased on the defined unsafe categories:\n\n0 - No risk\n1 - Low risk\n2 - Medium risk\n3 - High risk\n\nRespond with ONLY a JSON object, using the format below:\n{{\n  \"risk_level\": <Numerical field denoting the risk level>,\n  \"categories\": [Comma-separated list of violated categories],\n  \"explanation\": <Optional. Only include if risk level is greater than 0>\n}}\"\"\"\n\n    # Send the request to Claude for risk assessment\n    response = client.messages.create(\n        model=\"claude-3-haiku-20240307\",  # Using the Haiku model for lower costs\n        max_tokens=200,\n        temperature=0,   # Use 0 temperature for increased consistency\n        messages=[\n            {\"role\": \"user\", \"content\": assessment_prompt}\n        ]\n    )\n\n    # Parse the JSON response from Claude\n    assessment = json.loads(response.content[0].text)\n\n    # Extract the risk level, violated categories, and explanation from the assessment\n    risk_level = assessment[\"risk_level\"]\n    violated_categories = assessment[\"categories\"]\n    explanation = assessment.get(\"explanation\")\n\n    return risk_level, violated_categories, explanation\n\n# Process each comment and print the results\nfor comment in user_comments:\n    print(f\"\\nComment: {comment}\")\n    risk_level, violated_categories, explanation = assess_risk_level(comment, unsafe_categories)\n\n    print(f\"Risk Level: {risk_level}\")\n    if violated_categories:\n        print(f\"Violated Categories: {', '.join(violated_categories)}\")\n    if explanation:\n        print(f\"Explanation: {explanation}\")\n```\n\n----------------------------------------\n\nTITLE: Example JSON Payloads for Claude Computer Use Actions\nDESCRIPTION: Provides concrete JSON examples for invoking various actions supported by the Anthropic Claude computer use tool, demonstrating the required structure and parameters for screenshot, left_click, type, and scroll.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"action\": \"screenshot\"\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"action\": \"left_click\",\n  \"coordinate\": [500, 300]\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"action\": \"type\",\n  \"text\": \"Hello, world!\"\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"action\": \"scroll\",\n  \"coordinate\": [500, 400],\n  \"scroll_direction\": \"down\",\n  \"scroll_amount\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Generate examples of content to moderate\nDESCRIPTION: This section guides users on how to prepare for developing a content moderation solution by generating diverse content examples. It emphasizes including edge cases and challenging scenarios to thoroughly test the system. The provided Python code snippet illustrates how to create lists of 'allowed' and 'disallowed' user comments, which can then be combined to form a comprehensive set of sample data for testing content moderation models.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/about-claude/use-case-guides/content-moderation\n\nLANGUAGE: Python\nCODE:\n```\nallowed_user_comments = [\n    'This movie was great, I really enjoyed it. The main actor really killed it!',\n    'I hate Mondays.',\n    'It is a great time to invest in gold!'\n]\n\ndisallowed_user_comments = [\n    'Delete this post now or you better hide. I am coming after you and your family.',\n    'Stay away from the 5G cellphones!! They are using 5G to control you.',\n    'Congratulations! You have won a $1,000 gift card. Click here to claim your prize!'\n]\n\n# Sample user comments to test the content moderation\nuser_comments = allowed_user_comments + disallowed_user_comments\n```\n\n----------------------------------------\n\nTITLE: Anthropic Claude Computer Use Tool: Available Actions\nDESCRIPTION: Lists all supported actions for the Anthropic Claude computer use tool, categorized into basic and enhanced versions, detailing their purpose.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: APIDOC\nCODE:\n```\nActions:\n  Basic actions (all versions):\n    screenshot: Capture the current display\n    left_click: Click at coordinates [x, y]\n    type: Type text string\n    key: Press key or key combination (e.g., “ctrl+s”)\n    mouse_move: Move cursor to coordinates\n  Enhanced actions (computer_20250124):\n    scroll: Scroll in any direction with amount control\n    left_click_drag: Click and drag between coordinates\n    right_click: Additional mouse button\n    middle_click: Additional mouse button\n    double_click: Multiple clicks\n    triple_click: Multiple clicks\n    left_mouse_down: Fine-grained click control\n    left_mouse_up: Fine-grained click control\n    hold_key: Hold a key while performing other actions\n    wait: Pause between actions\n```\n\n----------------------------------------\n\nTITLE: API Parameter: Tool Choice Type\nDESCRIPTION: Specifies the type of tool choice strategy. Currently, only `auto` is an available option.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages\n\nLANGUAGE: APIDOC\nCODE:\n```\ntool_choice.type\n\nenum<string>\n\nrequired\n\nAvailable options:\n\n`auto`\n```\n\n----------------------------------------\n\nTITLE: Configure Claude Code for Events and Logs Telemetry\nDESCRIPTION: This snippet configures environment variables to enable OpenTelemetry logs export for Claude Code, sending logs to a local OTLP gRPC endpoint. It focuses on collecting events and logs, excluding metrics.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/monitoring-usage\n\nLANGUAGE: bash\nCODE:\n```\nexport CLAUDE_CODE_ENABLE_TELEMETRY=1\nexport OTEL_LOGS_EXPORTER=otlp\nexport OTEL_EXPORTER_OTLP_PROTOCOL=grpc\nexport OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317\n```\n\n----------------------------------------\n\nTITLE: Initialize Claude Computer Use Tools with Python\nDESCRIPTION: This snippet demonstrates how to initialize the Anthropic client and create a message using the `beta.messages.create` method, enabling Claude's 'computer use' tools such as `computer`, `text_editor`, and `bash`. It specifies the model, maximum tokens, and includes a user message. The example also highlights the beta header requirements for different Claude models when using these tools.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: Python\nCODE:\n```\nimport anthropic\n\nclient = anthropic.Anthropic()\n\nresponse = client.beta.messages.create(\n    model=\"claude-sonnet-4-20250514\",  # or another compatible model\n    max_tokens=1024,\n    tools=[\n        {\n          \"type\": \"computer_20250124\",\n          \"name\": \"computer\",\n          \"display_width_px\": 1024,\n          \"display_height_px\": 768,\n          \"display_number\": 1,\n        },\n        {\n          \"type\": \"text_editor_20250124\",\n          \"name\": \"str_replace_editor\"\n        },\n        {\n          \"type\": \"bash_20250124\",\n          \"name\": \"bash\"\n        }\n    ],\n    messages=[{\"role\": \"user\", \"content\": \"Save a picture of a cat to my desktop.\"}\n],\n    betas=[\"computer-use-2025-01-24\"]\n)\nprint(response)\n\n```\n\n----------------------------------------\n\nTITLE: Anthropic Claude API: System Role Message Fields\nDESCRIPTION: Details the fields available for messages with the 'system' role in the Anthropic Claude API. System messages are hoisted to the beginning of the conversation as part of the initial system message.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/openai-sdk\n\nLANGUAGE: APIDOC\nCODE:\n```\n| Field   | Support status           |\n| ------- | ------------------------ |\n| `content` | Fully supported, but hoisted |\n| `name`    | Ignored                  |\n```\n\n----------------------------------------\n\nTITLE: API Parameter: Tool Choice Strategy\nDESCRIPTION: Defines how the model should use provided tools. Options include using a specific tool, any tool, deciding itself, or not using tools at all.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages\n\nLANGUAGE: APIDOC\nCODE:\n```\ntool_choice\n\nobject\n\nHow the model should use the provided tools. The model can use a specific tool, any available tool, decide by itself, or not use tools at all.\n\n* Auto\n* Any\n* Tool\n* None\n\nShow child attributes\n```\n\n----------------------------------------\n\nTITLE: Anthropic Claude API: Tool Role Message Fields\nDESCRIPTION: Details the fields available for messages with the 'tool' role in the Anthropic Claude API. This includes content variations (string, array with text type), tool_call_id, tool_choice, and name fields.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/openai-sdk\n\nLANGUAGE: APIDOC\nCODE:\n```\n| Field         | Variant                  | Support status |\n| ------------- | ------------------------ | -------------- |\n| `content`     | `string`                 | Fully supported|\n| `content`     | `array`, `type == \"text\"` | Fully supported|\n| `tool_call_id`| N/A                      | Fully supported|\n| `tool_choice` | N/A                      | Fully supported|\n| `name`        | N/A                      | Ignored        |\n```\n\n----------------------------------------\n\nTITLE: Making a Claude API Request with Web Search and Cache Control\nDESCRIPTION: This Python snippet demonstrates how to append messages to a conversation, make a Claude API request using the 'web_search_20250305' tool, and apply 'cache_control' to manage caching behavior. It includes specifying user location for relevant search results and shows how to access cache read tokens from the response.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/web-search-tool\n\nLANGUAGE: Python\nCODE:\n```\nmessages.append({\n    \"role\": \"assistant\",\n    \"content\": response1.content\n})\n\n# Second request with cache breakpoint after the search results\nmessages.append({\n    \"role\": \"user\",\n    \"content\": \"Should I expect rain later this week?\",\n    \"cache_control\": {\"type\": \"ephemeral\"}  # Cache up to this point\n})\n\nresponse2 = client.messages.create(\n    model=\"claude-opus-4-20250514\",\n    max_tokens=1024,\n    messages=messages,\n    tools=[{\n        \"type\": \"web_search_20250305\",\n        \"name\": \"web_search\",\n        \"user_location\": {\n            \"type\": \"approximate\",\n            \"city\": \"San Francisco\",\n            \"region\": \"California\",\n            \"country\": \"US\",\n            \"timezone\": \"America/Los_Angeles\"\n        }\n    }]\n)\n# The second response will benefit from cached search results\n# while still being able to perform new searches if needed\nprint(f\"Cache read tokens: {response2.usage.get('cache_read_input_tokens', 0)}\")\n```\n\n----------------------------------------\n\nTITLE: Constructing the Claude API tool use system prompt template\nDESCRIPTION: This template illustrates how Anthropic constructs the system prompt when the `tools` parameter is used in an API request. It combines formatting instructions, JSON Schema tool definitions, any user-specified system prompt, and tool configuration to provide the necessary context for the model to operate properly.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: APIDOC\nCODE:\n```\nIn this environment you have access to a set of tools you can use to answer the user's question.\n{{ FORMATTING INSTRUCTIONS }}\nString and scalar parameters should be specified as is, while lists and objects should use JSON format. Note that spaces for string values are not stripped. The output is not expected to be valid XML and is parsed with regular expressions.\nHere are the functions available in JSONSchema format:\n{{ TOOL DEFINITIONS IN JSON SCHEMA }}\n{{ USER SYSTEM PROMPT }}\n{{ TOOL CONFIGURATION }}\n```\n\n----------------------------------------\n\nTITLE: Define a simple weather tool using JSON Schema for Claude API\nDESCRIPTION: This JSON schema defines a `get_weather` tool for use with Anthropic's Claude API. It specifies the tool's name, a detailed description of its functionality, and an input schema requiring a `location` string and an optional `unit` string, which must be either 'celsius' or 'fahrenheit'.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"get_weather\",\n  \"description\": \"Get the current weather in a given location\",\n  \"input_schema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"location\": {\n        \"type\": \"string\",\n        \"description\": \"The city and state, e.g. San Francisco, CA\"\n      },\n      \"unit\": {\n        \"type\": \"string\",\n        \"enum\": [\"celsius\", \"fahrenheit\"],\n        \"description\": \"The unit of temperature, either 'celsius' or 'fahrenheit'\"\n      }\n    },\n    \"required\": [\"location\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Claude Multi-Tool Chaining Dialogue Example\nDESCRIPTION: Illustrates a multi-turn conversation where Claude chains `get_location` and `get_weather` tool calls to answer a user's query, demonstrating the flow of information and tool result integration into a natural language response.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: Dialogue\nCODE:\n```\n| --- | --- |\n| User | What’s the weather like where I am? |\n| Assistant | <thinking>To answer this, I first need to determine the user’s location using the get_location tool. Then I can pass that location to the get_weather tool to find the current weather there.</thinking>[Tool use for get_location] |\n| User | [Tool result for get_location with matching id and result of San Francisco, CA] |\n| Assistant | [Tool use for get_weather with the following input]{ “location”: “San Francisco, CA”, “unit”: “fahrenheit” } |\n| User | [Tool result for get_weather with matching id and result of “59°F (15°C), mostly cloudy”] |\n| Assistant | Based on your current location in San Francisco, CA, the weather right now is 59°F (15°C) and mostly cloudy. It’s a fairly cool and overcast day in the city. You may want to bring a light jacket if you’re heading outside. |\n```\n\n----------------------------------------\n\nTITLE: Send Message with Multiple Cache Breakpoints and Tools (cURL)\nDESCRIPTION: This example illustrates how to combine prompt caching with tool definitions and system messages in a single API call. It shows how to define multiple tools with their input schemas and how to apply `cache_control` to both tools and system messages, enabling more granular control over caching behavior for complex interactions.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/prompt-caching\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --header \"content-type: application/json\" \\\n     --data \\\n'{ \n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"tools\": [\n        {\n            \"name\": \"search_documents\",\n            \"description\": \"Search through the knowledge base\",\n            \"input_schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"query\": {\n                        \"type\": \"string\",\n                        \"description\": \"Search query\"\n                    }\n                },\n                \"required\": [\"query\"]\n            }\n        },\n        {\n            \"name\": \"get_document\",\n            \"description\": \"Retrieve a specific document by ID\",\n            \"input_schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"doc_id\": {\n                        \"type\": \"string\",\n                        \"description\": \"Document ID\"\n                    }\n                },\n                \"required\": [\"doc_id\"]\n            },\n            \"cache_control\": {\"type\": \"ephemeral\"}\n        }\n    ],\n    \"system\": [\n        {\n            \"type\": \"text\",\n            \"text\": \"You are a helpful research assistant with access to a document knowledge base.\\n\\n# Instructions\\n- Always search for relevant documents before answering\\n- Provide citations for your sources\\n- Be objective and accurate in your responses\\n- If multiple documents contain relevant information, synthesize them\\n- Acknowledge when information is not available in the knowledge base\",\n            \"cache_control\": {\"type\": \"ephemeral\"}\n        },\n        {\n            \"type\": \"text\",\n```\n\n----------------------------------------\n\nTITLE: Effective Prompting Strategies for Claude\nDESCRIPTION: Provides key strategies and example prompt snippets to optimize Claude's performance and output quality for various tasks, including explicit instructions, handling UI elements, and secure credential handling.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: Prompt\nCODE:\n```\nAfter each step, take a screenshot and carefully evaluate if you have achieved the right outcome. Explicitly show your thinking: \"I have evaluated step X...\" If not correct, try again. Only when you confirm a step was executed correctly should you move on to the next one.\n```\n\nLANGUAGE: XML\nCODE:\n```\n<robot_credentials>...</robot_credentials>\n```\n\n----------------------------------------\n\nTITLE: Handle Claude Computer Actions with Python\nDESCRIPTION: Defines a Python function to dispatch various computer actions requested by Claude, such as screenshot capture, mouse clicks, and text typing, based on the action type and provided parameters.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: Python\nCODE:\n```\ndef handle_computer_action(action_type, params):\n    if action_type == \"screenshot\":\n        return capture_screenshot()\n    elif action_type == \"left_click\":\n        x, y = params[\"coordinate\"]\n        return click_at(x, y)\n    elif action_type == \"type\":\n        return type_text(params[\"text\"])\n    # ... handle other actions\n```\n\n----------------------------------------\n\nTITLE: Update Workspace Member Role with cURL\nDESCRIPTION: Modifies the role of an existing member within a specified workspace. The workspace ID, user ID, and the new workspace role must be provided, along with an admin API key.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/administration-api\n\nLANGUAGE: Shell\nCODE:\n```\ncurl --request POST \"https://api.anthropic.com/v1/organizations/workspaces/{workspace_id}/members/{user_id}\" \\\n  --header \"anthropic-version: 2023-06-01\" \\\n  --header \"x-api-key: $ANTHROPIC_ADMIN_KEY\" \\\n  --data '{\n    \"workspace_role\": \"workspace_admin\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Define `get_weather` Tool with JSON Schema\nDESCRIPTION: This JSON snippet defines a `get_weather` tool, specifying its name, a brief description, and an `input_schema` using JSON Schema. The schema details the expected parameters (`location` and `unit`) for the tool, including their types, descriptions, and required fields.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude_api_primer\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"get_weather\",\n  \"description\": \"Get the current weather in a given location\",\n  \"input_schema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"location\": {\n        \"type\": \"string\",\n        \"description\": \"The city and state, e.g. San Francisco, CA\"\n      },\n      \"unit\": {\n        \"type\": \"string\",\n        \"enum\": [\"celsius\", \"fahrenheit\"],\n        \"description\": \"The unit of temperature, either 'celsius' or 'fahrenheit'\"\n      }\n    },\n    \"required\": [\"location\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Quickly Add Memory Using # Shortcut\nDESCRIPTION: Demonstrates how to quickly add a new memory entry by prefixing your input with the '#' character. This action prompts the user to select a memory file for storage, streamlining the process of capturing immediate insights or instructions.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/memory\n\nLANGUAGE: Shell\nCODE:\n```\n# Always use descriptive variable names\n```\n\n----------------------------------------\n\nTITLE: Add Member to Workspace with cURL\nDESCRIPTION: Adds a new user as a member to a specified workspace, assigning them a particular role. The user ID and desired workspace role must be included in the request body, along with the workspace ID and admin API key.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/administration-api\n\nLANGUAGE: Shell\nCODE:\n```\ncurl --request POST \"https://api.anthropic.com/v1/organizations/workspaces/{workspace_id}/members\" \\\n  --header \"anthropic-version: 2023-06-01\" \\\n  --header \"x-api-key: $ANTHROPIC_ADMIN_KEY\" \\\n  --data '{\n    \"user_id\": \"user_xxx\",\n    \"workspace_role\": \"workspace_developer\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Claude Tool Use for Structured JSON Output (Shell)\nDESCRIPTION: Demonstrates how to configure Claude to produce structured JSON output using a single tool (`record_summary`) and the `tool_choice` parameter. This example shows a `curl` command to interact with the Anthropic API, passing an image and the tool definition.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: Shell\nCODE:\n```\n#!/bin/bash\nIMAGE_URL=\"https://upload.wikimedia.org/wikipedia/commons/a/a7/Camponotus_flavomarginatus_ant.jpg\"\nIMAGE_MEDIA_TYPE=\"image/jpeg\"\nIMAGE_BASE64=$(curl \"$IMAGE_URL\" | base64)\n\ncurl https://api.anthropic.com/v1/messages \\\n     --header \"content-type: application/json\" \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --data \\\n'{\n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"tools\": [{\n        \"name\": \"record_summary\",\n        \"description\": \"Record summary of an image using well-structured JSON.\",\n        \"input_schema\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"key_colors\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"r\": { \"type\": \"number\", \"description\": \"red value [0.0, 1.0]\" },\n                            \"g\": { \"type\": \"number\", \"description\": \"green value [0.0, 1.0]\" },\n```\n\n----------------------------------------\n\nTITLE: Define Multiple Tools for Claude API Call (Shell/JSON)\nDESCRIPTION: This snippet shows an example of defining two independent tools, `get_weather` and `get_time`, within a single Anthropic Claude API request. It illustrates how Claude can use these tools, potentially in parallel or sequentially, to answer a user's query that requires information from both.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --header \"content-type: application/json\" \\\n     --data \\\n'{\n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"tools\": [{\n        \"name\": \"get_weather\",\n        \"description\": \"Get the current weather in a given location\",\n        \"input_schema\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"location\": {\n                    \"type\": \"string\",\n                    \"description\": \"The city and state, e.g. San Francisco, CA\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"enum\": [\"celsius\", \"fahrenheit\"],\n                    \"description\": \"The unit of temperature, either 'celsius' or 'fahrenheit'\"\n                }\n            },\n            \"required\": [\"location\"]\n        }\n    },\n    {\n        \"name\": \"get_time\",\n        \"description\": \"Get the current time in a given time zone\",\n        \"input_schema\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"timezone\": {\n                    \"type\": \"string\",\n                    \"description\": \"The IANA time zone name, e.g. America/Los_Angeles\"\n                }\n            },\n            \"required\": [\"timezone\"]\n        }\n    }],\n    \"messages\": [{\n        \"role\": \"user\",\n        \"content\": \"What is the weather like right now in New York? Also what time is it there?\"\n    }]\n}'\n```"}]}]},"uuid":"12a03198-123d-4b54-b6ef-739017c36de5","timestamp":"2025-08-10T04:14:49.443Z","toolUseResult":[{"type":"text","text":"========================\nCODE SNIPPETS\n========================\nTITLE: Configure OpenTelemetry via Managed Settings File\nDESCRIPTION: Administrators can centralize OpenTelemetry settings for Claude Code by defining environment variables within a `managed-settings.json` file. This example demonstrates configuring telemetry enablement, OTLP exporters for metrics and logs, gRPC protocol, a custom collector endpoint, and authorization headers.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/monitoring-usage\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"env\": {\n    \"CLAUDE_CODE_ENABLE_TELEMETRY\": \"1\",\n    \"OTEL_METRICS_EXPORTER\": \"otlp\",\n    \"OTEL_LOGS_EXPORTER\": \"otlp\",\n    \"OTEL_EXPORTER_OTLP_PROTOCOL\": \"grpc\",\n    \"OTEL_EXPORTER_OTLP_ENDPOINT\": \"http://collector.company.com:4317\",\n    \"OTEL_EXPORTER_OTLP_HEADERS\": \"Authorization=Bearer company-token\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Set Anthropic API Key Environment Variable\nDESCRIPTION: Sets the `ANTHROPIC_API_KEY` environment variable, which the Anthropic SDKs automatically use for authentication. This example is for macOS and Linux.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/get-started\n\nLANGUAGE: Shell\nCODE:\n```\nexport ANTHROPIC_API_KEY='your-api-key-here'\n```\n\n----------------------------------------\n\nTITLE: Configure Claude Code for Metrics Telemetry\nDESCRIPTION: This snippet sets environment variables to enable OpenTelemetry metrics export for Claude Code, directing metrics to a local OTLP gRPC endpoint. It ensures only metrics are collected, without events or logs.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/monitoring-usage\n\nLANGUAGE: bash\nCODE:\n```\nexport CLAUDE_CODE_ENABLE_TELEMETRY=1\nexport OTEL_METRICS_EXPORTER=otlp\nexport OTEL_EXPORTER_OTLP_PROTOCOL=grpc\nexport OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317\n```\n\n----------------------------------------\n\nTITLE: Navigate to Project Directory for Claude Code\nDESCRIPTION: Changes the current working directory to your project's root. This is where you will run Claude Code commands relevant to your project files.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/setup\n\nLANGUAGE: shell\nCODE:\n```\ncd your-project-directory\n```\n\n----------------------------------------\n\nTITLE: Force Claude to use a specific tool with tool_choice\nDESCRIPTION: This snippet shows how to explicitly instruct Claude to use a particular tool by setting the `tool_choice` parameter. This is useful when you want to ensure a specific tool is invoked regardless of Claude's internal reasoning.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: Python\nCODE:\n```\ntool_choice = {\"type\": \"tool\", \"name\": \"get_weather\"}\n```\n\n----------------------------------------\n\nTITLE: Enabling and Configuring Vim Mode in Claude Code\nDESCRIPTION: These commands are used to enable Vim keybindings within Claude Code or to access the general configuration menu. Claude Code supports a subset of Vim commands for mode switching, navigation, and editing.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/setup\n\nLANGUAGE: Shell\nCODE:\n```\n/vim\n```\n\nLANGUAGE: Shell\nCODE:\n```\n/config\n```\n\n----------------------------------------\n\nTITLE: Force Claude to Use a Specific Tool (Python)\nDESCRIPTION: This Python snippet illustrates how to use the `tool_choice` parameter in an API request to explicitly force Claude to use a particular tool by its name. It sets the `type` to 'tool' and specifies the `name` of the desired tool.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude_api_primer\n\nLANGUAGE: python\nCODE:\n```\ntool_choice = {\"type\": \"tool\", \"name\": \"get_weather\"}\n```\n\n----------------------------------------\n\nTITLE: Configure OpenTelemetry for Claude Code\nDESCRIPTION: This snippet provides a quick start guide to configure OpenTelemetry for Claude Code using environment variables. It covers enabling telemetry, selecting metrics and logs exporters (OTLP, Prometheus, console), setting the OTLP endpoint and protocol, configuring authentication headers, and adjusting export intervals for debugging purposes. It also notes the default export intervals and advises resetting them for production.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/monitoring-usage\n\nLANGUAGE: Shell\nCODE:\n```\n# 1. Enable telemetry\nexport CLAUDE_CODE_ENABLE_TELEMETRY=1\n\n# 2. Choose exporters (both are optional - configure only what you need)\nexport OTEL_METRICS_EXPORTER=otlp       # Options: otlp, prometheus, console\nexport OTEL_LOGS_EXPORTER=otlp          # Options: otlp, console\n\n# 3. Configure OTLP endpoint (for OTLP exporter)\nexport OTEL_EXPORTER_OTLP_PROTOCOL=grpc\nexport OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317\n\n# 4. Set authentication (if required)\nexport OTEL_EXPORTER_OTLP_HEADERS=\"Authorization=Bearer your-token\"\n\n# 5. For debugging: reduce export intervals\nexport OTEL_METRIC_EXPORT_INTERVAL=10000  # 10 seconds (default: 60000ms)\nexport OTEL_LOGS_EXPORT_INTERVAL=5000     # 5 seconds (default: 5000ms)\n\n# 6. Run Claude Code\nclaude\n```\n\n----------------------------------------\n\nTITLE: Configure Claude Code for Vertex AI integration\nDESCRIPTION: This snippet sets environment variables to enable Claude Code's integration with Google Vertex AI. It specifies the region (`us-east5`), your Google Cloud project ID, and includes an optional setting to disable prompt caching, which can be removed once caching is enabled by Google Cloud support.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/google-vertex-ai\n\nLANGUAGE: bash\nCODE:\n```\n# Enable Vertex AI integration\nexport CLAUDE_CODE_USE_VERTEX=1\nexport CLOUD_ML_REGION=us-east5\nexport ANTHROPIC_VERTEX_PROJECT_ID=YOUR-PROJECT-ID\n\n# Optional: Disable prompt caching if not enabled\nexport DISABLE_PROMPT_CACHING=1\n```\n\n----------------------------------------\n\nTITLE: Claude Code OpenTelemetry Environment Variable Reference\nDESCRIPTION: This section details the environment variables available for configuring OpenTelemetry within Claude Code. It covers common settings for telemetry collection, exporter types, OTLP protocols and endpoints, export intervals, and specific variables for controlling metrics cardinality to optimize performance and storage.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/monitoring-usage\n\nLANGUAGE: APIDOC\nCODE:\n```\nCommon Configuration Variables:\n`CLAUDE_CODE_ENABLE_TELEMETRY`: Enables telemetry collection (required). Example Values: `1`\n`OTEL_METRICS_EXPORTER`: Metrics exporter type(s) (comma-separated). Example Values: `console`, `otlp`, `prometheus`\n`OTEL_LOGS_EXPORTER`: Logs/events exporter type(s) (comma-separated). Example Values: `console`, `otlp`\n`OTEL_EXPORTER_OTLP_PROTOCOL`: Protocol for OTLP exporter (all signals). Example Values: `grpc`, `http/json`, `http/protobuf`\n`OTEL_EXPORTER_OTLP_ENDPOINT`: OTLP collector endpoint (all signals). Example Values: `http://localhost:4317`\n`OTEL_EXPORTER_OTLP_METRICS_PROTOCOL`: Protocol for metrics (overrides general). Example Values: `grpc`, `http/json`, `http/protobuf`\n`OTEL_EXPORTER_OTLP_METRICS_ENDPOINT`: OTLP metrics endpoint (overrides general). Example Values: `http://localhost:4318/v1/metrics`\n`OTEL_EXPORTER_OTLP_LOGS_PROTOCOL`: Protocol for logs (overrides general). Example Values: `grpc`, `http/json`, `http/protobuf`\n`OTEL_EXPORTER_OTLP_LOGS_ENDPOINT`: OTLP logs endpoint (overrides general). Example Values: `http://localhost:4318/v1/logs`\n`OTEL_EXPORTER_OTLP_HEADERS`: Authentication headers for OTLP. Example Values: `Authorization=Bearer token`\n`OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY`: Client key for mTLS authentication. Example Values: Path to client key file\n`OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE`: Client certificate for mTLS authentication. Example Values: Path to client cert file\n`OTEL_METRIC_EXPORT_INTERVAL`: Export interval in milliseconds (default: 60000). Example Values: `5000`, `60000`\n`OTEL_LOGS_EXPORT_INTERVAL`: Logs export interval in milliseconds (default: 5000). Example Values: `1000`, `10000`\n`OTEL_LOG_USER_PROMPTS`: Enable logging of user prompt content (default: disabled). Example Values: `1` to enable\n\nMetrics Cardinality Control:\n`OTEL_METRICS_INCLUDE_SESSION_ID`: Include session.id attribute in metrics. Default Value: `true`. Example to Disable: `false`\n`OTEL_METRICS_INCLUDE_VERSION`: Include app.version attribute in metrics. Default Value: `false`. Example to Disable: `true`\n`OTEL_METRICS_INCLUDE_ACCOUNT_UUID`: Include user.account_uuid attribute in metrics. Default Value: `true`. Example to Disable: `false`\n```\n\n----------------------------------------\n\nTITLE: Configure Anthropic Model with Inference Profile ID\nDESCRIPTION: Sets environment variables for Anthropic models using their inference profile IDs, specifying the exact model version and region for direct access.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/amazon-bedrock\n\nLANGUAGE: shell\nCODE:\n```\nexport ANTHROPIC_MODEL='us.anthropic.claude-opus-4-20250514-v1:0'\nexport ANTHROPIC_SMALL_FAST_MODEL='us.anthropic.claude-3-5-haiku-20241022-v1:0'\n```\n\n----------------------------------------\n\nTITLE: Set AWS Credentials using Environment Variables\nDESCRIPTION: This method allows setting AWS access key ID, secret access key, and session token directly as environment variables. This is an alternative to AWS CLI configuration for providing credentials to Claude Code for Bedrock integration.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/amazon-bedrock\n\nLANGUAGE: bash\nCODE:\n```\nexport AWS_ACCESS_KEY_ID=your-access-key-id\nexport AWS_SECRET_ACCESS_KEY=your-secret-access-key\nexport AWS_SESSION_TOKEN=your-session-token\n```\n\n----------------------------------------\n\nTITLE: Set Service Tier for Anthropic Claude API Request (Python)\nDESCRIPTION: Demonstrates how to set the `service_tier` parameter to 'auto' when creating a message with the Anthropic Claude API client. This configuration automatically attempts to use Priority Tier capacity if available, falling back to standard tier otherwise.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/service-tiers\n\nLANGUAGE: Python\nCODE:\n```\nmessage = client.messages.create(\n    model=\"claude-opus-4-20250514\",\n    max_tokens=1024,\n    messages=[{\"role\": \"user\", \"content\": \"Hello, Claude!\"}],\n    service_tier=\"auto\"  # Automatically use Priority Tier when available, fallback to standard\n)\n```\n\n----------------------------------------\n\nTITLE: Start Claude Code Application\nDESCRIPTION: Launches the Claude Code application from the command line. This command initiates the authentication process and prepares the environment for interaction.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/setup\n\nLANGUAGE: shell\nCODE:\n```\nclaude\n```\n\n----------------------------------------\n\nTITLE: Enabling Terminal Bell Notifications for Claude Code\nDESCRIPTION: This command configures Claude Code to use terminal bell notifications upon task completion. Users on macOS should also ensure notification permissions are enabled for their terminal application.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/setup\n\nLANGUAGE: Shell\nCODE:\n```\nclaude config set --global preferredNotifChannel terminal_bell\n```\n\n----------------------------------------\n\nTITLE: Switch AWS Region Environment Variable\nDESCRIPTION: Sets the AWS_REGION environment variable to a specified region, which can resolve region-related issues for subsequent AWS CLI commands or SDK operations.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/amazon-bedrock\n\nLANGUAGE: shell\nCODE:\n```\nexport AWS_REGION=us-east-1\n```\n\n----------------------------------------\n\nTITLE: Generate CLAUDE.md Project Guide\nDESCRIPTION: Initializes and generates a `CLAUDE.md` project guide file in your repository. This file provides an overview and context for your project, which can then be committed.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/setup\n\nLANGUAGE: shell\nCODE:\n```\n/init\n```\n\n----------------------------------------\n\nTITLE: Customize Claude models for Vertex AI\nDESCRIPTION: This snippet demonstrates how to customize the primary and small/fast Claude models used by Claude Code when integrated with Vertex AI. By setting these environment variables, users can override the default models to use specific versions like 'claude-opus-4' or 'claude-3-5-haiku'.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/google-vertex-ai\n\nLANGUAGE: bash\nCODE:\n```\nexport ANTHROPIC_MODEL='claude-opus-4@20250514'\nexport ANTHROPIC_SMALL_FAST_MODEL='claude-3-5-haiku@20241022'\n```\n\n----------------------------------------\n\nTITLE: Fixing OS/Platform Detection Issues in Claude Code WSL Installation\nDESCRIPTION: These commands help resolve errors where WSL might be using Windows `npm` during Claude Code installation. The first command sets the npm OS configuration to Linux, and the second forces installation while bypassing OS checks.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/setup\n\nLANGUAGE: Shell\nCODE:\n```\nnpm config set os linux\n```\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install -g @anthropic-ai/claude-code --force --no-os-check\n```\n\n----------------------------------------\n\nTITLE: Enable Claude Code Bedrock Integration and AWS Region\nDESCRIPTION: These environment variables enable the Bedrock integration for Claude Code and specify the AWS region to be used. The AWS_REGION variable is a required setting for Bedrock integration and is not read from the .aws config file.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/amazon-bedrock\n\nLANGUAGE: bash\nCODE:\n```\n# Enable Bedrock integration\nexport CLAUDE_CODE_USE_BEDROCK=1\nexport AWS_REGION=us-east-1  # or your preferred region\n```\n\n----------------------------------------\n\nTITLE: Configure AWS SSO Profile for Claude Code\nDESCRIPTION: Use this method to log in via AWS SSO and then set the AWS_PROFILE environment variable. This allows Claude Code to use credentials managed by an AWS SSO profile for Bedrock access.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/amazon-bedrock\n\nLANGUAGE: bash\nCODE:\n```\naws sso login --profile=<your-profile-name>\n\nexport AWS_PROFILE=your-profile-name\n```\n\n----------------------------------------\n\nTITLE: Install Claude Code CLI with npm\nDESCRIPTION: Installs the Claude Code command-line interface globally using npm. This requires Node.js 18+ to be pre-installed. Avoid using `sudo` to prevent permission issues.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/setup\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g @anthropic-ai/claude-code\n```\n\n----------------------------------------\n\nTITLE: Handle Screenshot Capture Failure for Claude Tool\nDESCRIPTION: Example JSON structure for returning an error message to Claude when a screenshot capture operation fails, indicating the issue and setting the 'is_error' flag.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"role\": \"user\",\n  \"content\": [\n    {\n      \"type\": \"tool_result\",\n      \"tool_use_id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"content\": \"Error: Failed to capture screenshot. Display may be locked or unavailable.\",\n      \"is_error\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Run a Simple Command in Claude Code Interactive Mode\nDESCRIPTION: Executes a basic command within the Claude Code interactive session. For example, it can be used to summarize the current project's context.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/setup\n\nLANGUAGE: shell\nCODE:\n```\n> summarize this project\n```\n\n----------------------------------------\n\nTITLE: Initiate Claude Conversation with Text Editor Tool\nDESCRIPTION: Demonstrates how to start a conversation with Claude using a `curl` command, providing the `text_editor_20250429` tool and an initial user prompt to fix a syntax error in a file. This sets up the interaction for Claude to begin analyzing the code.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n  -H \"content-type: application/json\" \\\n  -H \"x-api-key: $ANTHROPIC_API_KEY\" \\\n  -H \"anthropic-version: 2023-06-01\" \\\n  -d '{\n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"tools\": [\n      {\n        \"type\": \"text_editor_20250429\",\n        \"name\": \"str_replace_based_edit_tool\"\n      }\n    ],\n    \"messages\": [\n      {\n        \"role\": \"user\",\n        \"content\": \"There'\\''s a syntax error in my primes.py file. Can you help me fix it?\"\n      }\n    ]\n  }'\n```\n\n----------------------------------------\n\nTITLE: Configure Anthropic Model with Application Inference Profile ARN\nDESCRIPTION: Sets the ANTHROPIC_MODEL environment variable using an AWS ARN for an application inference profile, allowing for custom or shared model configurations.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/amazon-bedrock\n\nLANGUAGE: shell\nCODE:\n```\nexport ANTHROPIC_MODEL='arn:aws:bedrock:us-east-2:your-account-id:application-inference-profile/your-model-id'\n```\n\n----------------------------------------\n\nTITLE: Initialize Project Memory with /init Command\nDESCRIPTION: Illustrates the command to bootstrap a CLAUDE.md file for a codebase. This command helps set up a central repository for important project information, conventions, and frequently used commands, facilitating consistent project interaction.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/memory\n\nLANGUAGE: Shell\nCODE:\n```\n> /init\n```\n\n----------------------------------------\n\nTITLE: Shell Examples for Claude Code OpenTelemetry Configuration\nDESCRIPTION: These shell script examples illustrate various ways to configure OpenTelemetry for Claude Code using environment variables. Scenarios include enabling console debugging with short intervals, setting up OTLP/gRPC export, configuring Prometheus export, using multiple exporters, and defining distinct endpoints for metrics and logs.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/monitoring-usage\n\nLANGUAGE: shell\nCODE:\n```\n# Console debugging (1-second intervals)\nexport CLAUDE_CODE_ENABLE_TELEMETRY=1\nexport OTEL_METRICS_EXPORTER=console\nexport OTEL_METRIC_EXPORT_INTERVAL=1000\n\n# OTLP/gRPC\nexport CLAUDE_CODE_ENABLE_TELEMETRY=1\nexport OTEL_METRICS_EXPORTER=otlp\nexport OTEL_EXPORTER_OTLP_PROTOCOL=grpc\nexport OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317\n\n# Prometheus\nexport CLAUDE_CODE_ENABLE_TELEMETRY=1\nexport OTEL_METRICS_EXPORTER=prometheus\n\n# Multiple exporters\nexport CLAUDE_CODE_ENABLE_TELEMETRY=1\nexport OTEL_METRICS_EXPORTER=console,otlp\nexport OTEL_EXPORTER_OTLP_PROTOCOL=http/json\n\n# Different endpoints/backends for metrics and logs\nexport CLAUDE_CODE_ENABLE_TELEMETRY=1\nexport OTEL_METRICS_EXPORTER=otlp\nexport OTEL_LOGS_EXPORTER=otlp\nexport OTEL_EXPORTER_OTLP_METRICS_PROTOCOL=http/protobuf\nexport OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://metrics.company.com:4318\nexport OTEL_EXPORTER_OTLP_LOGS_PROTOCOL=grpc\nexport OTEL_EXPORTER_OTLP_LOGS_ENDPOINT=http://logs.company.com:4317\n```\n\n----------------------------------------\n\nTITLE: Report Tool Execution Error in Anthropic API\nDESCRIPTION: Demonstrates how to report an error that occurs during tool execution by setting `\"is_error\": true` within the `tool_result` content block. This informs Claude that the tool call failed.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude_api_primer\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"role\": \"user\",\n  \"content\": [\n    {\n      \"type\": \"tool_result\",\n      \"tool_use_id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"content\": \"ConnectionError: the weather service API is not available (HTTP 500)\",\n      \"is_error\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Prompt Caching with Claude API Web Search\nDESCRIPTION: Demonstrates how to use prompt caching with the Claude API's web search feature in a multi-turn conversation. It shows setting a `cache_control` breakpoint and making an initial request with web search tools.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/web-search-tool\n\nLANGUAGE: python\nCODE:\n```\nimport anthropic\n\nclient = anthropic.Anthropic()\n\n# First request with web search and cache breakpoint\nmessages = [\n    {\n        \"role\": \"user\",\n        \"content\": \"What's the current weather in San Francisco today?\"\n    }\n]\n\nresponse1 = client.messages.create(\n    model=\"claude-opus-4-20250514\",\n    max_tokens=1024,\n    messages=messages,\n    tools=[{\n        \"type\": \"web_search_20250305\",\n        \"name\": \"web_search\",\n        \"user_location\": {\n            \"type\": \"approximate\",\n            \"city\": \"San Francisco\",\n            \"region\": \"California\",\n            \"country\": \"US\",\n            \"timezone\": \"America/Los_Angeles\"\n        }\n    }]\n)\n```\n\n----------------------------------------\n\nTITLE: Automating Shift+Enter Configuration for Line Breaks in Claude Code\nDESCRIPTION: This command, run within Claude Code, automatically configures Shift+Enter as a more intuitive alternative for entering line breaks in iTerm2 and VS Code terminals.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/setup\n\nLANGUAGE: Shell\nCODE:\n```\n/terminal-setup\n```\n\n----------------------------------------\n\nTITLE: Call Anthropic Claude API (Python)\nDESCRIPTION: Demonstrates how to make a basic API call to the Anthropic Claude messages endpoint using the Python SDK. It includes model selection, setting temperature, a system prompt, and a user message.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/get-started\n\nLANGUAGE: Python\nCODE:\n```\nimport anthropic\n\nclient = anthropic.Anthropic()\n\nmessage = client.messages.create(\n    model=\"claude-opus-4-20250514\",\n    max_tokens=1000,\n    temperature=1,\n    system=\"You are a world-class poet. Respond only with short poems.\",\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": \"Why is the ocean salty?\"\n                }\n            ]\n        }\n    ]\n)\nprint(message.content)\n```\n\n----------------------------------------\n\nTITLE: Handle File Not Found Error in Claude Tool Result\nDESCRIPTION: When Claude attempts to access a non-existent file, return this JSON structure as a tool result to indicate a 'File not found' error. Set 'is_error' to true to signal an error condition.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"role\": \"user\",\n  \"content\": [\n    {\n      \"type\": \"tool_result\",\n      \"tool_use_id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"content\": \"Error: File not found\",\n      \"is_error\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Install Claude Code CLI via NPM\nDESCRIPTION: This command installs the Claude Code command-line interface globally using npm, making it accessible from any directory in your terminal. This is the initial step for setting up Claude Code.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/overview\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @anthropic-ai/claude-code\n```\n\n----------------------------------------\n\nTITLE: Basic Streaming Request to Anthropic API with cURL\nDESCRIPTION: Demonstrates how to initiate a streaming conversation with the Anthropic Claude API using a cURL command, setting necessary headers and request body parameters like model, messages, max tokens, and enabling streaming.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/streaming\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --header \"content-type: application/json\" \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --data \\\n'{\n  \"model\": \"claude-opus-4-20250514\",\n  \"messages\": [{\"role\": \"user\", \"content\": \"Hello\"}],\n  \"max_tokens\": 256,\n  \"stream\": true\n}'\n```\n\n----------------------------------------\n\nTITLE: Optimize PDF Processing with Prompt Caching in Claude\nDESCRIPTION: Shows how to enable prompt caching for PDF documents when sending requests to the Claude API. This feature improves performance for repeated analyses of the same document by setting the `cache_control` type to `ephemeral`.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/pdf-support\n\nLANGUAGE: Shell\nCODE:\n```\n# Create a JSON request file using the pdf_base64.txt content\njq -n --rawfile PDF_BASE64 pdf_base64.txt '{\n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"messages\": [{\n        \"role\": \"user\",\n        \"content\": [{\n            \"type\": \"document\",\n            \"source\": {\n                \"type\": \"base64\",\n                \"media_type\": \"application/pdf\",\n                \"data\": $PDF_BASE64\n            },\n            \"cache_control\": {\n              \"type\": \"ephemeral\"\n            }\n        },\n        {\n            \"type\": \"text\",\n            \"text\": \"Which model has the highest human preference win rates across each use-case?\"\n        }]\n    }]\n}' > request.json\n```\n\n----------------------------------------\n\nTITLE: Understand Claude's tool_choice parameter options\nDESCRIPTION: This API documentation outlines the various options available for Claude's `tool_choice` parameter, which controls how Claude decides to use provided tools. Each option dictates a different behavior, from automatic selection to mandatory tool use or complete prevention of tool calls.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: APIDOC\nCODE:\n```\ntool_choice parameter options:\n  - auto: Allows Claude to decide whether to call any provided tools or not. (Default when tools are provided)\n  - any: Tells Claude that it must use one of the provided tools, but doesn’t force a particular tool.\n  - tool: Forces Claude to always use a particular tool.\n  - none: Prevents Claude from using any tools. (Default when no tools are provided)\n```\n\n----------------------------------------\n\nTITLE: Verify AWS CLI credentials for Bedrock access\nDESCRIPTION: After installing and configuring the AWS CLI, execute this command to confirm that your AWS credentials are correctly set up and functional for interacting with AWS services, including Amazon Bedrock.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/claude-on-amazon-bedrock\n\nLANGUAGE: Shell\nCODE:\n```\naws sts get-caller-identity\n```\n\n----------------------------------------\n\nTITLE: Create Claude Message with Go SDK\nDESCRIPTION: This Go code snippet demonstrates how to initialize the Anthropic client and send a message to the Claude API. It sets up a new client with an API key, then creates a message with a specified model, max tokens, and user content, handling potential errors.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/client-sdks\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/anthropics/anthropic-sdk-go\"\n\t\"github.com/anthropics/anthropic-sdk-go/option\"\n)\n\nfunc main() {\n\tclient := anthropic.NewClient(\n\t\toption.WithAPIKey(\"my-anthropic-api-key\"),\n\t)\n\tmessage, err := client.Messages.New(context.TODO(), anthropic.MessageNewParams{\n\t\tModel:     anthropic.F(anthropic.ModelClaudeSonnet4_0),\n\t\tMaxTokens: anthropic.F(int64(1024)),\n\t\tMessages: anthropic.F([]anthropic.MessageParam{\n\t\t\tanthropic.NewUserMessage(anthropic.NewTextBlock(\"What is a quaternion?\")),\n\t\t}),\n\t})\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\tfmt.Printf(\"%+v\\n\", message.Content)\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Claude's Chain of Thought JSON Response\nDESCRIPTION: This JSON snippet demonstrates how Claude Opus 3 model expresses its internal reasoning process (chain of thought) when `tool_choice` is set to `auto`. It shows a `text` content block containing the thinking process and a `tool_use` content block for calling the `get_weather` tool, illustrating a multi-step plan to answer a user query.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"role\": \"assistant\",\n  \"content\": [\n    {\n      \"type\": \"text\",\n      \"text\": \"<thinking>To answer this question, I will: 1. Use the get_weather tool to get the current weather in San Francisco. 2. Use the get_time tool to get the current time in the America/Los_Angeles timezone, which covers San Francisco, CA.</thinking>\"\n    },\n    {\n      \"type\": \"tool_use\",\n      \"id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"name\": \"get_weather\",\n      \"input\": {\"location\": \"San Francisco, CA\"}\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initiate Tool Use with Claude (Multiple Tools)\nDESCRIPTION: Demonstrates how to define multiple tools (get_weather and get_time) in a single request to Claude, allowing the model to select and use the appropriate tool(s) based on the user's query.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --header \"content-type: application/json\" \\\n```\n\nLANGUAGE: Python\nCODE:\n```\n\n```\n\nLANGUAGE: Java\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Report Client Tool Execution Errors to Claude\nDESCRIPTION: When a client-side tool encounters an error during execution (e.g., a network error), return a `tool_result` content block. Include the error message in the `content` field and set `\"is_error\": true`. This allows Claude to incorporate the error into its response to the user.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"role\": \"user\",\n  \"content\": [\n    {\n      \"type\": \"tool_result\",\n      \"tool_use_id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"content\": \"ConnectionError: the weather service API is not available (HTTP 500)\",\n      \"is_error\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Create Claude Message with Ruby SDK\nDESCRIPTION: This Ruby code snippet demonstrates how to initialize the Anthropic client and send a message to the Claude API. It sets up a new client with an API key, then creates a message with a specified model, max tokens, and user content, printing the response.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/client-sdks\n\nLANGUAGE: Ruby\nCODE:\n```\nrequire \"bundler/setup\"\nrequire \"anthropic\"\n\nanthropic = Anthropic::Client.new(\n  api_key: \"my_api_key\" # defaults to ENV[\"ANTHROPIC_API_KEY\"]\n)\n\nmessage =\n  anthropic.messages.create(\n    max_tokens: 1024,\n    messages: [{\n      role: \"user\",\n      content: \"Hello, Claude\"\n    }],\n    model: \"claude-sonnet-4-20250514\"\n  )\n\nputs(message.content)\n```\n\n----------------------------------------\n\nTITLE: Send Message to Anthropic Claude API with cURL\nDESCRIPTION: This cURL command demonstrates how to make a direct HTTP POST request to the Anthropic messages API. It includes setting required headers like 'x-api-key' and 'anthropic-version', and providing a JSON payload with the model name, max tokens, and user message. This is useful for direct API interaction without an SDK.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/getting-started\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --header \"content-type: application/json\" \\\n     --data \\\n'{\n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"messages\": [\n        {\"role\": \"user\", \"content\": \"Hello, world\"}\n    ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Quick Start Example: Using OpenAI SDK with Anthropic API\nDESCRIPTION: This example demonstrates how to configure the OpenAI SDK to interact with the Anthropic API. It shows how to set the base URL, use an Anthropic API key, and specify a Claude model for chat completions.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/openai-sdk\n\nLANGUAGE: Python\nCODE:\n```\nfrom openai import OpenAI\n\nclient = OpenAI(\n    api_key=\"ANTHROPIC_API_KEY\",  # Your Anthropic API key\n    base_url=\"https://api.anthropic.com/v1/\"  # Anthropic's API endpoint\n)\n\nresponse = client.chat.completions.create(\n    model=\"claude-opus-4-20250514\", # Anthropic model name\n    messages=[\n        {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n        {\"role\": \"user\", \"content\": \"Who are you?\"}\n    ],\n)\n\nprint(response.choices[0].message.content)\n```\n\n----------------------------------------\n\nTITLE: Make Streaming API Request to Claude with Tool Use\nDESCRIPTION: This `curl` command demonstrates how to send a streaming API request to the Anthropic Claude model. It defines a `get_weather` tool with a `location` parameter and instructs Claude to use this tool to find the weather in San Francisco, showcasing the beta feature of fine-grained streaming for tool parameter values.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/streaming\n\nLANGUAGE: Shell\nCODE:\n```\n  curl https://api.anthropic.com/v1/messages \\\n    -H \"content-type: application/json\" \\\n    -H \"x-api-key: $ANTHROPIC_API_KEY\" \\\n    -H \"anthropic-version: 2023-06-01\" \\\n    -d '{\n      \"model\": \"claude-opus-4-20250514\",\n      \"max_tokens\": 1024,\n      \"tools\": [\n        {\n          \"name\": \"get_weather\",\n          \"description\": \"Get the current weather in a given location\",\n          \"input_schema\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"location\": {\n                \"type\": \"string\",\n                \"description\": \"The city and state, e.g. San Francisco, CA\"\n              }\n            },\n            \"required\": [\"location\"]\n          }\n        }\n      ],\n      \"tool_choice\": {\"type\": \"any\"},\n      \"messages\": [\n        {\n          \"role\": \"user\",\n          \"content\": \"What is the weather like in San Francisco?\"\n        }\n      ],\n      \"stream\": true\n    }'\n```\n\n----------------------------------------\n\nTITLE: Enable Extended Thinking in Claude API\nDESCRIPTION: This Python snippet demonstrates how to enable Claude's extended thinking feature by setting the `thinking` parameter to `{\"type\": \"enabled\", \"budget_tokens\": 10000}` in the `messages.create` call. It shows how to iterate through the response content to identify and print both `thinking` and `text` blocks, allowing developers to access Claude's internal reasoning.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude_api_primer\n\nLANGUAGE: python\nCODE:\n```\nimport anthropic\n\nclient = anthropic.Anthropic()\n\nresponse = client.messages.create(\n    model=\"claude-sonnet-4-20250514\",\n    max_tokens=16000,\n    thinking={\n        \"type\": \"enabled\",\n        \"budget_tokens\": 10000\n    },\n    messages=[{\n        \"role\": \"user\",\n        \"content\": \"Are there an infinite number of prime numbers such that n mod 4 == 3?\"\n    }]\n)\n\n# The response will contain summarized thinking blocks and text blocks\nfor block in response.content:\n    if block.type == \"thinking\":\n        print(f\"\\nThinking summary: {block.thinking}\")\n    elif block.type == \"text\":\n        print(f\"\\nResponse: {block.text}\")\n```\n\n----------------------------------------\n\nTITLE: Anthropic Claude Computer Use Tool: Parameters\nDESCRIPTION: Defines the parameters required for configuring the Anthropic Claude computer use tool, including type, name, display dimensions, and optional display number, along with performance considerations.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: APIDOC\nCODE:\n```\nParameters:\n  type:\n    Required: Yes\n    Description: Tool version (`computer_20250124` or `computer_20241022`)\n  name:\n    Required: Yes\n    Description: Must be “computer”\n  display_width_px:\n    Required: Yes\n    Description: Display width in pixels\n  display_height_px:\n    Required: Yes\n    Description: Display height in pixels\n  display_number:\n    Required: No\n    Description: Display number for X11 environments\n```\n\n----------------------------------------\n\nTITLE: Configure AWS CLI for Claude Code Bedrock Integration\nDESCRIPTION: This command initializes the AWS CLI configuration, prompting for access key ID, secret access key, region, and output format. It's a standard way to set up AWS credentials for Claude Code to use with Amazon Bedrock.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/amazon-bedrock\n\nLANGUAGE: bash\nCODE:\n```\naws configure\n```\n\n----------------------------------------\n\nTITLE: Provide tools to Claude using Messages API (Shell)\nDESCRIPTION: Demonstrates how to define and provide a custom tool (get_weather) to Claude using the Anthropic Messages API via a curl command. The example shows the tool's schema and a user prompt.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n  -H \"content-type: application/json\" \\\n  -H \"x-api-key: $ANTHROPIC_API_KEY\" \\\n  -H \"anthropic-version: 2023-06-01\" \\\n  -d '{\n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"tools\": [\n      {\n        \"name\": \"get_weather\",\n        \"description\": \"Get the current weather in a given location\",\n        \"input_schema\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"location\": {\n              \"type\": \"string\",\n              \"description\": \"The city and state, e.g. San Francisco, CA\"\n            }\n          },\n          \"required\": [\"location\"]\n        }\n      }\n    ],\n    \"messages\": [\n      {\n        \"role\": \"user\",\n        \"content\": \"What is the weather like in San Francisco?\"\n      }\n    ]\n  }'\n```\n\n----------------------------------------\n\nTITLE: Handle Invalid Coordinates Error for Claude Tool\nDESCRIPTION: Example JSON structure for informing Claude about invalid coordinates provided for an action, specifying the out-of-bounds coordinates and display limits.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"role\": \"user\",\n  \"content\": [\n    {\n      \"type\": \"tool_result\",\n      \"tool_use_id\": \"toolu_01A09q90qw90lq917835lq9\",\n      \"content\": \"Error: Coordinates (1200, 900) are outside display bounds (1024x768).\",\n      \"is_error\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Validate Claude Actions in Python\nDESCRIPTION: Python function to validate parameters of requested actions, such as checking if coordinates are within display bounds, before execution to prevent errors.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: Python\nCODE:\n```\ndef validate_action(action_type, params):\n    if action_type == \"left_click\":\n        x, y = params.get(\"coordinate\", (0, 0))\n        if not (0 <= x < display_width and 0 <= y < display_height):\n            return False, \"Coordinates out of bounds\"\n    return True, None\n```\n\n----------------------------------------\n\nTITLE: Enable Vertex AI API using gcloud CLI\nDESCRIPTION: This snippet provides the necessary `gcloud` commands to set your Google Cloud project ID and enable the Vertex AI API within that project. This is a foundational step required before deploying or using Claude models on Vertex AI.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/google-vertex-ai\n\nLANGUAGE: bash\nCODE:\n```\n# Set your project ID\ngcloud config set project YOUR-PROJECT-ID\n\n# Enable Vertex AI API\ngcloud services enable aiplatform.googleapis.com\n```\n\n----------------------------------------\n\nTITLE: Moderate Messages with Anthropic Claude (Python)\nDESCRIPTION: Implements a Python function `moderate_message` that leverages the Anthropic Claude AI model for content moderation. It dynamically constructs a prompt with a user message and a list of unsafe categories, then parses Claude's JSON response to identify violations, associated categories, and an optional explanation. The function uses Claude Haiku for cost-effectiveness and sets temperature to 0 for consistent results.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/about-claude/use-case-guides/content-moderation\n\nLANGUAGE: python\nCODE:\n```\nimport anthropic\nimport json\n\n# Initialize the Anthropic client\nclient = anthropic.Anthropic()\n\ndef moderate_message(message, unsafe_categories):\n    # Convert the list of unsafe categories into a string, with each category on a new line\n    unsafe_category_str = '\\n'.join(unsafe_categories)\n\n    # Construct the prompt for Claude, including the message and unsafe categories\n    assessment_prompt = f\"\"\"\n    Determine whether the following message warrants moderation,\n    based on the unsafe categories outlined below.\n\n    Message:\n    <message>{message}</message>\n\n    Unsafe Categories:\n    <categories>\n    {unsafe_category_str}\n    </categories>\n\n    Respond with ONLY a JSON object, using the format below:\n    {{\n    \"violation\": <Boolean field denoting whether the message should be moderated>,\n    \"categories\": [Comma-separated list of violated categories],\n    \"explanation\": [Optional. Only include if there is a violation.]\n    }}\"\"\"\n\n    # Send the request to Claude for content moderation\n    response = client.messages.create(\n        model=\"claude-3-haiku-20240307\",  # Using the Haiku model for lower costs\n        max_tokens=200,\n        temperature=0,   # Use 0 temperature for increased consistency\n        messages=[\n            {\"role\": \"user\", \"content\": assessment_prompt}\n        ]\n    )\n\n    # Parse the JSON response from Claude\n    assessment = json.loads(response.content[0].text)\n\n    # Extract the violation status from the assessment\n    contains_violation = assessment['violation']\n\n    # If there's a violation, get the categories and explanation; otherwise, use empty defaults\n    violated_categories = assessment.get('categories', []) if contains_violation else []\n    explanation = assessment.get('explanation') if contains_violation else None\n\n    return contains_violation, violated_categories, explanation\n\n```\n\n----------------------------------------\n\nTITLE: Initiate Tool Use with Claude (Single Tool)\nDESCRIPTION: Send an initial message to Claude, defining a single tool (get_weather) and posing a user query. Claude is expected to respond by indicating its intent to use the tool.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --header \"content-type: application/json\" \\\n     --data \\\n'{\n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"tools\": [{\n        \"name\": \"get_weather\",\n        \"description\": \"Get the current weather in a given location\",\n        \"input_schema\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"location\": {\n                    \"type\": \"string\",\n                    \"description\": \"The city and state, e.g. San Francisco, CA\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"enum\": [\"celsius\", \"fahrenheit\"],\n                    \"description\": \"The unit of temperature, either \\\"celsius\\\" or \\\"fahrenheit\\\"\"\n                }\n            },\n            \"required\": [\"location\"]\n        }\n    }],\n    \"messages\": [{\"role\": \"user\", \"content\": \"What is the weather like in San Francisco?\"}]\n}'\n```\n\nLANGUAGE: Python\nCODE:\n```\n\n```\n\nLANGUAGE: Java\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Define Sequential Tools for Claude API Call (Shell/JSON)\nDESCRIPTION: This snippet provides an example of defining sequential tools for the Anthropic Claude API. It shows how `get_location` can be called first to obtain a user's location, and then that location can be used as input for the `get_weather` tool in a subsequent call, illustrating a multi-step tool execution flow.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --header \"content-type: application/json\" \\\n     --data \\\n'{\n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"tools\": [\n        {\n            \"name\": \"get_location\",\n            \"description\": \"Get the current user location based on their IP address. This tool has no parameters or arguments.\",\n            \"input_schema\": {\n                \"type\": \"object\",\n                \"properties\": {}\n            }\n        },\n        {\n            \"name\": \"get_weather\",\n            \"description\": \"Get the current weather in a given location\",\n            \"input_schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"location\": {\n                        \"type\": \"string\",\n                        \"description\": \"The city and state, e.g. San Francisco, CA\"\n                    },\n                    \"unit\": {\n                        \"type\": \"string\",\n                        \"enum\": [\"celsius\", \"fahrenheit\"],\n                        \"description\": \"The unit of temperature, either 'celsius' or 'fahrenheit'\"\n                    }\n                },\n                \"required\": [\"location\"]\n            }\n        }\n    ],\n    \"messages\": [{\n        \"role\": \"user\",\n        \"content\": \"What is the weather like where I am?\"\n    }]\n}'\n```\n\n----------------------------------------\n\nTITLE: Make a Streaming Request with Extended Thinking to Anthropic Messages API\nDESCRIPTION: This cURL command sends a request to the Anthropic Messages API to get a streaming response, including Claude's internal 'thinking' process. It uses the 'claude-opus-4-20250514' model, sets a high max_tokens limit, enables streaming, and configures a budget for the 'thinking' output.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/streaming\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --header \"content-type: application/json\" \\\n     --data \\\n'{ \n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 20000,\n    \"stream\": true,\n    \"thinking\": {\n        \"type\": \"enabled\",\n        \"budget_tokens\": 16000\n    },\n    \"messages\": [\n        {\n            \"role\": \"user\",\n            \"content\": \"What is 27 * 453?\"\n        }\n    ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Importing individual preferences into CLAUDE.md\nDESCRIPTION: This example shows how to import individual preferences from a user's home directory into a CLAUDE.md file. This is a convenient way for team members to provide personal instructions that are not checked into the repository, replacing the deprecated CLAUDE.local.md.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/memory\n\nLANGUAGE: Markdown\nCODE:\n```\n# Individual Preferences\n- @~/.claude/my-project-instructions.md\n\n```\n\n----------------------------------------\n\nTITLE: Send Multiple Images to Claude API with System Prompt (Base64)\nDESCRIPTION: This Python snippet illustrates how to send multiple Base64-encoded images to the Claude API while also providing a system prompt. The system prompt allows developers to set a specific behavior or instruction for the model, such as requiring responses in a particular language, before processing the user's image-based query.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/vision\n\nLANGUAGE: Python\nCODE:\n```\nmessage = client.messages.create(\n    model=\"claude-sonnet-4-20250514\",\n    max_tokens=1024,\n    system=\"Respond only in Spanish.\",\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": \"Image 1:\"\n                },\n                {\n                    \"type\": \"image\",\n                    \"source\": {\n                        \"type\": \"base64\",\n                        \"media_type\": image1_media_type,\n                        \"data\": image1_data\n                    }\n                },\n                {\n                    \"type\": \"text\",\n                    \"text\": \"Image 2:\"\n                },\n                {\n                    \"type\": \"image\",\n                    \"source\": {\n                        \"type\": \"base64\",\n                        \"media_type\": image2_media_type,\n                        \"data\": image2_data\n                    }\n                },\n                {\n                    \"type\": \"text\",\n                    \"text\": \"How are these images different?\"\n                }\n            ]\n        }\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Claude Tool Use Output with Inferred Parameters (JSON)\nDESCRIPTION: This JSON snippet demonstrates a `tool_use` block returned by Claude when it attempts to infer missing required parameters for a tool call. In this example, Claude infers 'New York, NY' and 'fahrenheit' for the `get_weather` tool, even if the user prompt didn't explicitly provide them.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"type\": \"tool_use\",\n  \"id\": \"toolu_01A09q90qw90lq917835lq9\",\n  \"name\": \"get_weather\",\n  \"input\": {\"location\": \"New York, NY\", \"unit\": \"fahrenheit\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Anthropic Claude Tool Definitions (APIDOC)\nDESCRIPTION: This section documents the structure for defining tools that can be used with Anthropic's Claude API. It includes examples of `get_weather`, `get_time`, and `get_location` tools, detailing their names, descriptions, and input schemas with parameter types, descriptions, and required fields.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: APIDOC\nCODE:\n```\nTool: get_weather\n  Description: Get the current weather in a given location\n  Input Schema:\n    type: object\n    properties:\n      location:\n        type: string\n        description: The city and state, e.g. San Francisco, CA\n      unit:\n        type: string\n        enum: [\"celsius\", \"fahrenheit\"]\n        description: The unit of temperature, either 'celsius' or 'fahrenheit'\n    required: [\"location\"]\n\nTool: get_time\n  Description: Get the current time in a given time zone\n  Input Schema:\n    type: object\n    properties:\n      timezone:\n        type: string\n        description: The IANA time zone name, e.g. America/Los_Angeles\n    required: [\"timezone\"]\n\nTool: get_location\n  Description: Get the current user location based on their IP address. This tool has no parameters or arguments.\n  Input Schema:\n    type: object\n    properties: {}\n```\n\n----------------------------------------\n\nTITLE: Configure Claude Code Telemetry and Reporting Behaviors\nDESCRIPTION: Details the default behaviors of Statsig (metrics), Sentry (errors), and Anthropic API (/bug reports) across different API providers (Anthropic, Vertex, Bedrock) and how to modify them using environment variables. It also includes a global opt-out variable.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/data-usage\n\nLANGUAGE: APIDOC\nCODE:\n```\nAPI Provider Configuration:\n  Anthropic API:\n    Statsig (Metrics):\n      Default: On\n      Disable: DISABLE_TELEMETRY=1\n    Sentry (Errors):\n      Default: On\n      Disable: DISABLE_ERROR_REPORTING=1\n    Anthropic API (/bug reports):\n      Default: On\n      Disable: DISABLE_BUG_COMMAND=1\n  Vertex API:\n    Statsig (Metrics):\n      Default: Off\n      Enable: CLAUDE_CODE_USE_VERTEX=1\n    Sentry (Errors):\n      Default: Off\n      Enable: CLAUDE_CODE_USE_VERTEX=1\n    Anthropic API (/bug reports):\n      Default: Off\n      Enable: CLAUDE_CODE_USE_VERTEX=1\n  Bedrock API:\n    Statsig (Metrics):\n      Default: Off\n      Enable: CLAUDE_CODE_USE_BEDROCK=1\n    Sentry (Errors):\n      Default: Off\n      Enable: CLAUDE_CODE_USE_BEDROCK=1\n    Anthropic API (/bug reports):\n      Default: Off\n      Enable: CLAUDE_CODE_USE_BEDROCK=1\nGlobal Opt-out:\n  CLAUDE_CODE_DISABLE_NONESSENTIAL_TRAFFIC: Disables all non-essential traffic (error reporting, telemetry, bug reporting) when using Bedrock or Vertex.\n```\n\n----------------------------------------\n\nTITLE: Integrate Web Search Tool with Claude API using cURL\nDESCRIPTION: Demonstrates how to make an API request to Claude with the web search tool enabled. This example shows a user message asking about TypeScript updates and includes the `web_search_20250305` tool in the request payload, limiting its uses to 5.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/web-search-tool\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n    --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n    --header \"anthropic-version: 2023-06-01\" \\\n    --header \"content-type: application/json\" \\\n    --data '{\n        \"model\": \"claude-opus-4-20250514\",\n        \"max_tokens\": 1024,\n        \"messages\": [\n            {\n                \"role\": \"user\",\n                \"content\": \"How do I update a web app to TypeScript 5.5?\"\n            }\n        ],\n        \"tools\": [{\n            \"type\": \"web_search_20250305\",\n            \"name\": \"web_search\",\n            \"max_uses\": 5\n        }]\n    }'\n```\n\n----------------------------------------\n\nTITLE: Implement Content Risk Assessment with Anthropic Claude\nDESCRIPTION: This Python code defines the `assess_risk_level` function, which uses the Anthropic Claude API to evaluate the risk level of a given message against a set of unsafe categories. It constructs a detailed prompt for Claude, specifying risk levels (0-3) and requiring a JSON response. The function initializes the Anthropic client, sends the message to the 'claude-3-haiku-20240307' model, parses the JSON output, and returns the risk level, violated categories, and an optional explanation. The subsequent loop demonstrates how to use this function to process user comments and print the assessment results.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/about-claude/use-case-guides/content-moderation\n\nLANGUAGE: python\nCODE:\n```\nimport anthropic\nimport json\n\n# Initialize the Anthropic client\nclient = anthropic.Anthropic()\n\ndef assess_risk_level(message, unsafe_categories):\n    # Convert the list of unsafe categories into a string, with each category on a new line\n    unsafe_category_str = '\\n'.join(unsafe_categories)\n\n    # Construct the prompt for Claude, including the message, unsafe categories, and risk level definitions\n    assessment_prompt = f\"\"\"\n    Assess the risk level of the following message warrants moderation,\n    based on the unsafe categories listed below.\n\nMessage:\n<message>{message}</message>\n\nUnsafe Categories:\n<categories>\n{unsafe_category_str}\n</categories>\n\nAssign a risk level based on your confidence that the user's message should be moderated\nbased on the defined unsafe categories:\n\n0 - No risk\n1 - Low risk\n2 - Medium risk\n3 - High risk\n\nRespond with ONLY a JSON object, using the format below:\n{{\n  \"risk_level\": <Numerical field denoting the risk level>,\n  \"categories\": [Comma-separated list of violated categories],\n  \"explanation\": <Optional. Only include if risk level is greater than 0>\n}}\"\"\"\n\n    # Send the request to Claude for risk assessment\n    response = client.messages.create(\n        model=\"claude-3-haiku-20240307\",  # Using the Haiku model for lower costs\n        max_tokens=200,\n        temperature=0,   # Use 0 temperature for increased consistency\n        messages=[\n            {\"role\": \"user\", \"content\": assessment_prompt}\n        ]\n    )\n\n    # Parse the JSON response from Claude\n    assessment = json.loads(response.content[0].text)\n\n    # Extract the risk level, violated categories, and explanation from the assessment\n    risk_level = assessment[\"risk_level\"]\n    violated_categories = assessment[\"categories\"]\n    explanation = assessment.get(\"explanation\")\n\n    return risk_level, violated_categories, explanation\n\n# Process each comment and print the results\nfor comment in user_comments:\n    print(f\"\\nComment: {comment}\")\n    risk_level, violated_categories, explanation = assess_risk_level(comment, unsafe_categories)\n\n    print(f\"Risk Level: {risk_level}\")\n    if violated_categories:\n        print(f\"Violated Categories: {', '.join(violated_categories)}\")\n    if explanation:\n        print(f\"Explanation: {explanation}\")\n```\n\n----------------------------------------\n\nTITLE: Example JSON Payloads for Claude Computer Use Actions\nDESCRIPTION: Provides concrete JSON examples for invoking various actions supported by the Anthropic Claude computer use tool, demonstrating the required structure and parameters for screenshot, left_click, type, and scroll.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"action\": \"screenshot\"\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"action\": \"left_click\",\n  \"coordinate\": [500, 300]\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"action\": \"type\",\n  \"text\": \"Hello, world!\"\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"action\": \"scroll\",\n  \"coordinate\": [500, 400],\n  \"scroll_direction\": \"down\",\n  \"scroll_amount\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Generate examples of content to moderate\nDESCRIPTION: This section guides users on how to prepare for developing a content moderation solution by generating diverse content examples. It emphasizes including edge cases and challenging scenarios to thoroughly test the system. The provided Python code snippet illustrates how to create lists of 'allowed' and 'disallowed' user comments, which can then be combined to form a comprehensive set of sample data for testing content moderation models.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/about-claude/use-case-guides/content-moderation\n\nLANGUAGE: Python\nCODE:\n```\nallowed_user_comments = [\n    'This movie was great, I really enjoyed it. The main actor really killed it!',\n    'I hate Mondays.',\n    'It is a great time to invest in gold!'\n]\n\ndisallowed_user_comments = [\n    'Delete this post now or you better hide. I am coming after you and your family.',\n    'Stay away from the 5G cellphones!! They are using 5G to control you.',\n    'Congratulations! You have won a $1,000 gift card. Click here to claim your prize!'\n]\n\n# Sample user comments to test the content moderation\nuser_comments = allowed_user_comments + disallowed_user_comments\n```\n\n----------------------------------------\n\nTITLE: Anthropic Claude Computer Use Tool: Available Actions\nDESCRIPTION: Lists all supported actions for the Anthropic Claude computer use tool, categorized into basic and enhanced versions, detailing their purpose.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: APIDOC\nCODE:\n```\nActions:\n  Basic actions (all versions):\n    screenshot: Capture the current display\n    left_click: Click at coordinates [x, y]\n    type: Type text string\n    key: Press key or key combination (e.g., “ctrl+s”)\n    mouse_move: Move cursor to coordinates\n  Enhanced actions (computer_20250124):\n    scroll: Scroll in any direction with amount control\n    left_click_drag: Click and drag between coordinates\n    right_click: Additional mouse button\n    middle_click: Additional mouse button\n    double_click: Multiple clicks\n    triple_click: Multiple clicks\n    left_mouse_down: Fine-grained click control\n    left_mouse_up: Fine-grained click control\n    hold_key: Hold a key while performing other actions\n    wait: Pause between actions\n```\n\n----------------------------------------\n\nTITLE: API Parameter: Tool Choice Type\nDESCRIPTION: Specifies the type of tool choice strategy. Currently, only `auto` is an available option.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages\n\nLANGUAGE: APIDOC\nCODE:\n```\ntool_choice.type\n\nenum<string>\n\nrequired\n\nAvailable options:\n\n`auto`\n```\n\n----------------------------------------\n\nTITLE: Configure Claude Code for Events and Logs Telemetry\nDESCRIPTION: This snippet configures environment variables to enable OpenTelemetry logs export for Claude Code, sending logs to a local OTLP gRPC endpoint. It focuses on collecting events and logs, excluding metrics.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/monitoring-usage\n\nLANGUAGE: bash\nCODE:\n```\nexport CLAUDE_CODE_ENABLE_TELEMETRY=1\nexport OTEL_LOGS_EXPORTER=otlp\nexport OTEL_EXPORTER_OTLP_PROTOCOL=grpc\nexport OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317\n```\n\n----------------------------------------\n\nTITLE: Initialize Claude Computer Use Tools with Python\nDESCRIPTION: This snippet demonstrates how to initialize the Anthropic client and create a message using the `beta.messages.create` method, enabling Claude's 'computer use' tools such as `computer`, `text_editor`, and `bash`. It specifies the model, maximum tokens, and includes a user message. The example also highlights the beta header requirements for different Claude models when using these tools.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: Python\nCODE:\n```\nimport anthropic\n\nclient = anthropic.Anthropic()\n\nresponse = client.beta.messages.create(\n    model=\"claude-sonnet-4-20250514\",  # or another compatible model\n    max_tokens=1024,\n    tools=[\n        {\n          \"type\": \"computer_20250124\",\n          \"name\": \"computer\",\n          \"display_width_px\": 1024,\n          \"display_height_px\": 768,\n          \"display_number\": 1,\n        },\n        {\n          \"type\": \"text_editor_20250124\",\n          \"name\": \"str_replace_editor\"\n        },\n        {\n          \"type\": \"bash_20250124\",\n          \"name\": \"bash\"\n        }\n    ],\n    messages=[{\"role\": \"user\", \"content\": \"Save a picture of a cat to my desktop.\"}\n],\n    betas=[\"computer-use-2025-01-24\"]\n)\nprint(response)\n\n```\n\n----------------------------------------\n\nTITLE: Anthropic Claude API: System Role Message Fields\nDESCRIPTION: Details the fields available for messages with the 'system' role in the Anthropic Claude API. System messages are hoisted to the beginning of the conversation as part of the initial system message.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/openai-sdk\n\nLANGUAGE: APIDOC\nCODE:\n```\n| Field   | Support status           |\n| ------- | ------------------------ |\n| `content` | Fully supported, but hoisted |\n| `name`    | Ignored                  |\n```\n\n----------------------------------------\n\nTITLE: API Parameter: Tool Choice Strategy\nDESCRIPTION: Defines how the model should use provided tools. Options include using a specific tool, any tool, deciding itself, or not using tools at all.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages\n\nLANGUAGE: APIDOC\nCODE:\n```\ntool_choice\n\nobject\n\nHow the model should use the provided tools. The model can use a specific tool, any available tool, decide by itself, or not use tools at all.\n\n* Auto\n* Any\n* Tool\n* None\n\nShow child attributes\n```\n\n----------------------------------------\n\nTITLE: Anthropic Claude API: Tool Role Message Fields\nDESCRIPTION: Details the fields available for messages with the 'tool' role in the Anthropic Claude API. This includes content variations (string, array with text type), tool_call_id, tool_choice, and name fields.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/openai-sdk\n\nLANGUAGE: APIDOC\nCODE:\n```\n| Field         | Variant                  | Support status |\n| ------------- | ------------------------ | -------------- |\n| `content`     | `string`                 | Fully supported|\n| `content`     | `array`, `type == \"text\"` | Fully supported|\n| `tool_call_id`| N/A                      | Fully supported|\n| `tool_choice` | N/A                      | Fully supported|\n| `name`        | N/A                      | Ignored        |\n```\n\n----------------------------------------\n\nTITLE: Making a Claude API Request with Web Search and Cache Control\nDESCRIPTION: This Python snippet demonstrates how to append messages to a conversation, make a Claude API request using the 'web_search_20250305' tool, and apply 'cache_control' to manage caching behavior. It includes specifying user location for relevant search results and shows how to access cache read tokens from the response.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/web-search-tool\n\nLANGUAGE: Python\nCODE:\n```\nmessages.append({\n    \"role\": \"assistant\",\n    \"content\": response1.content\n})\n\n# Second request with cache breakpoint after the search results\nmessages.append({\n    \"role\": \"user\",\n    \"content\": \"Should I expect rain later this week?\",\n    \"cache_control\": {\"type\": \"ephemeral\"}  # Cache up to this point\n})\n\nresponse2 = client.messages.create(\n    model=\"claude-opus-4-20250514\",\n    max_tokens=1024,\n    messages=messages,\n    tools=[{\n        \"type\": \"web_search_20250305\",\n        \"name\": \"web_search\",\n        \"user_location\": {\n            \"type\": \"approximate\",\n            \"city\": \"San Francisco\",\n            \"region\": \"California\",\n            \"country\": \"US\",\n            \"timezone\": \"America/Los_Angeles\"\n        }\n    }]\n)\n# The second response will benefit from cached search results\n# while still being able to perform new searches if needed\nprint(f\"Cache read tokens: {response2.usage.get('cache_read_input_tokens', 0)}\")\n```\n\n----------------------------------------\n\nTITLE: Constructing the Claude API tool use system prompt template\nDESCRIPTION: This template illustrates how Anthropic constructs the system prompt when the `tools` parameter is used in an API request. It combines formatting instructions, JSON Schema tool definitions, any user-specified system prompt, and tool configuration to provide the necessary context for the model to operate properly.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: APIDOC\nCODE:\n```\nIn this environment you have access to a set of tools you can use to answer the user's question.\n{{ FORMATTING INSTRUCTIONS }}\nString and scalar parameters should be specified as is, while lists and objects should use JSON format. Note that spaces for string values are not stripped. The output is not expected to be valid XML and is parsed with regular expressions.\nHere are the functions available in JSONSchema format:\n{{ TOOL DEFINITIONS IN JSON SCHEMA }}\n{{ USER SYSTEM PROMPT }}\n{{ TOOL CONFIGURATION }}\n```\n\n----------------------------------------\n\nTITLE: Define a simple weather tool using JSON Schema for Claude API\nDESCRIPTION: This JSON schema defines a `get_weather` tool for use with Anthropic's Claude API. It specifies the tool's name, a detailed description of its functionality, and an input schema requiring a `location` string and an optional `unit` string, which must be either 'celsius' or 'fahrenheit'.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"get_weather\",\n  \"description\": \"Get the current weather in a given location\",\n  \"input_schema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"location\": {\n        \"type\": \"string\",\n        \"description\": \"The city and state, e.g. San Francisco, CA\"\n      },\n      \"unit\": {\n        \"type\": \"string\",\n        \"enum\": [\"celsius\", \"fahrenheit\"],\n        \"description\": \"The unit of temperature, either 'celsius' or 'fahrenheit'\"\n      }\n    },\n    \"required\": [\"location\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Claude Multi-Tool Chaining Dialogue Example\nDESCRIPTION: Illustrates a multi-turn conversation where Claude chains `get_location` and `get_weather` tool calls to answer a user's query, demonstrating the flow of information and tool result integration into a natural language response.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: Dialogue\nCODE:\n```\n| --- | --- |\n| User | What’s the weather like where I am? |\n| Assistant | <thinking>To answer this, I first need to determine the user’s location using the get_location tool. Then I can pass that location to the get_weather tool to find the current weather there.</thinking>[Tool use for get_location] |\n| User | [Tool result for get_location with matching id and result of San Francisco, CA] |\n| Assistant | [Tool use for get_weather with the following input]{ “location”: “San Francisco, CA”, “unit”: “fahrenheit” } |\n| User | [Tool result for get_weather with matching id and result of “59°F (15°C), mostly cloudy”] |\n| Assistant | Based on your current location in San Francisco, CA, the weather right now is 59°F (15°C) and mostly cloudy. It’s a fairly cool and overcast day in the city. You may want to bring a light jacket if you’re heading outside. |\n```\n\n----------------------------------------\n\nTITLE: Send Message with Multiple Cache Breakpoints and Tools (cURL)\nDESCRIPTION: This example illustrates how to combine prompt caching with tool definitions and system messages in a single API call. It shows how to define multiple tools with their input schemas and how to apply `cache_control` to both tools and system messages, enabling more granular control over caching behavior for complex interactions.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/prompt-caching\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --header \"content-type: application/json\" \\\n     --data \\\n'{ \n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"tools\": [\n        {\n            \"name\": \"search_documents\",\n            \"description\": \"Search through the knowledge base\",\n            \"input_schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"query\": {\n                        \"type\": \"string\",\n                        \"description\": \"Search query\"\n                    }\n                },\n                \"required\": [\"query\"]\n            }\n        },\n        {\n            \"name\": \"get_document\",\n            \"description\": \"Retrieve a specific document by ID\",\n            \"input_schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"doc_id\": {\n                        \"type\": \"string\",\n                        \"description\": \"Document ID\"\n                    }\n                },\n                \"required\": [\"doc_id\"]\n            },\n            \"cache_control\": {\"type\": \"ephemeral\"}\n        }\n    ],\n    \"system\": [\n        {\n            \"type\": \"text\",\n            \"text\": \"You are a helpful research assistant with access to a document knowledge base.\\n\\n# Instructions\\n- Always search for relevant documents before answering\\n- Provide citations for your sources\\n- Be objective and accurate in your responses\\n- If multiple documents contain relevant information, synthesize them\\n- Acknowledge when information is not available in the knowledge base\",\n            \"cache_control\": {\"type\": \"ephemeral\"}\n        },\n        {\n            \"type\": \"text\",\n```\n\n----------------------------------------\n\nTITLE: Effective Prompting Strategies for Claude\nDESCRIPTION: Provides key strategies and example prompt snippets to optimize Claude's performance and output quality for various tasks, including explicit instructions, handling UI elements, and secure credential handling.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: Prompt\nCODE:\n```\nAfter each step, take a screenshot and carefully evaluate if you have achieved the right outcome. Explicitly show your thinking: \"I have evaluated step X...\" If not correct, try again. Only when you confirm a step was executed correctly should you move on to the next one.\n```\n\nLANGUAGE: XML\nCODE:\n```\n<robot_credentials>...</robot_credentials>\n```\n\n----------------------------------------\n\nTITLE: Handle Claude Computer Actions with Python\nDESCRIPTION: Defines a Python function to dispatch various computer actions requested by Claude, such as screenshot capture, mouse clicks, and text typing, based on the action type and provided parameters.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool\n\nLANGUAGE: Python\nCODE:\n```\ndef handle_computer_action(action_type, params):\n    if action_type == \"screenshot\":\n        return capture_screenshot()\n    elif action_type == \"left_click\":\n        x, y = params[\"coordinate\"]\n        return click_at(x, y)\n    elif action_type == \"type\":\n        return type_text(params[\"text\"])\n    # ... handle other actions\n```\n\n----------------------------------------\n\nTITLE: Update Workspace Member Role with cURL\nDESCRIPTION: Modifies the role of an existing member within a specified workspace. The workspace ID, user ID, and the new workspace role must be provided, along with an admin API key.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/administration-api\n\nLANGUAGE: Shell\nCODE:\n```\ncurl --request POST \"https://api.anthropic.com/v1/organizations/workspaces/{workspace_id}/members/{user_id}\" \\\n  --header \"anthropic-version: 2023-06-01\" \\\n  --header \"x-api-key: $ANTHROPIC_ADMIN_KEY\" \\\n  --data '{\n    \"workspace_role\": \"workspace_admin\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Define `get_weather` Tool with JSON Schema\nDESCRIPTION: This JSON snippet defines a `get_weather` tool, specifying its name, a brief description, and an `input_schema` using JSON Schema. The schema details the expected parameters (`location` and `unit`) for the tool, including their types, descriptions, and required fields.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude_api_primer\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"get_weather\",\n  \"description\": \"Get the current weather in a given location\",\n  \"input_schema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"location\": {\n        \"type\": \"string\",\n        \"description\": \"The city and state, e.g. San Francisco, CA\"\n      },\n      \"unit\": {\n        \"type\": \"string\",\n        \"enum\": [\"celsius\", \"fahrenheit\"],\n        \"description\": \"The unit of temperature, either 'celsius' or 'fahrenheit'\"\n      }\n    },\n    \"required\": [\"location\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Quickly Add Memory Using # Shortcut\nDESCRIPTION: Demonstrates how to quickly add a new memory entry by prefixing your input with the '#' character. This action prompts the user to select a memory file for storage, streamlining the process of capturing immediate insights or instructions.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/memory\n\nLANGUAGE: Shell\nCODE:\n```\n# Always use descriptive variable names\n```\n\n----------------------------------------\n\nTITLE: Add Member to Workspace with cURL\nDESCRIPTION: Adds a new user as a member to a specified workspace, assigning them a particular role. The user ID and desired workspace role must be included in the request body, along with the workspace ID and admin API key.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/api/administration-api\n\nLANGUAGE: Shell\nCODE:\n```\ncurl --request POST \"https://api.anthropic.com/v1/organizations/workspaces/{workspace_id}/members\" \\\n  --header \"anthropic-version: 2023-06-01\" \\\n  --header \"x-api-key: $ANTHROPIC_ADMIN_KEY\" \\\n  --data '{\n    \"user_id\": \"user_xxx\",\n    \"workspace_role\": \"workspace_developer\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Claude Tool Use for Structured JSON Output (Shell)\nDESCRIPTION: Demonstrates how to configure Claude to produce structured JSON output using a single tool (`record_summary`) and the `tool_choice` parameter. This example shows a `curl` command to interact with the Anthropic API, passing an image and the tool definition.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: Shell\nCODE:\n```\n#!/bin/bash\nIMAGE_URL=\"https://upload.wikimedia.org/wikipedia/commons/a/a7/Camponotus_flavomarginatus_ant.jpg\"\nIMAGE_MEDIA_TYPE=\"image/jpeg\"\nIMAGE_BASE64=$(curl \"$IMAGE_URL\" | base64)\n\ncurl https://api.anthropic.com/v1/messages \\\n     --header \"content-type: application/json\" \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --data \\\n'{\n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"tools\": [{\n        \"name\": \"record_summary\",\n        \"description\": \"Record summary of an image using well-structured JSON.\",\n        \"input_schema\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"key_colors\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"r\": { \"type\": \"number\", \"description\": \"red value [0.0, 1.0]\" },\n                            \"g\": { \"type\": \"number\", \"description\": \"green value [0.0, 1.0]\" },\n```\n\n----------------------------------------\n\nTITLE: Define Multiple Tools for Claude API Call (Shell/JSON)\nDESCRIPTION: This snippet shows an example of defining two independent tools, `get_weather` and `get_time`, within a single Anthropic Claude API request. It illustrates how Claude can use these tools, potentially in parallel or sequentially, to answer a user's query that requires information from both.\n\nSOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n     --header \"x-api-key: $ANTHROPIC_API_KEY\" \\\n     --header \"anthropic-version: 2023-06-01\" \\\n     --header \"content-type: application/json\" \\\n     --data \\\n'{\n    \"model\": \"claude-opus-4-20250514\",\n    \"max_tokens\": 1024,\n    \"tools\": [{\n        \"name\": \"get_weather\",\n        \"description\": \"Get the current weather in a given location\",\n        \"input_schema\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"location\": {\n                    \"type\": \"string\",\n                    \"description\": \"The city and state, e.g. San Francisco, CA\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"enum\": [\"celsius\", \"fahrenheit\"],\n                    \"description\": \"The unit of temperature, either 'celsius' or 'fahrenheit'\"\n                }\n            },\n            \"required\": [\"location\"]\n        }\n    },\n    {\n        \"name\": \"get_time\",\n        \"description\": \"Get the current time in a given time zone\",\n        \"input_schema\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"timezone\": {\n                    \"type\": \"string\",\n                    \"description\": \"The IANA time zone name, e.g. America/Los_Angeles\"\n                }\n            },\n            \"required\": [\"timezone\"]\n        }\n    }],\n    \"messages\": [{\n        \"role\": \"user\",\n        \"content\": \"What is the weather like right now in New York? Also what time is it there?\"\n    }]\n}'\n```"}]}
{"parentUuid":"12a03198-123d-4b54-b6ef-739017c36de5","isSidechain":false,"userType":"external","cwd":"/Users/kyle/Code/cc-tui.nvim","sessionId":"4ccf3891-59b5-49fb-8978-fae1303cf444","version":"1.0.72","gitBranch":"project_discovery","message":{"id":"msg_01WCXGTUJtgvtgLRXgaQ3Tsg","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Based on the documentation I found, here's information about Claude Code hooks:\n\n## Claude Code Hooks\n\nClaude Code supports hooks - shell commands that execute in response to events like tool calls. Here are the key points:\n\n### Basic Hook Information\n- **Hooks are shell commands** that users can configure to execute automatically when specific events occur\n- They are configured in **settings** (likely in configuration files)\n- **Feedback from hooks is treated as coming from the user**, including special hooks like `<user-prompt-submit-hook>`\n\n### Hook Behavior\n- If a hook **blocks execution**, Claude will try to adjust actions based on the blocked message\n- If Claude can't adjust, it will **ask the user to check their hooks configuration**\n- Hooks can provide feedback that influences Claude's behavior\n\n### Configuration\n- Hooks are configured through **settings files** (similar to other Claude Code settings like telemetry and model configurations)\n- The exact configuration format wasn't detailed in the search results, but it follows Claude Code's general settings pattern\n\n### Hook Libraries Available\nThere's also a **Claude Code Hooks toolkit** (`/gowaylee/cchooks`) - a lightweight Python toolkit for building Claude Code hooks that simplifies JSON parsing and boilerplate code for various hook types.\n\nThe documentation shows that hooks integrate into Claude Code's workflow by allowing custom shell commands to execute at specific points, with their output being fed back into the conversation flow as if it came from the user."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":7,"cache_creation_input_tokens":21974,"cache_read_input_tokens":70328,"output_tokens":320,"service_tier":"standard"}},"requestId":"req_011CRyP1NFFPVAh87Lv7wNpZ","type":"assistant","uuid":"95a1c056-07f5-48fa-bf86-56ea7f9b543d","timestamp":"2025-08-10T04:15:00.879Z"}
